/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** This endpoint allows a user of the SDK scheme adapter to check the outbound transfers service is listening. */
    get: {
      responses: {
        /** Returns empty body if the scheme adapter outbound transfers service is running. */
        200: unknown;
      };
    };
  };
  "/transfers": {
    /**
     * The HTTP request `POST /transfers` is used to request the movement of funds from payer DFSP to payee DFSP.
     * The underlying Mojaloop API has three stages for money transfer:
     *
     *   1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
     *   2. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
     *   3. Transfer. The enactment of the previously agreed "contract"
     *
     * This method has several modes of operation.
     * - If the configuration variables `AUTO_ACCEPT_PARTIES` is set to `"false"` this method will terminate when the payee party has been resolved and return the payee party details.
     *   If the payee wishes to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the payee party) is required to continue the operation.
     *   The scheme adapter will then proceed with quotation stage...
     *
     * - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"` this method will terminate and return the quotation when it has been received from the payee DFSP.
     *   If the payee wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
     *   The scheme adapter will then proceed with the transfer state.
     *
     * If the configuration variables `AUTO_ACCEPT_PARTIES` and `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block until all three transfer stages are complete. Upon completion it will return the entire set of transfer details received during the operation.
     *
     * Combinations of settings for `AUTO_ACCEPT...` configuration variables allow the scheme adapter user to decide which mode of operation best suits their use cases. i.e. the scheme adapter can be configured to "break" the three stage transfer at these points in order to execute backend logic such as party verification, quoted fees assessments etc...
     */
    post: {
      responses: {
        /** Transfer completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId?: string;
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              homeTransactionId: string;
              from: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * transferTransactionType
               * @description Type of transaction.
               * @enum {string}
               */
              transactionType: "TRANSFER";
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /** @enum {string} */
              currentState?:
                | "ERROR_OCCURRED"
                | "WAITING_FOR_PARTY_ACCEPTANCE"
                | "WAITING_FOR_QUOTE_ACCEPTANCE"
                | "COMPLETED";
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId?: string;
              getPartiesResponse?: {
                body: { [key: string]: unknown };
                headers?: { [key: string]: unknown };
              };
              quoteResponse?: {
                /**
                 * QuotesIDPutResponse
                 * @description The object sent in the PUT /quotes/{ID} callback.
                 */
                body: {
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  transferAmount: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeReceiveAmount?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspFee?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspCommission?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  expiration: string;
                  /**
                   * GeoCode
                   * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                   */
                  geoCode?: {
                    /**
                     * Latitude
                     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +45.4215
                     */
                    latitude: string;
                    /**
                     * Longitude
                     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +75.6972
                     */
                    longitude: string;
                  };
                  /**
                   * IlpPacket
                   * @description Information for recipient (transport layer information).
                   * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                   */
                  ilpPacket: string;
                  /**
                   * IlpCondition
                   * @description Condition that must be attached to the transfer by the Payer.
                   */
                  condition: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
              /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
              quoteResponseSource?: string;
              fulfil?: {
                /**
                 * TransfersIDPutResponse
                 * @description The object sent in the PUT /transfers/{ID} callback.
                 */
                body: {
                  /**
                   * IlpFulfilment
                   * @description Fulfilment that must be attached to the transfer by the Payee.
                   * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                   */
                  fulfilment?: string;
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  completedTimestamp?: string;
                  /**
                   * TransferState
                   * @description Below are the allowed values for the enumeration.
                   * - RECEIVED - Next ledger has received the transfer.
                   * - RESERVED - Next ledger has reserved the transfer.
                   * - COMMITTED - Next ledger has successfully performed the transfer.
                   * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                   * @example RESERVED
                   * @enum {string}
                   */
                  transferState:
                    | "RECEIVED"
                    | "RESERVED"
                    | "COMMITTED"
                    | "ABORTED";
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
              /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
              skipPartyLookup?: boolean;
            };
          };
        };
        /** Malformed or missing required body, headers or parameters */
        400: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
        /** An error occurred processing the transfer */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
        /** Timeout occurred processing the transfer */
        504: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
      };
      /** Transfer request body */
      requestBody: {
        content: {
          "application/json": {
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * transferTransactionType
             * @description Type of transaction.
             * @enum {string}
             */
            transactionType: "TRANSFER";
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
            quoteRequestExtensions?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
            transferRequestExtensions?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
            /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
            skipPartyLookup?: boolean;
          };
        };
      };
    };
  };
  "/transfers/{transferId}": {
    /** The HTTP request `GET /transfers/{transferId}` is used to get information regarding a transfer created or requested earlier. The `{transferId}` in the URI should contain the `transferId` that was used for the creation of the transfer. */
    get: {
      parameters: {
        path: {
          /** Identifier of the transfer to continue as returned in the response to a `POST /transfers` request. */
          transferId: string;
        };
      };
      responses: {
        /** Transfer information successfully retrieved */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId: string;
              /** @enum {string} */
              currentState:
                | "ERROR_OCCURRED"
                | "WAITING_FOR_PARTY_ACCEPTANCE"
                | "WAITING_FOR_QUOTE_ACCEPTANCE"
                | "COMPLETED";
              fulfil: {
                /**
                 * TransfersIDPutResponse
                 * @description The object sent in the PUT /transfers/{ID} callback.
                 */
                body: {
                  /**
                   * IlpFulfilment
                   * @description Fulfilment that must be attached to the transfer by the Payee.
                   * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                   */
                  fulfilment?: string;
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  completedTimestamp?: string;
                  /**
                   * TransferState
                   * @description Below are the allowed values for the enumeration.
                   * - RECEIVED - Next ledger has received the transfer.
                   * - RESERVED - Next ledger has reserved the transfer.
                   * - COMMITTED - Next ledger has successfully performed the transfer.
                   * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                   * @example RESERVED
                   * @enum {string}
                   */
                  transferState:
                    | "RECEIVED"
                    | "RESERVED"
                    | "COMMITTED"
                    | "ABORTED";
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
            };
          };
        };
        /** An error occurred processing the transfer */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          };
        };
      };
    };
    /**
     * The HTTP request `PUT /transfers/{transferId}` is used to continue a transfer initiated via the `POST /transfers` method that has halted after party lookup and/or quotation stage.
     *
     * The request body should contain either the "acceptParty" or "acceptQuote" property set to `true` as required to continue the transfer.
     *
     * See the description of the `POST /transfers` HTTP method for more information on modes of transfer.
     */
    put: {
      parameters: {
        path: {
          /** Identifier of the transfer to continue as returned in the response to a `POST /transfers` request. */
          transferId: string;
        };
      };
      responses: {
        /** Transfer completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId?: string;
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              homeTransactionId: string;
              from: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * transferTransactionType
               * @description Type of transaction.
               * @enum {string}
               */
              transactionType: "TRANSFER";
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /** @enum {string} */
              currentState?:
                | "ERROR_OCCURRED"
                | "WAITING_FOR_PARTY_ACCEPTANCE"
                | "WAITING_FOR_QUOTE_ACCEPTANCE"
                | "COMPLETED";
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId?: string;
              getPartiesResponse?: {
                body: { [key: string]: unknown };
                headers?: { [key: string]: unknown };
              };
              quoteResponse?: {
                /**
                 * QuotesIDPutResponse
                 * @description The object sent in the PUT /quotes/{ID} callback.
                 */
                body: {
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  transferAmount: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeReceiveAmount?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspFee?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspCommission?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  expiration: string;
                  /**
                   * GeoCode
                   * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                   */
                  geoCode?: {
                    /**
                     * Latitude
                     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +45.4215
                     */
                    latitude: string;
                    /**
                     * Longitude
                     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +75.6972
                     */
                    longitude: string;
                  };
                  /**
                   * IlpPacket
                   * @description Information for recipient (transport layer information).
                   * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                   */
                  ilpPacket: string;
                  /**
                   * IlpCondition
                   * @description Condition that must be attached to the transfer by the Payer.
                   */
                  condition: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
              /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
              quoteResponseSource?: string;
              fulfil?: {
                /**
                 * TransfersIDPutResponse
                 * @description The object sent in the PUT /transfers/{ID} callback.
                 */
                body: {
                  /**
                   * IlpFulfilment
                   * @description Fulfilment that must be attached to the transfer by the Payee.
                   * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                   */
                  fulfilment?: string;
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  completedTimestamp?: string;
                  /**
                   * TransferState
                   * @description Below are the allowed values for the enumeration.
                   * - RECEIVED - Next ledger has received the transfer.
                   * - RESERVED - Next ledger has reserved the transfer.
                   * - COMMITTED - Next ledger has successfully performed the transfer.
                   * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                   * @example RESERVED
                   * @enum {string}
                   */
                  transferState:
                    | "RECEIVED"
                    | "RESERVED"
                    | "COMMITTED"
                    | "ABORTED";
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
              /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
              skipPartyLookup?: boolean;
            };
          };
        };
        /** An error occurred processing the transfer */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
        /** Timeout occurred processing the transfer */
        504: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json":
            | {
                /** @enum {boolean} */
                acceptParty: true;
              }
            | {
                /** @enum {boolean} */
                acceptQuote: true | false;
              };
        };
      };
    };
  };
  "/bulkTransactions": {
    /** The HTTP request `POST /bulkTransactions` is used to request the movement of funds from payer DFSP to payees' DFSP. */
    post: {
      responses: {
        /** Bulk transfer accepted successfully */
        202: unknown;
        /** Malformed or missing required body, headers or parameters */
        400: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              bulkTransferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkTransferId: string;
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkQuoteId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                bulkTransferState?:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @enum {string} */
                currentState: "ERROR_OCCURRED" | "COMPLETED";
                /** @description List of individual transfer result in a bulk transfer response. */
                individualTransferResults: {
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  transferId: string;
                  /**
                   * IlpFulfilment
                   * @description Fulfilment that must be attached to the transfer by the Payee.
                   * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                   */
                  fulfilment?: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                  /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                  lastError?: {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                }[];
              };
            };
          };
        };
        /** Internal Server Error */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          };
        };
      };
      /** Bulk transfer request body */
      requestBody: {
        content: {
          "application/json": {
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            bulkHomeTransactionID: string;
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkTransactionId: string;
            options: {
              /** @description Set to true if only party validation is required.  This means the quotes and transfers will not run. This is useful for only party resolution. */
              onlyValidateParty?: boolean;
              autoAcceptParty: {
                /** @enum {boolean} */
                enabled: false | true;
              };
              /** @description Set to true if the quote response is accepted without confirmation from the payer. The fees applied by the payee will be acceptable to the payer abiding by the limits set by optional 'perTransferFeeLimits' array. */
              autoAcceptQuote: {
                /** @enum {boolean} */
                enabled: true | false;
                perTransferFeeLimits?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                }[];
              };
              /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful if a previous party resolution has been performed. */
              skipPartyLookup?: boolean;
              /** @description Set to true if the bulkTransfer requests need be handled synchronous. Otherwise the requests will be handled asynchronously, meaning there will  be callbacks whenever the processing is done */
              synchronous?: boolean;
              /**
               * DateTime
               * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
               * @example 2016-05-24T08:38:08.699-04:00
               */
              bulkExpiration: string;
            };
            /**
             * Party
             * @description Data model for the complex type Party.
             */
            from: {
              /**
               * PartyIdInfo
               * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
               */
              partyIdInfo: {
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                partyIdType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                partyIdentifier: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                partySubIdOrType?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * PartyName
               * @description Name of the Party. Could be a real name or a nickname.
               */
              name?: string;
              /**
               * PartyPersonalInfo
               * @description Data model for the complex type PartyPersonalInfo.
               */
              personalInfo?: {
                /**
                 * PartyComplexName
                 * @description Data model for the complex type PartyComplexName.
                 */
                complexName?: {
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                };
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
              };
            };
            /** @description List of individual transfers in a bulk transfer. */
            individualTransfers: {
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              homeTransactionId: string;
              /**
               * Party
               * @description Data model for the complex type Party.
               */
              to: {
                /**
                 * PartyIdInfo
                 * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
                 */
                partyIdInfo: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  partyIdType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  partyIdentifier: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  partySubIdOrType?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * PartyName
                 * @description Name of the Party. Could be a real name or a nickname.
                 */
                name?: string;
                /**
                 * PartyPersonalInfo
                 * @description Data model for the complex type PartyPersonalInfo.
                 */
                personalInfo?: {
                  /**
                   * PartyComplexName
                   * @description Data model for the complex type PartyComplexName.
                   */
                  complexName?: {
                    /**
                     * FirstName
                     * @description First name of the Party (Name Type).
                     * @example Henrik
                     */
                    firstName?: string;
                    /**
                     * MiddleName
                     * @description Middle name of the Party (Name Type).
                     * @example Johannes
                     */
                    middleName?: string;
                    /**
                     * LastName
                     * @description Last name of the Party (Name Type).
                     * @example Karlsson
                     */
                    lastName?: string;
                  };
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                };
              };
              /** @description Payer Loan reference */
              reference?: string;
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              quoteExtensions?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              transferExtensions?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            }[];
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensions?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
  };
  "/bulkTransactions/{bulkTransactionId}": {
    /** The HTTP request `PUT /bulkTransactions/{bulkTransactionId}` is used to amend information regarding a bulk transaction, i.e. when autoAcceptParty or autoAcceptQuote  is false then the payer need to provide confirmation to proceed with further processing of the request. The `{bulkTransactionId}` in the URI should contain the `bulkTransactionId` that was used for the creation of the bulk transfer. */
    put: {
      parameters: {
        path: {
          /** Identifier of the bulk transaction to continue as returned in the response to a `POST /bulkTransaction` request. */
          bulkTransactionId: string;
        };
      };
      responses: {
        /** Bulk transaction information successfully amended */
        202: unknown;
        /** Malformed or missing required body, headers or parameters */
        400: {
          content: {
            "application/json":
              | ({
                  /** @description Error code as string. */
                  statusCode?: string;
                  /** @description Error message text. */
                  message?: string;
                } & {
                  bulkTransferState: {
                    /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                    bulkHomeTransactionID: string;
                    /** @description List of individual transfers in a bulk transfer with accept party information. */
                    individualTransfers: ({
                      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                      homeTransactionId: string;
                      /**
                       * CorrelationId
                       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                       */
                      transactionId: string;
                    } & {
                      /** @enum {boolean} */
                      acceptParty: true;
                    })[];
                  } & {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                })
              | ({
                  /** @description Error code as string. */
                  statusCode?: string;
                  /** @description Error message text. */
                  message?: string;
                } & ({
                  bulkTransferState?: {
                    /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                    bulkHomeTransactionID: string;
                    /** @description List of individual transfers in a bulk transfer. */
                    individualTransfers: ({
                      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                      homeTransactionId: string;
                      /**
                       * CorrelationId
                       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                       */
                      transactionId: string;
                    } & {
                      /** @enum {boolean} */
                      acceptQuote: true | false;
                    })[];
                  } & {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                } & {
                  bulkTansferState: unknown;
                }));
          };
        };
        /** An error occurred processing the bulk transaction */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          };
        };
      };
      /** Bulk transaction request body */
      requestBody: {
        content: {
          "application/json":
            | {
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                bulkHomeTransactionID: string;
                /** @description List of individual transfers in a bulk transfer with accept party information. */
                individualTransfers: ({
                  /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                  homeTransactionId: string;
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  transactionId: string;
                } & {
                  /** @enum {boolean} */
                  acceptParty: true;
                })[];
              }
            | {
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                bulkHomeTransactionID: string;
                /** @description List of individual transfers in a bulk transfer. */
                individualTransfers: ({
                  /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                  homeTransactionId: string;
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  transactionId: string;
                } & {
                  /** @enum {boolean} */
                  acceptQuote: true | false;
                })[];
              };
        };
      };
    };
  };
  "/bulkTransfers": {
    /** The HTTP request `POST /bulkTransfers` is used to request the movement of funds from payer DFSP to payees' DFSP. */
    post: {
      responses: {
        /** Bulk transfer completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              bulkTransferId: string;
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              bulkQuoteId?: string;
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              homeTransactionId?: string;
              /**
               * TransferState
               * @description Below are the allowed values for the enumeration.
               * - RECEIVED - Next ledger has received the transfer.
               * - RESERVED - Next ledger has reserved the transfer.
               * - COMMITTED - Next ledger has successfully performed the transfer.
               * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
               * @example RESERVED
               * @enum {string}
               */
              bulkTransferState?:
                | "RECEIVED"
                | "RESERVED"
                | "COMMITTED"
                | "ABORTED";
              /**
               * DateTime
               * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
               * @example 2016-05-24T08:38:08.699-04:00
               */
              completedTimestamp?: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @enum {string} */
              currentState: "ERROR_OCCURRED" | "COMPLETED";
              /** @description List of individual transfer result in a bulk transfer response. */
              individualTransferResults: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId: string;
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
              }[];
            };
          };
        };
        /** Malformed or missing required body, headers or parameters */
        400: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              bulkTransferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkTransferId: string;
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkQuoteId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                bulkTransferState?:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @enum {string} */
                currentState: "ERROR_OCCURRED" | "COMPLETED";
                /** @description List of individual transfer result in a bulk transfer response. */
                individualTransferResults: {
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  transferId: string;
                  /**
                   * IlpFulfilment
                   * @description Fulfilment that must be attached to the transfer by the Payee.
                   * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                   */
                  fulfilment?: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                  /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                  lastError?: {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                }[];
              };
            };
          };
        };
        /** Internal Server Error */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          };
        };
      };
      /** Bulk transfer request body */
      requestBody: {
        content: {
          "application/json": {
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkTransferId?: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @description List of individual transfers in a bulk transfer. */
            individualTransfers: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId: string;
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * transferTransactionType
               * @description Type of transaction.
               * @enum {string}
               */
              transactionType?: "TRANSFER";
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensions?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            }[];
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensions?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
  };
  "/bulkTransfers/{bulkTransferId}": {
    /** The HTTP request `GET /bulkTransfers/{bulkTransferId}` is used to get information regarding a bulk transfer created or requested earlier. The `{bulkTransferId}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer. */
    get: {
      parameters: {
        path: {
          /** Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request. */
          bulkTransferId: string;
        };
      };
      responses: {
        /** Bulk transfer information successfully retrieved */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              bulkTransferId: string;
              /** @enum {string} */
              currentState: "ERROR_OCCURRED" | "COMPLETED";
              fulfils: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              }[];
            };
          };
        };
        /** An error occurred processing the bulk transfer */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/bulkQuotes": {
    /** The HTTP request `POST /bulkQuotes` is used to request a bulk quote to fascilitate funds transfer from payer DFSP to payees' DFSP. */
    post: {
      responses: {
        /** Bulk quote completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              bulkQuoteId: string;
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              homeTransactionId?: string;
              /**
               * DateTime
               * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
               * @example 2016-05-24T08:38:08.699-04:00
               */
              expiration?: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @enum {string} */
              currentState: "ERROR_OCCURRED" | "COMPLETED";
              /** @description List of individualQuoteResults in a bulk transfer response. */
              individualQuoteResults: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId: string;
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @description This object represents a Mojaloop API error received at any time during the quote process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
              }[];
            };
          };
        };
        /** Malformed or missing required body, headers or parameters */
        400: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & ({
              bulkQuoteState?: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkQuoteId: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @enum {string} */
                currentState: "ERROR_OCCURRED" | "COMPLETED";
                /** @description List of individualQuoteResults in a bulk transfer response. */
                individualQuoteResults: {
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  quoteId: string;
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  transferAmount: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeReceiveAmount?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspFee?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspCommission?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * GeoCode
                   * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                   */
                  geoCode?: {
                    /**
                     * Latitude
                     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +45.4215
                     */
                    latitude: string;
                    /**
                     * Longitude
                     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +75.6972
                     */
                    longitude: string;
                  };
                  /**
                   * IlpPacket
                   * @description Information for recipient (transport layer information).
                   * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                   */
                  ilpPacket: string;
                  /**
                   * IlpCondition
                   * @description Condition that must be attached to the transfer by the Payer.
                   */
                  condition: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                  /** @description This object represents a Mojaloop API error received at any time during the quote process */
                  lastError?: {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                }[];
              };
            } & {
              bulkTansferState: unknown;
            });
          };
        };
        /** An error occurred processing the bulk quote */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & ({
              bulkQuoteState?: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkQuoteId: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @enum {string} */
                currentState: "ERROR_OCCURRED" | "COMPLETED";
                /** @description List of individualQuoteResults in a bulk transfer response. */
                individualQuoteResults: {
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  quoteId: string;
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  transferAmount: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeReceiveAmount?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspFee?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspCommission?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * GeoCode
                   * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                   */
                  geoCode?: {
                    /**
                     * Latitude
                     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +45.4215
                     */
                    latitude: string;
                    /**
                     * Longitude
                     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +75.6972
                     */
                    longitude: string;
                  };
                  /**
                   * IlpPacket
                   * @description Information for recipient (transport layer information).
                   * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                   */
                  ilpPacket: string;
                  /**
                   * IlpCondition
                   * @description Condition that must be attached to the transfer by the Payer.
                   */
                  condition: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                  /** @description This object represents a Mojaloop API error received at any time during the quote process */
                  lastError?: {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                }[];
              };
            } & {
              bulkTansferState: unknown;
            });
          };
        };
        /** Timeout occurred processing the bulk quote */
        504: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & ({
              bulkQuoteState?: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                bulkQuoteId: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /** @enum {string} */
                currentState: "ERROR_OCCURRED" | "COMPLETED";
                /** @description List of individualQuoteResults in a bulk transfer response. */
                individualQuoteResults: {
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  quoteId: string;
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  transferAmount: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeReceiveAmount?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspFee?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspCommission?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * GeoCode
                   * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                   */
                  geoCode?: {
                    /**
                     * Latitude
                     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +45.4215
                     */
                    latitude: string;
                    /**
                     * Longitude
                     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +75.6972
                     */
                    longitude: string;
                  };
                  /**
                   * IlpPacket
                   * @description Information for recipient (transport layer information).
                   * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                   */
                  ilpPacket: string;
                  /**
                   * IlpCondition
                   * @description Condition that must be attached to the transfer by the Payer.
                   */
                  condition: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                  /** @description This object represents a Mojaloop API error received at any time during the quote process */
                  lastError?: {
                    /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                    httpStatusCode?: number;
                    /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                    mojaloopError?: {
                      /**
                       * ErrorInformation
                       * @description Data model for the complex type ErrorInformation.
                       */
                      errorInformation?: {
                        /**
                         * ErrorCode
                         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                         * @example 5100
                         */
                        errorCode: string;
                        /**
                         * ErrorDescription
                         * @description Error description string.
                         */
                        errorDescription: string;
                        /**
                         * ExtensionList
                         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                         */
                        extensionList?: {
                          /** @description Number of Extension elements. */
                          extension: {
                            /**
                             * ExtensionKey
                             * @description Extension key.
                             */
                            key: string;
                            /**
                             * ExtensionValue
                             * @description Extension value.
                             */
                            value: string;
                          }[];
                        };
                      };
                    };
                  };
                }[];
              };
            } & {
              bulkTansferState: unknown;
            });
          };
        };
      };
      /** Bulk quote request body */
      requestBody: {
        content: {
          "application/json": {
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkQuoteId?: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @description List of individual quotes in a bulk quote. */
            individualQuotes: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId: string;
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * transferTransactionType
               * @description Type of transaction.
               * @enum {string}
               */
              transactionType: "TRANSFER";
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensions?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            }[];
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensions?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
  };
  "/bulkQuotes/{bulkQuoteId}": {
    /** The HTTP request `GET /bulkQuotes/{bulktQuoteId}` is used to get information regarding a bulk quote created or requested earlier. The `{bulkQuoteId}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote. */
    get: {
      parameters: {
        path: {
          /** Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request. */
          bulkQuoteId: string;
        };
      };
      responses: {
        /** Bulk quote information successfully retrieved */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              bulkQuoteId: string;
              /** @enum {string} */
              currentState: "ERROR_OCCURRED" | "COMPLETED";
              individualQuotes: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId: string;
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensions?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              }[];
            };
          };
        };
        /** An error occurred processing the bulk quote */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          };
        };
      };
    };
  };
  "/requestToPay": {
    /**
     * The HTTP request `POST /requestToPay` is used to support Pull Funds pattern where in a receiver can request for funds from the Sender.
     * The underlying API has two stages:
     *
     *   1. Party lookup. This facilitates a check by the sending party that the destination party is correct before proceeding with a money movement.
     *   2. Transaction Request. This request enables a Payee to request Payer to send electronic funds to the Payee.
     */
    post: {
      responses: {
        /** Request to Pay completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transactionRequestId: string;
              from: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * TransactionType
               * @description Data model for the complex type TransactionType.
               */
              scenario?: {
                /**
                 * TransactionScenario
                 * @description Below are the allowed values for the enumeration.
                 * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
                 * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
                 * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
                 * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
                 * - REFUND - Used for performing a refund of transaction.
                 * @example DEPOSIT
                 * @enum {string}
                 */
                scenario:
                  | "DEPOSIT"
                  | "WITHDRAWAL"
                  | "TRANSFER"
                  | "PAYMENT"
                  | "REFUND";
                /**
                 * TransactionSubScenario
                 * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
                 * @example LOCALLY_DEFINED_SUBSCENARIO
                 */
                subScenario?: string;
                /**
                 * TransactionInitiator
                 * @description Below are the allowed values for the enumeration.
                 * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
                 * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
                 * @example PAYEE
                 * @enum {string}
                 */
                initiator: "PAYER" | "PAYEE";
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * Refund
                 * @description Data model for the complex type Refund.
                 */
                refundInfo?: {
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  originalTransactionId: string;
                  /**
                   * RefundReason
                   * @description Reason for the refund.
                   * @example Free text indicating reason for the refund.
                   */
                  refundReason?: string;
                };
                /**
                 * BalanceOfPayments
                 * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
                 * @example 123
                 */
                balanceOfPayments?: string;
              };
              /**
               * TransactionInitiator
               * @description Below are the allowed values for the enumeration.
               * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
               * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
               * @example PAYEE
               * @enum {string}
               */
              initiator?: "PAYER" | "PAYEE";
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              initiatorType?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * AuthenticationType
               * @description Below are the allowed values for the enumeration AuthenticationType.
               * - OTP - One-time password generated by the Payer FSP.
               * - QRCODE - QR code used as One Time Password.
               * - U2F - U2F is a new addition isolated to Thirdparty stream.
               * @example OTP
               * @enum {string}
               */
              authenticationType?: "OTP" | "QRCODE" | "U2F";
              /**
               * TransactionRequestState
               * @description Below are the allowed values for the enumeration.
               * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
               * - PENDING - Payer FSP has sent the transaction request to the Payer.
               * - ACCEPTED - Payer has approved the transaction.
               * - REJECTED - Payer has rejected the transaction.
               * @example RECEIVED
               * @enum {string}
               */
              requestToPayState:
                | "RECEIVED"
                | "PENDING"
                | "ACCEPTED"
                | "REJECTED";
            } & {
              transactionType: unknown;
            };
          };
        };
      };
      /** RequestToPay request body */
      requestBody: {
        content: {
          "application/json": {
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * TransactionType
             * @description Data model for the complex type TransactionType.
             */
            scenario: {
              /**
               * TransactionScenario
               * @description Below are the allowed values for the enumeration.
               * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
               * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
               * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
               * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
               * - REFUND - Used for performing a refund of transaction.
               * @example DEPOSIT
               * @enum {string}
               */
              scenario:
                | "DEPOSIT"
                | "WITHDRAWAL"
                | "TRANSFER"
                | "PAYMENT"
                | "REFUND";
              /**
               * TransactionSubScenario
               * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
               * @example LOCALLY_DEFINED_SUBSCENARIO
               */
              subScenario?: string;
              /**
               * TransactionInitiator
               * @description Below are the allowed values for the enumeration.
               * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
               * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
               * @example PAYEE
               * @enum {string}
               */
              initiator: "PAYER" | "PAYEE";
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * Refund
               * @description Data model for the complex type Refund.
               */
              refundInfo?: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                originalTransactionId: string;
                /**
                 * RefundReason
                 * @description Reason for the refund.
                 * @example Free text indicating reason for the refund.
                 */
                refundReason?: string;
              };
              /**
               * BalanceOfPayments
               * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
               * @example 123
               */
              balanceOfPayments?: string;
            };
            /**
             * TransactionInitiator
             * @description Below are the allowed values for the enumeration.
             * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
             * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
             * @example PAYEE
             * @enum {string}
             */
            initiator: "PAYER" | "PAYEE";
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          };
        };
      };
    };
  };
  "/requestToPayTransfer": {
    /**
     * The HTTP request `POST /requestToPayTransfer` is used to request the movement of funds from payer DFSP to payee DFSP.
     * The underlying Mojaloop API has three stages for money transfer:
     *
     *   1. Quotation. This facilitates the exchange of fee information and the construction of a cryptographic "contract" between payee and payer DFSPs before funds are transferred.
     *   2. Authorization. This facilitates getting OTP from payee DFSP.
     *   3. Transfer. The enactment of the previously agreed "contract"
     *
     * This method has several modes of operation.
     * - If the configuration variable `AUTO_ACCEPT_QUOTES` is set to `"false"` this method will terminate and return the quotation when it has been received from the payee DFSP.
     *   If the payee wished to proceed with the otp, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
     *   The scheme adapter will then proceed with the transfer state.
     *
     * - If the configuration variable `AUTO_ACCEPT_OTP` is set to `"false"` this method will terminate and return the otp when it has been received from the payee DFSP.
     *   If the payer wished to proceed with the transfer, then a subsequent `PUT /transfers/{transferId}` request (accepting the quote) is required to continue the operation.
     *   The scheme adapter will then proceed with the transfer state.
     *
     * If the configuration variables `AUTO_ACCEPT_PARTIES` and `AUTO_ACCEPT_QUOTES` are both set to `"true"` this method will block until all three transfer stages are complete. Upon completion it will return the entire set of transfer details received during the operation.
     *
     * Combinations of settings for `AUTO_ACCEPT...` configuration variables allow the scheme adapter user to decide which mode of operation best suits their use cases. i.e. the scheme adapter can be configured to "break" the three stage transfer at these points in order to execute backend logic such as party verification, quoted fees assessments etc...
     */
    post: {
      responses: {
        /** Transfer completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId?: string;
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              requestToPayTransactionId: string;
              from: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * transferTransactionType
               * @description Type of transaction.
               * @enum {string}
               */
              transactionType: "TRANSFER";
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /** @enum {string} */
              currentState?:
                | "ERROR_OCCURRED"
                | "WAITING_FOR_PARTY_ACCEPTANCE"
                | "WAITING_FOR_QUOTE_ACCEPTANCE"
                | "COMPLETED";
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId?: string;
              /**
               * QuotesIDPutResponse
               * @description The object sent in the PUT /quotes/{ID} callback.
               */
              quoteResponse?: {
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration: string;
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
              quoteResponseSource?: string;
              /**
               * TransfersIDPutResponse
               * @description The object sent in the PUT /transfers/{ID} callback.
               */
              fulfil?: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                transferState:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            };
          };
        };
        /** Malformed or missing required body, headers or parameters */
        400: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
        /** An error occurred processing the transfer */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
        /** Timeout occurred processing the transfer */
        504: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
      };
      /** Request To Pay Transfer request body */
      requestBody: {
        content: {
          "application/json": {
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            requestToPayTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * TransactionType
             * @description Data model for the complex type TransactionType.
             */
            scenario: {
              /**
               * TransactionScenario
               * @description Below are the allowed values for the enumeration.
               * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
               * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
               * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
               * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
               * - REFUND - Used for performing a refund of transaction.
               * @example DEPOSIT
               * @enum {string}
               */
              scenario:
                | "DEPOSIT"
                | "WITHDRAWAL"
                | "TRANSFER"
                | "PAYMENT"
                | "REFUND";
              /**
               * TransactionSubScenario
               * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
               * @example LOCALLY_DEFINED_SUBSCENARIO
               */
              subScenario?: string;
              /**
               * TransactionInitiator
               * @description Below are the allowed values for the enumeration.
               * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
               * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
               * @example PAYEE
               * @enum {string}
               */
              initiator: "PAYER" | "PAYEE";
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * Refund
               * @description Data model for the complex type Refund.
               */
              refundInfo?: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                originalTransactionId: string;
                /**
                 * RefundReason
                 * @description Reason for the refund.
                 * @example Free text indicating reason for the refund.
                 */
                refundReason?: string;
              };
              /**
               * BalanceOfPayments
               * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
               * @example 123
               */
              balanceOfPayments?: string;
            };
            /**
             * TransactionInitiator
             * @description Below are the allowed values for the enumeration.
             * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
             * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
             * @example PAYEE
             * @enum {string}
             */
            initiator: "PAYER" | "PAYEE";
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
          };
        };
      };
    };
  };
  "/requestToPayTransfer/{requestToPayTransactionId}": {
    /**
     * The HTTP request `PUT /transfers/{transferId}` is used to continue a transfer initiated via the `POST /transfers` method that has halted after party lookup and/or quotation stage.
     *
     * The request body should contain either the "acceptOTP" or "acceptQuote" property set to `true` as required to continue the transfer.
     *
     * See the description of the `POST /requestToPayTransfer` HTTP method for more information on modes of transfer.
     */
    put: {
      parameters: {
        path: {
          /** Identifier of the merchant request to pay transfer to continue as returned in the response to a `POST /requestToPayTransfer` request. */
          requestToPayTransactionId: string;
        };
      };
      responses: {
        /** Transfer completed successfully */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId?: string;
              /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
              homeTransactionId: string;
              from: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              to: {
                /**
                 * TransactionInitiatorType
                 * @description Below are the allowed values for the enumeration.
                 * - CONSUMER - Consumer is the initiator of the transaction.
                 * - AGENT - Agent is the initiator of the transaction.
                 * - BUSINESS - Business is the initiator of the transaction.
                 * - DEVICE - Device is the initiator of the transaction.
                 * @example CONSUMER
                 * @enum {string}
                 */
                type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Name
                 * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                 *
                 * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                 *
                 * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                 */
                displayName?: string;
                /**
                 * FirstName
                 * @description First name of the Party (Name Type).
                 * @example Henrik
                 */
                firstName?: string;
                /**
                 * MiddleName
                 * @description Middle name of the Party (Name Type).
                 * @example Johannes
                 */
                middleName?: string;
                /**
                 * LastName
                 * @description Last name of the Party (Name Type).
                 * @example Karlsson
                 */
                lastName?: string;
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                extensionList?: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /**
               * AmountType
               * @description Below are the allowed values for the enumeration AmountType.
               * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
               * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
               * @example RECEIVE
               * @enum {string}
               */
              amountType: "SEND" | "RECEIVE";
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
              /**
               * transferTransactionType
               * @description Type of transaction.
               * @enum {string}
               */
              transactionType: "TRANSFER";
              /**
               * Note
               * @description Memo assigned to transaction.
               * @example Note sent to Payee.
               */
              note?: string;
              /** @enum {string} */
              currentState?:
                | "ERROR_OCCURRED"
                | "WAITING_FOR_PARTY_ACCEPTANCE"
                | "WAITING_FOR_QUOTE_ACCEPTANCE"
                | "COMPLETED";
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId?: string;
              getPartiesResponse?: {
                body: { [key: string]: unknown };
                headers?: { [key: string]: unknown };
              };
              quoteResponse?: {
                /**
                 * QuotesIDPutResponse
                 * @description The object sent in the PUT /quotes/{ID} callback.
                 */
                body: {
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  transferAmount: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeReceiveAmount?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspFee?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * Money
                   * @description Data model for the complex type Money.
                   */
                  payeeFspCommission?: {
                    /**
                     * Currency
                     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                     * @enum {string}
                     */
                    currency:
                      | "AED"
                      | "AFN"
                      | "ALL"
                      | "AMD"
                      | "ANG"
                      | "AOA"
                      | "ARS"
                      | "AUD"
                      | "AWG"
                      | "AZN"
                      | "BAM"
                      | "BBD"
                      | "BDT"
                      | "BGN"
                      | "BHD"
                      | "BIF"
                      | "BMD"
                      | "BND"
                      | "BOB"
                      | "BRL"
                      | "BSD"
                      | "BTN"
                      | "BWP"
                      | "BYN"
                      | "BZD"
                      | "CAD"
                      | "CDF"
                      | "CHF"
                      | "CLP"
                      | "CNY"
                      | "COP"
                      | "CRC"
                      | "CUC"
                      | "CUP"
                      | "CVE"
                      | "CZK"
                      | "DJF"
                      | "DKK"
                      | "DOP"
                      | "DZD"
                      | "EGP"
                      | "ERN"
                      | "ETB"
                      | "EUR"
                      | "FJD"
                      | "FKP"
                      | "GBP"
                      | "GEL"
                      | "GGP"
                      | "GHS"
                      | "GIP"
                      | "GMD"
                      | "GNF"
                      | "GTQ"
                      | "GYD"
                      | "HKD"
                      | "HNL"
                      | "HRK"
                      | "HTG"
                      | "HUF"
                      | "IDR"
                      | "ILS"
                      | "IMP"
                      | "INR"
                      | "IQD"
                      | "IRR"
                      | "ISK"
                      | "JEP"
                      | "JMD"
                      | "JOD"
                      | "JPY"
                      | "KES"
                      | "KGS"
                      | "KHR"
                      | "KMF"
                      | "KPW"
                      | "KRW"
                      | "KWD"
                      | "KYD"
                      | "KZT"
                      | "LAK"
                      | "LBP"
                      | "LKR"
                      | "LRD"
                      | "LSL"
                      | "LYD"
                      | "MAD"
                      | "MDL"
                      | "MGA"
                      | "MKD"
                      | "MMK"
                      | "MNT"
                      | "MOP"
                      | "MRO"
                      | "MUR"
                      | "MVR"
                      | "MWK"
                      | "MXN"
                      | "MYR"
                      | "MZN"
                      | "NAD"
                      | "NGN"
                      | "NIO"
                      | "NOK"
                      | "NPR"
                      | "NZD"
                      | "OMR"
                      | "PAB"
                      | "PEN"
                      | "PGK"
                      | "PHP"
                      | "PKR"
                      | "PLN"
                      | "PYG"
                      | "QAR"
                      | "RON"
                      | "RSD"
                      | "RUB"
                      | "RWF"
                      | "SAR"
                      | "SBD"
                      | "SCR"
                      | "SDG"
                      | "SEK"
                      | "SGD"
                      | "SHP"
                      | "SLL"
                      | "SOS"
                      | "SPL"
                      | "SRD"
                      | "STD"
                      | "SVC"
                      | "SYP"
                      | "SZL"
                      | "THB"
                      | "TJS"
                      | "TMT"
                      | "TND"
                      | "TOP"
                      | "TRY"
                      | "TTD"
                      | "TVD"
                      | "TWD"
                      | "TZS"
                      | "UAH"
                      | "UGX"
                      | "USD"
                      | "UYU"
                      | "UZS"
                      | "VEF"
                      | "VND"
                      | "VUV"
                      | "WST"
                      | "XAF"
                      | "XCD"
                      | "XDR"
                      | "XOF"
                      | "XPF"
                      | "XTS"
                      | "XXX"
                      | "YER"
                      | "ZAR"
                      | "ZMW"
                      | "ZWD";
                    /**
                     * Amount
                     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                     * @example 123.45
                     */
                    amount: string;
                  };
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  expiration: string;
                  /**
                   * GeoCode
                   * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                   */
                  geoCode?: {
                    /**
                     * Latitude
                     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +45.4215
                     */
                    latitude: string;
                    /**
                     * Longitude
                     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                     * @example +75.6972
                     */
                    longitude: string;
                  };
                  /**
                   * IlpPacket
                   * @description Information for recipient (transport layer information).
                   * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                   */
                  ilpPacket: string;
                  /**
                   * IlpCondition
                   * @description Condition that must be attached to the transfer by the Payer.
                   */
                  condition: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
              /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
              quoteResponseSource?: string;
              fulfil?: {
                /**
                 * TransfersIDPutResponse
                 * @description The object sent in the PUT /transfers/{ID} callback.
                 */
                body: {
                  /**
                   * IlpFulfilment
                   * @description Fulfilment that must be attached to the transfer by the Payee.
                   * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                   */
                  fulfilment?: string;
                  /**
                   * DateTime
                   * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                   * @example 2016-05-24T08:38:08.699-04:00
                   */
                  completedTimestamp?: string;
                  /**
                   * TransferState
                   * @description Below are the allowed values for the enumeration.
                   * - RECEIVED - Next ledger has received the transfer.
                   * - RESERVED - Next ledger has reserved the transfer.
                   * - COMMITTED - Next ledger has successfully performed the transfer.
                   * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                   * @example RESERVED
                   * @enum {string}
                   */
                  transferState:
                    | "RECEIVED"
                    | "RESERVED"
                    | "COMMITTED"
                    | "ABORTED";
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                headers?: { [key: string]: unknown };
              };
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
              /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
              skipPartyLookup?: boolean;
            };
          };
        };
        /** An error occurred processing the transfer */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
        /** Timeout occurred processing the transfer */
        504: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              transferState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                transferId?: string;
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                homeTransactionId: string;
                from: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                to: {
                  /**
                   * TransactionInitiatorType
                   * @description Below are the allowed values for the enumeration.
                   * - CONSUMER - Consumer is the initiator of the transaction.
                   * - AGENT - Agent is the initiator of the transaction.
                   * - BUSINESS - Business is the initiator of the transaction.
                   * - DEVICE - Device is the initiator of the transaction.
                   * @example CONSUMER
                   * @enum {string}
                   */
                  type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Name
                   * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
                   *
                   * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
                   *
                   * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
                   */
                  displayName?: string;
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                  /**
                   * MerchantClassificationCode
                   * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                   */
                  merchantClassificationCode?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  extensionList?: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
                /**
                 * AmountType
                 * @description Below are the allowed values for the enumeration AmountType.
                 * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
                 * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
                 * @example RECEIVE
                 * @enum {string}
                 */
                amountType: "SEND" | "RECEIVE";
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
                /**
                 * transferTransactionType
                 * @description Type of transaction.
                 * @enum {string}
                 */
                transactionType: "TRANSFER";
                /**
                 * Note
                 * @description Memo assigned to transaction.
                 * @example Note sent to Payee.
                 */
                note?: string;
                /** @enum {string} */
                currentState?:
                  | "ERROR_OCCURRED"
                  | "WAITING_FOR_PARTY_ACCEPTANCE"
                  | "WAITING_FOR_QUOTE_ACCEPTANCE"
                  | "COMPLETED";
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                quoteId?: string;
                getPartiesResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
                quoteResponse?: {
                  /**
                   * QuotesIDPutResponse
                   * @description The object sent in the PUT /quotes/{ID} callback.
                   */
                  body: {
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    transferAmount: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeReceiveAmount?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspFee?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * Money
                     * @description Data model for the complex type Money.
                     */
                    payeeFspCommission?: {
                      /**
                       * Currency
                       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                       * @enum {string}
                       */
                      currency:
                        | "AED"
                        | "AFN"
                        | "ALL"
                        | "AMD"
                        | "ANG"
                        | "AOA"
                        | "ARS"
                        | "AUD"
                        | "AWG"
                        | "AZN"
                        | "BAM"
                        | "BBD"
                        | "BDT"
                        | "BGN"
                        | "BHD"
                        | "BIF"
                        | "BMD"
                        | "BND"
                        | "BOB"
                        | "BRL"
                        | "BSD"
                        | "BTN"
                        | "BWP"
                        | "BYN"
                        | "BZD"
                        | "CAD"
                        | "CDF"
                        | "CHF"
                        | "CLP"
                        | "CNY"
                        | "COP"
                        | "CRC"
                        | "CUC"
                        | "CUP"
                        | "CVE"
                        | "CZK"
                        | "DJF"
                        | "DKK"
                        | "DOP"
                        | "DZD"
                        | "EGP"
                        | "ERN"
                        | "ETB"
                        | "EUR"
                        | "FJD"
                        | "FKP"
                        | "GBP"
                        | "GEL"
                        | "GGP"
                        | "GHS"
                        | "GIP"
                        | "GMD"
                        | "GNF"
                        | "GTQ"
                        | "GYD"
                        | "HKD"
                        | "HNL"
                        | "HRK"
                        | "HTG"
                        | "HUF"
                        | "IDR"
                        | "ILS"
                        | "IMP"
                        | "INR"
                        | "IQD"
                        | "IRR"
                        | "ISK"
                        | "JEP"
                        | "JMD"
                        | "JOD"
                        | "JPY"
                        | "KES"
                        | "KGS"
                        | "KHR"
                        | "KMF"
                        | "KPW"
                        | "KRW"
                        | "KWD"
                        | "KYD"
                        | "KZT"
                        | "LAK"
                        | "LBP"
                        | "LKR"
                        | "LRD"
                        | "LSL"
                        | "LYD"
                        | "MAD"
                        | "MDL"
                        | "MGA"
                        | "MKD"
                        | "MMK"
                        | "MNT"
                        | "MOP"
                        | "MRO"
                        | "MUR"
                        | "MVR"
                        | "MWK"
                        | "MXN"
                        | "MYR"
                        | "MZN"
                        | "NAD"
                        | "NGN"
                        | "NIO"
                        | "NOK"
                        | "NPR"
                        | "NZD"
                        | "OMR"
                        | "PAB"
                        | "PEN"
                        | "PGK"
                        | "PHP"
                        | "PKR"
                        | "PLN"
                        | "PYG"
                        | "QAR"
                        | "RON"
                        | "RSD"
                        | "RUB"
                        | "RWF"
                        | "SAR"
                        | "SBD"
                        | "SCR"
                        | "SDG"
                        | "SEK"
                        | "SGD"
                        | "SHP"
                        | "SLL"
                        | "SOS"
                        | "SPL"
                        | "SRD"
                        | "STD"
                        | "SVC"
                        | "SYP"
                        | "SZL"
                        | "THB"
                        | "TJS"
                        | "TMT"
                        | "TND"
                        | "TOP"
                        | "TRY"
                        | "TTD"
                        | "TVD"
                        | "TWD"
                        | "TZS"
                        | "UAH"
                        | "UGX"
                        | "USD"
                        | "UYU"
                        | "UZS"
                        | "VEF"
                        | "VND"
                        | "VUV"
                        | "WST"
                        | "XAF"
                        | "XCD"
                        | "XDR"
                        | "XOF"
                        | "XPF"
                        | "XTS"
                        | "XXX"
                        | "YER"
                        | "ZAR"
                        | "ZMW"
                        | "ZWD";
                      /**
                       * Amount
                       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                       * @example 123.45
                       */
                      amount: string;
                    };
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    expiration: string;
                    /**
                     * GeoCode
                     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                     */
                    geoCode?: {
                      /**
                       * Latitude
                       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +45.4215
                       */
                      latitude: string;
                      /**
                       * Longitude
                       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                       * @example +75.6972
                       */
                      longitude: string;
                    };
                    /**
                     * IlpPacket
                     * @description Information for recipient (transport layer information).
                     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                     */
                    ilpPacket: string;
                    /**
                     * IlpCondition
                     * @description Condition that must be attached to the transfer by the Payer.
                     */
                    condition: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
                quoteResponseSource?: string;
                fulfil?: {
                  /**
                   * TransfersIDPutResponse
                   * @description The object sent in the PUT /transfers/{ID} callback.
                   */
                  body: {
                    /**
                     * IlpFulfilment
                     * @description Fulfilment that must be attached to the transfer by the Payee.
                     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                     */
                    fulfilment?: string;
                    /**
                     * DateTime
                     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                     * @example 2016-05-24T08:38:08.699-04:00
                     */
                    completedTimestamp?: string;
                    /**
                     * TransferState
                     * @description Below are the allowed values for the enumeration.
                     * - RECEIVED - Next ledger has received the transfer.
                     * - RESERVED - Next ledger has reserved the transfer.
                     * - COMMITTED - Next ledger has successfully performed the transfer.
                     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                     * @example RESERVED
                     * @enum {string}
                     */
                    transferState:
                      | "RECEIVED"
                      | "RESERVED"
                      | "COMMITTED"
                      | "ABORTED";
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                  headers?: { [key: string]: unknown };
                };
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
                skipPartyLookup?: boolean;
              };
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json":
            | {
                /** @enum {boolean} */
                acceptQuote: true | false;
              }
            | {
                /** @enum {boolean} */
                acceptOTP: true | false;
              };
        };
      };
    };
  };
  "/accounts": {
    /**
     * The HTTP request `POST /accounts` is used to create account information on the Account Lookup Service (ALS) regarding the provided list of identities.
     *
     * Caller DFSP is used as the account source FSP information
     */
    post: {
      responses: {
        /** Accounts creation completed */
        200: {
          content: {
            "application/json": {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              modelId?: string;
              accounts: {
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
              }[];
              response?: {
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                idType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                idValue: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                idSubValue?: string;
                error?: {
                  /** @description Error code as string. */
                  statusCode?: string;
                  /** @description Error message text. */
                  message?: string;
                };
              }[];
              /** @enum {string} */
              currentState?: "ERROR_OCCURRED" | "COMPLETED";
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
              postAccountsResponse?: {
                body: { [key: string]: unknown };
                headers?: { [key: string]: unknown };
              };
            };
          };
        };
        /** An error occurred creating accounts */
        400: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              executionState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                modelId?: string;
                accounts: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                }[];
                response?: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  error?: {
                    /** @description Error code as string. */
                    statusCode?: string;
                    /** @description Error message text. */
                    message?: string;
                  };
                }[];
                /** @enum {string} */
                currentState?: "ERROR_OCCURRED" | "COMPLETED";
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                postAccountsResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /** An error occurred creating accounts */
        500: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              executionState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                modelId?: string;
                accounts: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                }[];
                response?: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  error?: {
                    /** @description Error code as string. */
                    statusCode?: string;
                    /** @description Error message text. */
                    message?: string;
                  };
                }[];
                /** @enum {string} */
                currentState?: "ERROR_OCCURRED" | "COMPLETED";
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                postAccountsResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
              };
            };
          };
        };
        /** Timeout occurred creating accounts */
        504: {
          content: {
            "application/json": {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              executionState: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                modelId?: string;
                accounts: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                }[];
                response?: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  idType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  idValue: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  idSubValue?: string;
                  error?: {
                    /** @description Error code as string. */
                    statusCode?: string;
                    /** @description Error message text. */
                    message?: string;
                  };
                }[];
                /** @enum {string} */
                currentState?: "ERROR_OCCURRED" | "COMPLETED";
                /** @description This object represents a Mojaloop API error received at any time during the transfer process */
                lastError?: {
                  /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                  httpStatusCode?: number;
                  /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                  mojaloopError?: {
                    /**
                     * ErrorInformation
                     * @description Data model for the complex type ErrorInformation.
                     */
                    errorInformation?: {
                      /**
                       * ErrorCode
                       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                       * @example 5100
                       */
                      errorCode: string;
                      /**
                       * ErrorDescription
                       * @description Error description string.
                       */
                      errorDescription: string;
                      /**
                       * ExtensionList
                       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                       */
                      extensionList?: {
                        /** @description Number of Extension elements. */
                        extension: {
                          /**
                           * ExtensionKey
                           * @description Extension key.
                           */
                          key: string;
                          /**
                           * ExtensionValue
                           * @description Extension value.
                           */
                          value: string;
                        }[];
                      };
                    };
                  };
                };
                postAccountsResponse?: {
                  body: { [key: string]: unknown };
                  headers?: { [key: string]: unknown };
                };
              };
            };
          };
        };
      };
      /** Identities list request body */
      requestBody: {
        content: {
          "application/json": {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
          }[];
        };
      };
    };
  };
  "/parties/{Type}/{ID}": {
    /** The HTTP request GET /parties// (or GET /parties///) is used to lookup information regarding the requested Party, defined by ,  and optionally (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1). */
    get: operations["PartiesByTypeAndID"];
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** The identifier value. */
        ID: string;
      };
    };
  };
  "/parties/{Type}/{ID}/{SubId}": {
    /** The HTTP request GET /parties// (or GET /parties///) is used to lookup information regarding the requested Party, defined by ,  and optionally (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1). */
    get: operations["PartiesSubIdByTypeAndID"];
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** The identifier value. */
        ID: string;
        /** A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
        SubId: string;
      };
    };
  };
  "/quotes": {
    /** is used to request quotes from other DFSP */
    post: operations["QuotesPost"];
  };
  "/simpleTransfers": {
    /** is used to request a transfer */
    post: operations["SimpleTransfersPost"];
  };
}

export interface components {
  schemas: {
    /**
     * TransactionInitiatorType
     * @description Below are the allowed values for the enumeration.
     * - CONSUMER - Consumer is the initiator of the transaction.
     * - AGENT - Agent is the initiator of the transaction.
     * - BUSINESS - Business is the initiator of the transaction.
     * - DEVICE - Device is the initiator of the transaction.
     * @example CONSUMER
     * @enum {string}
     */
    TransactionInitiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
    /**
     * PartyIdType
     * @description Below are the allowed values for the enumeration.
     * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
     * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
     * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
     * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
     * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
     * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
     * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
     * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
     * @enum {string}
     */
    PartyIdType:
      | "MSISDN"
      | "EMAIL"
      | "PERSONAL_ID"
      | "BUSINESS"
      | "DEVICE"
      | "ACCOUNT_ID"
      | "IBAN"
      | "ALIAS";
    /**
     * PartyIdentifier
     * @description Identifier of the Party.
     * @example 16135551212
     */
    PartyIdentifier: string;
    /**
     * PartySubIdOrType
     * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
     */
    PartySubIdOrType: string;
    /**
     * Name
     * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
     *
     * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
     *
     * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
     */
    Name: string;
    /**
     * FirstName
     * @description First name of the Party (Name Type).
     * @example Henrik
     */
    FirstName: string;
    /**
     * MiddleName
     * @description Middle name of the Party (Name Type).
     * @example Johannes
     */
    MiddleName: string;
    /**
     * LastName
     * @description Last name of the Party (Name Type).
     * @example Karlsson
     */
    LastName: string;
    /**
     * DateofBirth (type Date)
     * @description Date of Birth of the Party.
     * @example 1966-06-16
     */
    DateOfBirth: string;
    /**
     * MerchantClassificationCode
     * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
     */
    MerchantClassificationCode: string;
    /**
     * FspId
     * @description FSP identifier.
     */
    FspId: string;
    /**
     * ExtensionKey
     * @description Extension key.
     */
    ExtensionKey: string;
    /**
     * ExtensionValue
     * @description Extension value.
     */
    ExtensionValue: string;
    /**
     * Extension
     * @description Data model for the complex type Extension.
     */
    Extension: {
      /**
       * ExtensionKey
       * @description Extension key.
       */
      key: string;
      /**
       * ExtensionValue
       * @description Extension value.
       */
      value: string;
    };
    extensionListEmptiable: {
      /**
       * ExtensionKey
       * @description Extension key.
       */
      key: string;
      /**
       * ExtensionValue
       * @description Extension value.
       */
      value: string;
    }[];
    transferParty: {
      /**
       * TransactionInitiatorType
       * @description Below are the allowed values for the enumeration.
       * - CONSUMER - Consumer is the initiator of the transaction.
       * - AGENT - Agent is the initiator of the transaction.
       * - BUSINESS - Business is the initiator of the transaction.
       * - DEVICE - Device is the initiator of the transaction.
       * @example CONSUMER
       * @enum {string}
       */
      type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
      /**
       * PartyIdType
       * @description Below are the allowed values for the enumeration.
       * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
       * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
       * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
       * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
       * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
       * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
       * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
       * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
       * @enum {string}
       */
      idType:
        | "MSISDN"
        | "EMAIL"
        | "PERSONAL_ID"
        | "BUSINESS"
        | "DEVICE"
        | "ACCOUNT_ID"
        | "IBAN"
        | "ALIAS";
      /**
       * PartyIdentifier
       * @description Identifier of the Party.
       * @example 16135551212
       */
      idValue: string;
      /**
       * PartySubIdOrType
       * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
       */
      idSubValue?: string;
      /**
       * Name
       * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
       *
       * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
       *
       * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
       */
      displayName?: string;
      /**
       * FirstName
       * @description First name of the Party (Name Type).
       * @example Henrik
       */
      firstName?: string;
      /**
       * MiddleName
       * @description Middle name of the Party (Name Type).
       * @example Johannes
       */
      middleName?: string;
      /**
       * LastName
       * @description Last name of the Party (Name Type).
       * @example Karlsson
       */
      lastName?: string;
      /**
       * DateofBirth (type Date)
       * @description Date of Birth of the Party.
       * @example 1966-06-16
       */
      dateOfBirth?: string;
      /**
       * MerchantClassificationCode
       * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
       */
      merchantClassificationCode?: string;
      /**
       * FspId
       * @description FSP identifier.
       */
      fspId?: string;
      extensionList?: {
        /**
         * ExtensionKey
         * @description Extension key.
         */
        key: string;
        /**
         * ExtensionValue
         * @description Extension value.
         */
        value: string;
      }[];
    };
    /**
     * AmountType
     * @description Below are the allowed values for the enumeration AmountType.
     * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
     * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
     * @example RECEIVE
     * @enum {string}
     */
    AmountType: "SEND" | "RECEIVE";
    /**
     * Currency
     * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
     * @enum {string}
     */
    Currency:
      | "AED"
      | "AFN"
      | "ALL"
      | "AMD"
      | "ANG"
      | "AOA"
      | "ARS"
      | "AUD"
      | "AWG"
      | "AZN"
      | "BAM"
      | "BBD"
      | "BDT"
      | "BGN"
      | "BHD"
      | "BIF"
      | "BMD"
      | "BND"
      | "BOB"
      | "BRL"
      | "BSD"
      | "BTN"
      | "BWP"
      | "BYN"
      | "BZD"
      | "CAD"
      | "CDF"
      | "CHF"
      | "CLP"
      | "CNY"
      | "COP"
      | "CRC"
      | "CUC"
      | "CUP"
      | "CVE"
      | "CZK"
      | "DJF"
      | "DKK"
      | "DOP"
      | "DZD"
      | "EGP"
      | "ERN"
      | "ETB"
      | "EUR"
      | "FJD"
      | "FKP"
      | "GBP"
      | "GEL"
      | "GGP"
      | "GHS"
      | "GIP"
      | "GMD"
      | "GNF"
      | "GTQ"
      | "GYD"
      | "HKD"
      | "HNL"
      | "HRK"
      | "HTG"
      | "HUF"
      | "IDR"
      | "ILS"
      | "IMP"
      | "INR"
      | "IQD"
      | "IRR"
      | "ISK"
      | "JEP"
      | "JMD"
      | "JOD"
      | "JPY"
      | "KES"
      | "KGS"
      | "KHR"
      | "KMF"
      | "KPW"
      | "KRW"
      | "KWD"
      | "KYD"
      | "KZT"
      | "LAK"
      | "LBP"
      | "LKR"
      | "LRD"
      | "LSL"
      | "LYD"
      | "MAD"
      | "MDL"
      | "MGA"
      | "MKD"
      | "MMK"
      | "MNT"
      | "MOP"
      | "MRO"
      | "MUR"
      | "MVR"
      | "MWK"
      | "MXN"
      | "MYR"
      | "MZN"
      | "NAD"
      | "NGN"
      | "NIO"
      | "NOK"
      | "NPR"
      | "NZD"
      | "OMR"
      | "PAB"
      | "PEN"
      | "PGK"
      | "PHP"
      | "PKR"
      | "PLN"
      | "PYG"
      | "QAR"
      | "RON"
      | "RSD"
      | "RUB"
      | "RWF"
      | "SAR"
      | "SBD"
      | "SCR"
      | "SDG"
      | "SEK"
      | "SGD"
      | "SHP"
      | "SLL"
      | "SOS"
      | "SPL"
      | "SRD"
      | "STD"
      | "SVC"
      | "SYP"
      | "SZL"
      | "THB"
      | "TJS"
      | "TMT"
      | "TND"
      | "TOP"
      | "TRY"
      | "TTD"
      | "TVD"
      | "TWD"
      | "TZS"
      | "UAH"
      | "UGX"
      | "USD"
      | "UYU"
      | "UZS"
      | "VEF"
      | "VND"
      | "VUV"
      | "WST"
      | "XAF"
      | "XCD"
      | "XDR"
      | "XOF"
      | "XPF"
      | "XTS"
      | "XXX"
      | "YER"
      | "ZAR"
      | "ZMW"
      | "ZWD";
    /**
     * Amount
     * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
     * @example 123.45
     */
    Amount: string;
    /**
     * transferTransactionType
     * @description Type of transaction.
     * @enum {string}
     */
    transferTransactionType: "TRANSFER";
    /**
     * Note
     * @description Memo assigned to transaction.
     * @example Note sent to Payee.
     */
    Note: string;
    transferRequest: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * transferTransactionType
       * @description Type of transaction.
       * @enum {string}
       */
      transactionType: "TRANSFER";
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      quoteRequestExtensions?: {
        /**
         * ExtensionKey
         * @description Extension key.
         */
        key: string;
        /**
         * ExtensionValue
         * @description Extension value.
         */
        value: string;
      }[];
      transferRequestExtensions?: {
        /**
         * ExtensionKey
         * @description Extension key.
         */
        key: string;
        /**
         * ExtensionValue
         * @description Extension value.
         */
        value: string;
      }[];
      /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
      skipPartyLookup?: boolean;
    };
    /**
     * CorrelationId
     * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
     * @example b51ec534-ee48-4575-b6a9-ead2955b8069
     */
    CorrelationId: string;
    /** @enum {string} */
    transferStatus:
      | "ERROR_OCCURRED"
      | "WAITING_FOR_PARTY_ACCEPTANCE"
      | "WAITING_FOR_QUOTE_ACCEPTANCE"
      | "COMPLETED";
    /**
     * Money
     * @description Data model for the complex type Money.
     */
    Money: {
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
    };
    /**
     * DateTime
     * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
     * @example 2016-05-24T08:38:08.699-04:00
     */
    DateTime: string;
    /**
     * Latitude
     * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
     * @example +45.4215
     */
    Latitude: string;
    /**
     * Longitude
     * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
     * @example +75.6972
     */
    Longitude: string;
    /**
     * GeoCode
     * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
     */
    GeoCode: {
      /**
       * Latitude
       * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
       * @example +45.4215
       */
      latitude: string;
      /**
       * Longitude
       * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
       * @example +75.6972
       */
      longitude: string;
    };
    /**
     * IlpPacket
     * @description Information for recipient (transport layer information).
     * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
     */
    IlpPacket: string;
    /**
     * IlpCondition
     * @description Condition that must be attached to the transfer by the Payer.
     */
    IlpCondition: string;
    /**
     * ExtensionList
     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
     */
    ExtensionList: {
      /** @description Number of Extension elements. */
      extension: {
        /**
         * ExtensionKey
         * @description Extension key.
         */
        key: string;
        /**
         * ExtensionValue
         * @description Extension value.
         */
        value: string;
      }[];
    };
    /**
     * QuotesIDPutResponse
     * @description The object sent in the PUT /quotes/{ID} callback.
     */
    QuotesIDPutResponse: {
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      transferAmount: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      payeeReceiveAmount?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      payeeFspFee?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      payeeFspCommission?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      expiration: string;
      /**
       * GeoCode
       * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
       */
      geoCode?: {
        /**
         * Latitude
         * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +45.4215
         */
        latitude: string;
        /**
         * Longitude
         * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +75.6972
         */
        longitude: string;
      };
      /**
       * IlpPacket
       * @description Information for recipient (transport layer information).
       * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
       */
      ilpPacket: string;
      /**
       * IlpCondition
       * @description Condition that must be attached to the transfer by the Payer.
       */
      condition: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * IlpFulfilment
     * @description Fulfilment that must be attached to the transfer by the Payee.
     * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
     */
    IlpFulfilment: string;
    /**
     * TransferState
     * @description Below are the allowed values for the enumeration.
     * - RECEIVED - Next ledger has received the transfer.
     * - RESERVED - Next ledger has reserved the transfer.
     * - COMMITTED - Next ledger has successfully performed the transfer.
     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
     * @example RESERVED
     * @enum {string}
     */
    TransferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
    /**
     * TransfersIDPutResponse
     * @description The object sent in the PUT /transfers/{ID} callback.
     */
    TransfersIDPutResponse: {
      /**
       * IlpFulfilment
       * @description Fulfilment that must be attached to the transfer by the Payee.
       * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
       */
      fulfilment?: string;
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      completedTimestamp?: string;
      /**
       * TransferState
       * @description Below are the allowed values for the enumeration.
       * - RECEIVED - Next ledger has received the transfer.
       * - RESERVED - Next ledger has reserved the transfer.
       * - COMMITTED - Next ledger has successfully performed the transfer.
       * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
       * @example RESERVED
       * @enum {string}
       */
      transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * ErrorCode
     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
     * @example 5100
     */
    ErrorCode: string;
    /**
     * ErrorDescription
     * @description Error description string.
     */
    ErrorDescription: string;
    /**
     * ErrorInformation
     * @description Data model for the complex type ErrorInformation.
     */
    ErrorInformation: {
      /**
       * ErrorCode
       * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
       * @example 5100
       */
      errorCode: string;
      /**
       * ErrorDescription
       * @description Error description string.
       */
      errorDescription: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    mojaloopError: {
      /**
       * ErrorInformation
       * @description Data model for the complex type ErrorInformation.
       */
      errorInformation?: {
        /**
         * ErrorCode
         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         * @example 5100
         */
        errorCode: string;
        /**
         * ErrorDescription
         * @description Error description string.
         */
        errorDescription: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      };
    };
    /** @description This object represents a Mojaloop API error received at any time during the transfer process */
    transferError: {
      /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
      httpStatusCode?: number;
      /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
      mojaloopError?: {
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        errorInformation?: {
          /**
           * ErrorCode
           * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
           * @example 5100
           */
          errorCode: string;
          /**
           * ErrorDescription
           * @description Error description string.
           */
          errorDescription: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
      };
    };
    transferResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transferId?: string;
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * transferTransactionType
       * @description Type of transaction.
       * @enum {string}
       */
      transactionType: "TRANSFER";
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      /** @enum {string} */
      currentState?:
        | "ERROR_OCCURRED"
        | "WAITING_FOR_PARTY_ACCEPTANCE"
        | "WAITING_FOR_QUOTE_ACCEPTANCE"
        | "COMPLETED";
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      quoteId?: string;
      getPartiesResponse?: {
        body: { [key: string]: unknown };
        headers?: { [key: string]: unknown };
      };
      quoteResponse?: {
        /**
         * QuotesIDPutResponse
         * @description The object sent in the PUT /quotes/{ID} callback.
         */
        body: {
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          transferAmount: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeReceiveAmount?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeFspFee?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeFspCommission?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * DateTime
           * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
           * @example 2016-05-24T08:38:08.699-04:00
           */
          expiration: string;
          /**
           * GeoCode
           * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
           */
          geoCode?: {
            /**
             * Latitude
             * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
             * @example +45.4215
             */
            latitude: string;
            /**
             * Longitude
             * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
             * @example +75.6972
             */
            longitude: string;
          };
          /**
           * IlpPacket
           * @description Information for recipient (transport layer information).
           * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
           */
          ilpPacket: string;
          /**
           * IlpCondition
           * @description Condition that must be attached to the transfer by the Payer.
           */
          condition: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        headers?: { [key: string]: unknown };
      };
      /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
      quoteResponseSource?: string;
      fulfil?: {
        /**
         * TransfersIDPutResponse
         * @description The object sent in the PUT /transfers/{ID} callback.
         */
        body: {
          /**
           * IlpFulfilment
           * @description Fulfilment that must be attached to the transfer by the Payee.
           * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
           */
          fulfilment?: string;
          /**
           * DateTime
           * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
           * @example 2016-05-24T08:38:08.699-04:00
           */
          completedTimestamp?: string;
          /**
           * TransferState
           * @description Below are the allowed values for the enumeration.
           * - RECEIVED - Next ledger has received the transfer.
           * - RESERVED - Next ledger has reserved the transfer.
           * - COMMITTED - Next ledger has successfully performed the transfer.
           * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
           * @example RESERVED
           * @enum {string}
           */
          transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        headers?: { [key: string]: unknown };
      };
      /** @description This object represents a Mojaloop API error received at any time during the transfer process */
      lastError?: {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
      /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
      skipPartyLookup?: boolean;
    };
    errorResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    };
    errorTransferResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & {
      transferState: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transferId?: string;
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        homeTransactionId: string;
        from: {
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          /**
           * Name
           * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
           *
           * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
           *
           * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
           */
          displayName?: string;
          /**
           * FirstName
           * @description First name of the Party (Name Type).
           * @example Henrik
           */
          firstName?: string;
          /**
           * MiddleName
           * @description Middle name of the Party (Name Type).
           * @example Johannes
           */
          middleName?: string;
          /**
           * LastName
           * @description Last name of the Party (Name Type).
           * @example Karlsson
           */
          lastName?: string;
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          extensionList?: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        to: {
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          /**
           * Name
           * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
           *
           * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
           *
           * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
           */
          displayName?: string;
          /**
           * FirstName
           * @description First name of the Party (Name Type).
           * @example Henrik
           */
          firstName?: string;
          /**
           * MiddleName
           * @description Middle name of the Party (Name Type).
           * @example Johannes
           */
          middleName?: string;
          /**
           * LastName
           * @description Last name of the Party (Name Type).
           * @example Karlsson
           */
          lastName?: string;
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          extensionList?: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        amountType: "SEND" | "RECEIVE";
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
        /**
         * transferTransactionType
         * @description Type of transaction.
         * @enum {string}
         */
        transactionType: "TRANSFER";
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        note?: string;
        /** @enum {string} */
        currentState?:
          | "ERROR_OCCURRED"
          | "WAITING_FOR_PARTY_ACCEPTANCE"
          | "WAITING_FOR_QUOTE_ACCEPTANCE"
          | "COMPLETED";
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        quoteId?: string;
        getPartiesResponse?: {
          body: { [key: string]: unknown };
          headers?: { [key: string]: unknown };
        };
        quoteResponse?: {
          /**
           * QuotesIDPutResponse
           * @description The object sent in the PUT /quotes/{ID} callback.
           */
          body: {
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            transferAmount: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeReceiveAmount?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeFspFee?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeFspCommission?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration: string;
            /**
             * GeoCode
             * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
             */
            geoCode?: {
              /**
               * Latitude
               * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +45.4215
               */
              latitude: string;
              /**
               * Longitude
               * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +75.6972
               */
              longitude: string;
            };
            /**
             * IlpPacket
             * @description Information for recipient (transport layer information).
             * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
             */
            ilpPacket: string;
            /**
             * IlpCondition
             * @description Condition that must be attached to the transfer by the Payer.
             */
            condition: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          headers?: { [key: string]: unknown };
        };
        /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
        quoteResponseSource?: string;
        fulfil?: {
          /**
           * TransfersIDPutResponse
           * @description The object sent in the PUT /transfers/{ID} callback.
           */
          body: {
            /**
             * IlpFulfilment
             * @description Fulfilment that must be attached to the transfer by the Payee.
             * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
             */
            fulfilment?: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            completedTimestamp?: string;
            /**
             * TransferState
             * @description Below are the allowed values for the enumeration.
             * - RECEIVED - Next ledger has received the transfer.
             * - RESERVED - Next ledger has reserved the transfer.
             * - COMMITTED - Next ledger has successfully performed the transfer.
             * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
             * @example RESERVED
             * @enum {string}
             */
            transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          headers?: { [key: string]: unknown };
        };
        /** @description This object represents a Mojaloop API error received at any time during the transfer process */
        lastError?: {
          /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
          httpStatusCode?: number;
          /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
          mojaloopError?: {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
        /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
        skipPartyLookup?: boolean;
      };
    };
    transferStatusResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transferId: string;
      /** @enum {string} */
      currentState:
        | "ERROR_OCCURRED"
        | "WAITING_FOR_PARTY_ACCEPTANCE"
        | "WAITING_FOR_QUOTE_ACCEPTANCE"
        | "COMPLETED";
      fulfil: {
        /**
         * TransfersIDPutResponse
         * @description The object sent in the PUT /transfers/{ID} callback.
         */
        body: {
          /**
           * IlpFulfilment
           * @description Fulfilment that must be attached to the transfer by the Payee.
           * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
           */
          fulfilment?: string;
          /**
           * DateTime
           * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
           * @example 2016-05-24T08:38:08.699-04:00
           */
          completedTimestamp?: string;
          /**
           * TransferState
           * @description Below are the allowed values for the enumeration.
           * - RECEIVED - Next ledger has received the transfer.
           * - RESERVED - Next ledger has reserved the transfer.
           * - COMMITTED - Next ledger has successfully performed the transfer.
           * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
           * @example RESERVED
           * @enum {string}
           */
          transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        headers?: { [key: string]: unknown };
      };
    };
    transferContinuationAcceptParty: {
      /** @enum {boolean} */
      acceptParty: true;
    };
    transferContinuationAcceptQuote: {
      /** @enum {boolean} */
      acceptQuote: true | false;
    };
    autoAcceptPartyOption: {
      /** @enum {boolean} */
      enabled: false | true;
    };
    bulkPerTransferFeeLimit: {
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
    };
    autoAcceptQuote: {
      /** @enum {boolean} */
      enabled: true | false;
      perTransferFeeLimits?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      }[];
    };
    bulkTransactionOptions: {
      /** @description Set to true if only party validation is required.  This means the quotes and transfers will not run. This is useful for only party resolution. */
      onlyValidateParty?: boolean;
      autoAcceptParty: {
        /** @enum {boolean} */
        enabled: false | true;
      };
      /** @description Set to true if the quote response is accepted without confirmation from the payer. The fees applied by the payee will be acceptable to the payer abiding by the limits set by optional 'perTransferFeeLimits' array. */
      autoAcceptQuote: {
        /** @enum {boolean} */
        enabled: true | false;
        perTransferFeeLimits?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        }[];
      };
      /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful if a previous party resolution has been performed. */
      skipPartyLookup?: boolean;
      /** @description Set to true if the bulkTransfer requests need be handled synchronous. Otherwise the requests will be handled asynchronously, meaning there will  be callbacks whenever the processing is done */
      synchronous?: boolean;
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      bulkExpiration: string;
    };
    /**
     * PartyIdInfo
     * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
     */
    PartyIdInfo: {
      /**
       * PartyIdType
       * @description Below are the allowed values for the enumeration.
       * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
       * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
       * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
       * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
       * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
       * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
       * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
       * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
       * @enum {string}
       */
      partyIdType:
        | "MSISDN"
        | "EMAIL"
        | "PERSONAL_ID"
        | "BUSINESS"
        | "DEVICE"
        | "ACCOUNT_ID"
        | "IBAN"
        | "ALIAS";
      /**
       * PartyIdentifier
       * @description Identifier of the Party.
       * @example 16135551212
       */
      partyIdentifier: string;
      /**
       * PartySubIdOrType
       * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
       */
      partySubIdOrType?: string;
      /**
       * FspId
       * @description FSP identifier.
       */
      fspId?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * PartyName
     * @description Name of the Party. Could be a real name or a nickname.
     */
    PartyName: string;
    /**
     * PartyComplexName
     * @description Data model for the complex type PartyComplexName.
     */
    PartyComplexName: {
      /**
       * FirstName
       * @description First name of the Party (Name Type).
       * @example Henrik
       */
      firstName?: string;
      /**
       * MiddleName
       * @description Middle name of the Party (Name Type).
       * @example Johannes
       */
      middleName?: string;
      /**
       * LastName
       * @description Last name of the Party (Name Type).
       * @example Karlsson
       */
      lastName?: string;
    };
    /**
     * PartyPersonalInfo
     * @description Data model for the complex type PartyPersonalInfo.
     */
    PartyPersonalInfo: {
      /**
       * PartyComplexName
       * @description Data model for the complex type PartyComplexName.
       */
      complexName?: {
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
      };
      /**
       * DateofBirth (type Date)
       * @description Date of Birth of the Party.
       * @example 1966-06-16
       */
      dateOfBirth?: string;
    };
    /**
     * Party
     * @description Data model for the complex type Party.
     */
    Party: {
      /**
       * PartyIdInfo
       * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
       */
      partyIdInfo: {
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        partyIdType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        partyIdentifier: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        partySubIdOrType?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      };
      /**
       * MerchantClassificationCode
       * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
       */
      merchantClassificationCode?: string;
      /**
       * PartyName
       * @description Name of the Party. Could be a real name or a nickname.
       */
      name?: string;
      /**
       * PartyPersonalInfo
       * @description Data model for the complex type PartyPersonalInfo.
       */
      personalInfo?: {
        /**
         * PartyComplexName
         * @description Data model for the complex type PartyComplexName.
         */
        complexName?: {
          /**
           * FirstName
           * @description First name of the Party (Name Type).
           * @example Henrik
           */
          firstName?: string;
          /**
           * MiddleName
           * @description Middle name of the Party (Name Type).
           * @example Johannes
           */
          middleName?: string;
          /**
           * LastName
           * @description Last name of the Party (Name Type).
           * @example Karlsson
           */
          lastName?: string;
        };
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
      };
    };
    /**
     * BulkTransactionIndividualTransfer
     * @description Data model for the complex type 'bulkTransactionIndividualTransfer'.
     */
    bulkTransactionIndividualTransfer: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      /**
       * Party
       * @description Data model for the complex type Party.
       */
      to: {
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
         */
        partyIdInfo: {
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          partyIdType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          partyIdentifier: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * PartyComplexName
           * @description Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
          };
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
        };
      };
      /** @description Payer Loan reference */
      reference?: string;
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      quoteExtensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      transferExtensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @description This object represents a Mojaloop API error received at any time during the transfer process */
      lastError?: {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
    bulkTransactionRequest: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      bulkHomeTransactionID: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkTransactionId: string;
      options: {
        /** @description Set to true if only party validation is required.  This means the quotes and transfers will not run. This is useful for only party resolution. */
        onlyValidateParty?: boolean;
        autoAcceptParty: {
          /** @enum {boolean} */
          enabled: false | true;
        };
        /** @description Set to true if the quote response is accepted without confirmation from the payer. The fees applied by the payee will be acceptable to the payer abiding by the limits set by optional 'perTransferFeeLimits' array. */
        autoAcceptQuote: {
          /** @enum {boolean} */
          enabled: true | false;
          perTransferFeeLimits?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          }[];
        };
        /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful if a previous party resolution has been performed. */
        skipPartyLookup?: boolean;
        /** @description Set to true if the bulkTransfer requests need be handled synchronous. Otherwise the requests will be handled asynchronously, meaning there will  be callbacks whenever the processing is done */
        synchronous?: boolean;
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        bulkExpiration: string;
      };
      /**
       * Party
       * @description Data model for the complex type Party.
       */
      from: {
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
         */
        partyIdInfo: {
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          partyIdType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          partyIdentifier: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * PartyComplexName
           * @description Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
          };
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
        };
      };
      /** @description List of individual transfers in a bulk transfer. */
      individualTransfers: {
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        homeTransactionId: string;
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        to: {
          /**
           * PartyIdInfo
           * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
           */
          partyIdInfo: {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            partyIdType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            partyIdentifier: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            partySubIdOrType?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * PartyName
           * @description Name of the Party. Could be a real name or a nickname.
           */
          name?: string;
          /**
           * PartyPersonalInfo
           * @description Data model for the complex type PartyPersonalInfo.
           */
          personalInfo?: {
            /**
             * PartyComplexName
             * @description Data model for the complex type PartyComplexName.
             */
            complexName?: {
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
            };
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
          };
        };
        /** @description Payer Loan reference */
        reference?: string;
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        amountType: "SEND" | "RECEIVE";
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        note?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        quoteExtensions?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        transferExtensions?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /** @description This object represents a Mojaloop API error received at any time during the transfer process */
        lastError?: {
          /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
          httpStatusCode?: number;
          /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
          mojaloopError?: {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
      }[];
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /** @enum {string} */
    bulkTransferStatus: "ERROR_OCCURRED" | "COMPLETED";
    individualTransferResult: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transferId: string;
      /**
       * IlpFulfilment
       * @description Fulfilment that must be attached to the transfer by the Payee.
       * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
       */
      fulfilment?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @description This object represents a Mojaloop API error received at any time during the transfer process */
      lastError?: {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
    bulkTransferResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkTransferId: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkQuoteId?: string;
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId?: string;
      /**
       * TransferState
       * @description Below are the allowed values for the enumeration.
       * - RECEIVED - Next ledger has received the transfer.
       * - RESERVED - Next ledger has reserved the transfer.
       * - COMMITTED - Next ledger has successfully performed the transfer.
       * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
       * @example RESERVED
       * @enum {string}
       */
      bulkTransferState?: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      completedTimestamp?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @enum {string} */
      currentState: "ERROR_OCCURRED" | "COMPLETED";
      /** @description List of individual transfer result in a bulk transfer response. */
      individualTransferResults: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transferId: string;
        /**
         * IlpFulfilment
         * @description Fulfilment that must be attached to the transfer by the Payee.
         * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
         */
        fulfilment?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /** @description This object represents a Mojaloop API error received at any time during the transfer process */
        lastError?: {
          /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
          httpStatusCode?: number;
          /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
          mojaloopError?: {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
      }[];
    };
    bulkTransferErrorResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & {
      bulkTransferState: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        bulkTransferId: string;
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        bulkQuoteId?: string;
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        homeTransactionId?: string;
        /**
         * TransferState
         * @description Below are the allowed values for the enumeration.
         * - RECEIVED - Next ledger has received the transfer.
         * - RESERVED - Next ledger has reserved the transfer.
         * - COMMITTED - Next ledger has successfully performed the transfer.
         * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
         * @example RESERVED
         * @enum {string}
         */
        bulkTransferState?: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        completedTimestamp?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /** @enum {string} */
        currentState: "ERROR_OCCURRED" | "COMPLETED";
        /** @description List of individual transfer result in a bulk transfer response. */
        individualTransferResults: {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          transferId: string;
          /**
           * IlpFulfilment
           * @description Fulfilment that must be attached to the transfer by the Payee.
           * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
           */
          fulfilment?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /** @description This object represents a Mojaloop API error received at any time during the transfer process */
          lastError?: {
            /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
            httpStatusCode?: number;
            /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
            mojaloopError?: {
              /**
               * ErrorInformation
               * @description Data model for the complex type ErrorInformation.
               */
              errorInformation?: {
                /**
                 * ErrorCode
                 * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                 * @example 5100
                 */
                errorCode: string;
                /**
                 * ErrorDescription
                 * @description Error description string.
                 */
                errorDescription: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
            };
          };
        }[];
      };
    };
    /** @description Data model for the 'individualTransfer' while accepting party or quote. */
    bulkTransactionIndividualTransferAccept: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transactionId: string;
    };
    /** @description The object sent back as confirmation of payee parties when autoAcceptParty is false. */
    bulkTransactionContinuationAcceptParty: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      bulkHomeTransactionID: string;
      /** @description List of individual transfers in a bulk transfer with accept party information. */
      individualTransfers: ({
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        homeTransactionId: string;
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transactionId: string;
      } & {
        /** @enum {boolean} */
        acceptParty: true;
      })[];
    };
    /** @description The object sent back as confirmation of quotes when autoAcceptQuotes is false. */
    bulkTransactionContinuationAcceptQuote: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      bulkHomeTransactionID: string;
      /** @description List of individual transfers in a bulk transfer. */
      individualTransfers: ({
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        homeTransactionId: string;
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transactionId: string;
      } & {
        /** @enum {boolean} */
        acceptQuote: true | false;
      })[];
    };
    /** @description This object represents a Mojaloop API error received at any time during the party discovery process */
    partyError: {
      /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
      httpStatusCode?: number;
      /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
      mojaloopError?: {
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        errorInformation?: {
          /**
           * ErrorCode
           * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
           * @example 5100
           */
          errorCode: string;
          /**
           * ErrorDescription
           * @description Error description string.
           */
          errorDescription: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
      };
    };
    bulkTransactionAcceptPartyErrorResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & {
      bulkTransferState: {
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        bulkHomeTransactionID: string;
        /** @description List of individual transfers in a bulk transfer with accept party information. */
        individualTransfers: ({
          /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
          homeTransactionId: string;
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          transactionId: string;
        } & {
          /** @enum {boolean} */
          acceptParty: true;
        })[];
      } & {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
    /** @description This object represents a Mojaloop API error received at any time during the quote process */
    quoteError: {
      /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
      httpStatusCode?: number;
      /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
      mojaloopError?: {
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        errorInformation?: {
          /**
           * ErrorCode
           * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
           * @example 5100
           */
          errorCode: string;
          /**
           * ErrorDescription
           * @description Error description string.
           */
          errorDescription: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
      };
    };
    bulkTransactionAcceptQuoteErrorResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & ({
      bulkTransferState?: {
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        bulkHomeTransactionID: string;
        /** @description List of individual transfers in a bulk transfer. */
        individualTransfers: ({
          /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
          homeTransactionId: string;
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          transactionId: string;
        } & {
          /** @enum {boolean} */
          acceptQuote: true | false;
        })[];
      } & {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    } & {
      bulkTansferState: unknown;
    });
    /**
     * IndividualTransfer
     * @description Data model for the complex type 'individualTransfer'.
     */
    individualTransfer: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transferId: string;
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * transferTransactionType
       * @description Type of transaction.
       * @enum {string}
       */
      transactionType?: "TRANSFER";
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    bulkTransferRequest: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkTransferId?: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @description List of individual transfers in a bulk transfer. */
      individualTransfers: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transferId: string;
        to: {
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          /**
           * Name
           * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
           *
           * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
           *
           * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
           */
          displayName?: string;
          /**
           * FirstName
           * @description First name of the Party (Name Type).
           * @example Henrik
           */
          firstName?: string;
          /**
           * MiddleName
           * @description Middle name of the Party (Name Type).
           * @example Johannes
           */
          middleName?: string;
          /**
           * LastName
           * @description Last name of the Party (Name Type).
           * @example Karlsson
           */
          lastName?: string;
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          extensionList?: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        amountType: "SEND" | "RECEIVE";
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
        /**
         * transferTransactionType
         * @description Type of transaction.
         * @enum {string}
         */
        transactionType?: "TRANSFER";
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        note?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensions?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      }[];
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /** @description A Mojaloop API transfer fulfilment for individual transfers in a bulk transfer */
    individualTransferFulfilment: {
      /**
       * IlpFulfilment
       * @description Fulfilment that must be attached to the transfer by the Payee.
       * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
       */
      fulfilment?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    bulkTransferStatusResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkTransferId: string;
      /** @enum {string} */
      currentState: "ERROR_OCCURRED" | "COMPLETED";
      fulfils: {
        /**
         * IlpFulfilment
         * @description Fulfilment that must be attached to the transfer by the Payee.
         * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
         */
        fulfilment?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      }[];
    };
    /**
     * IndividualQuote
     * @description Data model for the complex type 'individualQuote'.
     */
    individualQuote: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      quoteId: string;
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * transferTransactionType
       * @description Type of transaction.
       * @enum {string}
       */
      transactionType: "TRANSFER";
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    bulkQuoteRequest: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkQuoteId?: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @description List of individual quotes in a bulk quote. */
      individualQuotes: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        quoteId: string;
        to: {
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          /**
           * Name
           * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
           *
           * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
           *
           * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
           */
          displayName?: string;
          /**
           * FirstName
           * @description First name of the Party (Name Type).
           * @example Henrik
           */
          firstName?: string;
          /**
           * MiddleName
           * @description Middle name of the Party (Name Type).
           * @example Johannes
           */
          middleName?: string;
          /**
           * LastName
           * @description Last name of the Party (Name Type).
           * @example Karlsson
           */
          lastName?: string;
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          extensionList?: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        amountType: "SEND" | "RECEIVE";
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
        /**
         * transferTransactionType
         * @description Type of transaction.
         * @enum {string}
         */
        transactionType: "TRANSFER";
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        note?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensions?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      }[];
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensions?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    individualQuoteResult: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      quoteId: string;
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      transferAmount: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      payeeReceiveAmount?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      payeeFspFee?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      payeeFspCommission?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * GeoCode
       * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
       */
      geoCode?: {
        /**
         * Latitude
         * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +45.4215
         */
        latitude: string;
        /**
         * Longitude
         * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +75.6972
         */
        longitude: string;
      };
      /**
       * IlpPacket
       * @description Information for recipient (transport layer information).
       * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
       */
      ilpPacket: string;
      /**
       * IlpCondition
       * @description Condition that must be attached to the transfer by the Payer.
       */
      condition: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @description This object represents a Mojaloop API error received at any time during the quote process */
      lastError?: {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
    bulkQuoteResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkQuoteId: string;
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId?: string;
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      expiration?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /** @enum {string} */
      currentState: "ERROR_OCCURRED" | "COMPLETED";
      /** @description List of individualQuoteResults in a bulk transfer response. */
      individualQuoteResults: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        quoteId: string;
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        transferAmount: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        payeeReceiveAmount?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        payeeFspFee?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        payeeFspCommission?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * GeoCode
         * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
         */
        geoCode?: {
          /**
           * Latitude
           * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           * @example +45.4215
           */
          latitude: string;
          /**
           * Longitude
           * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           * @example +75.6972
           */
          longitude: string;
        };
        /**
         * IlpPacket
         * @description Information for recipient (transport layer information).
         * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
         */
        ilpPacket: string;
        /**
         * IlpCondition
         * @description Condition that must be attached to the transfer by the Payer.
         */
        condition: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /** @description This object represents a Mojaloop API error received at any time during the quote process */
        lastError?: {
          /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
          httpStatusCode?: number;
          /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
          mojaloopError?: {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
      }[];
    };
    bulkQuoteErrorResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & ({
      bulkQuoteState?: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        bulkQuoteId: string;
        /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
        homeTransactionId?: string;
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        expiration?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /** @enum {string} */
        currentState: "ERROR_OCCURRED" | "COMPLETED";
        /** @description List of individualQuoteResults in a bulk transfer response. */
        individualQuoteResults: {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          quoteId: string;
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          transferAmount: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeReceiveAmount?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeFspFee?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeFspCommission?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * GeoCode
           * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
           */
          geoCode?: {
            /**
             * Latitude
             * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
             * @example +45.4215
             */
            latitude: string;
            /**
             * Longitude
             * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
             * @example +75.6972
             */
            longitude: string;
          };
          /**
           * IlpPacket
           * @description Information for recipient (transport layer information).
           * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
           */
          ilpPacket: string;
          /**
           * IlpCondition
           * @description Condition that must be attached to the transfer by the Payer.
           */
          condition: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /** @description This object represents a Mojaloop API error received at any time during the quote process */
          lastError?: {
            /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
            httpStatusCode?: number;
            /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
            mojaloopError?: {
              /**
               * ErrorInformation
               * @description Data model for the complex type ErrorInformation.
               */
              errorInformation?: {
                /**
                 * ErrorCode
                 * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                 * @example 5100
                 */
                errorCode: string;
                /**
                 * ErrorDescription
                 * @description Error description string.
                 */
                errorDescription: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
            };
          };
        }[];
      };
    } & {
      bulkTansferState: unknown;
    });
    /** @enum {string} */
    bulkQuoteStatus: "ERROR_OCCURRED" | "COMPLETED";
    bulkQuoteStatusResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      bulkQuoteId: string;
      /** @enum {string} */
      currentState: "ERROR_OCCURRED" | "COMPLETED";
      individualQuotes: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        quoteId: string;
        to: {
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          /**
           * Name
           * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
           *
           * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
           *
           * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
           */
          displayName?: string;
          /**
           * FirstName
           * @description First name of the Party (Name Type).
           * @example Henrik
           */
          firstName?: string;
          /**
           * MiddleName
           * @description Middle name of the Party (Name Type).
           * @example Johannes
           */
          middleName?: string;
          /**
           * LastName
           * @description Last name of the Party (Name Type).
           * @example Karlsson
           */
          lastName?: string;
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          extensionList?: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        amountType: "SEND" | "RECEIVE";
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
        /**
         * transferTransactionType
         * @description Type of transaction.
         * @enum {string}
         */
        transactionType: "TRANSFER";
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        note?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensions?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      }[];
    };
    /**
     * TransactionScenario
     * @description Below are the allowed values for the enumeration.
     * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
     * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
     * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
     * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
     * - REFUND - Used for performing a refund of transaction.
     * @example DEPOSIT
     * @enum {string}
     */
    TransactionScenario:
      | "DEPOSIT"
      | "WITHDRAWAL"
      | "TRANSFER"
      | "PAYMENT"
      | "REFUND";
    /**
     * TransactionSubScenario
     * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
     * @example LOCALLY_DEFINED_SUBSCENARIO
     */
    TransactionSubScenario: string;
    /**
     * TransactionInitiator
     * @description Below are the allowed values for the enumeration.
     * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
     * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
     * @example PAYEE
     * @enum {string}
     */
    TransactionInitiator: "PAYER" | "PAYEE";
    /**
     * RefundReason
     * @description Reason for the refund.
     * @example Free text indicating reason for the refund.
     */
    RefundReason: string;
    /**
     * Refund
     * @description Data model for the complex type Refund.
     */
    Refund: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      originalTransactionId: string;
      /**
       * RefundReason
       * @description Reason for the refund.
       * @example Free text indicating reason for the refund.
       */
      refundReason?: string;
    };
    /**
     * BalanceOfPayments
     * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
     * @example 123
     */
    BalanceOfPayments: string;
    /**
     * TransactionType
     * @description Data model for the complex type TransactionType.
     */
    TransactionType: {
      /**
       * TransactionScenario
       * @description Below are the allowed values for the enumeration.
       * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
       * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
       * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
       * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
       * - REFUND - Used for performing a refund of transaction.
       * @example DEPOSIT
       * @enum {string}
       */
      scenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
      /**
       * TransactionSubScenario
       * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
       * @example LOCALLY_DEFINED_SUBSCENARIO
       */
      subScenario?: string;
      /**
       * TransactionInitiator
       * @description Below are the allowed values for the enumeration.
       * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
       * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
       * @example PAYEE
       * @enum {string}
       */
      initiator: "PAYER" | "PAYEE";
      /**
       * TransactionInitiatorType
       * @description Below are the allowed values for the enumeration.
       * - CONSUMER - Consumer is the initiator of the transaction.
       * - AGENT - Agent is the initiator of the transaction.
       * - BUSINESS - Business is the initiator of the transaction.
       * - DEVICE - Device is the initiator of the transaction.
       * @example CONSUMER
       * @enum {string}
       */
      initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
      /**
       * Refund
       * @description Data model for the complex type Refund.
       */
      refundInfo?: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        originalTransactionId: string;
        /**
         * RefundReason
         * @description Reason for the refund.
         * @example Free text indicating reason for the refund.
         */
        refundReason?: string;
      };
      /**
       * BalanceOfPayments
       * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
       * @example 123
       */
      balanceOfPayments?: string;
    };
    requestToPayRequest: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      homeTransactionId: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * TransactionType
       * @description Data model for the complex type TransactionType.
       */
      scenario: {
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        scenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        subScenario?: string;
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        initiator: "PAYER" | "PAYEE";
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          originalTransactionId: string;
          /**
           * RefundReason
           * @description Reason for the refund.
           * @example Free text indicating reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        balanceOfPayments?: string;
      };
      /**
       * TransactionInitiator
       * @description Below are the allowed values for the enumeration.
       * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
       * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
       * @example PAYEE
       * @enum {string}
       */
      initiator: "PAYER" | "PAYEE";
      /**
       * TransactionInitiatorType
       * @description Below are the allowed values for the enumeration.
       * - CONSUMER - Consumer is the initiator of the transaction.
       * - AGENT - Agent is the initiator of the transaction.
       * - BUSINESS - Business is the initiator of the transaction.
       * - DEVICE - Device is the initiator of the transaction.
       * @example CONSUMER
       * @enum {string}
       */
      initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
    };
    /**
     * AuthenticationType
     * @description Below are the allowed values for the enumeration AuthenticationType.
     * - OTP - One-time password generated by the Payer FSP.
     * - QRCODE - QR code used as One Time Password.
     * - U2F - U2F is a new addition isolated to Thirdparty stream.
     * @example OTP
     * @enum {string}
     */
    AuthenticationType: "OTP" | "QRCODE" | "U2F";
    /**
     * TransactionRequestState
     * @description Below are the allowed values for the enumeration.
     * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
     * - PENDING - Payer FSP has sent the transaction request to the Payer.
     * - ACCEPTED - Payer has approved the transaction.
     * - REJECTED - Payer has rejected the transaction.
     * @example RECEIVED
     * @enum {string}
     */
    TransactionRequestState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
    requestToPayResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transactionRequestId: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * TransactionType
       * @description Data model for the complex type TransactionType.
       */
      scenario?: {
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        scenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        subScenario?: string;
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        initiator: "PAYER" | "PAYEE";
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          originalTransactionId: string;
          /**
           * RefundReason
           * @description Reason for the refund.
           * @example Free text indicating reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        balanceOfPayments?: string;
      };
      /**
       * TransactionInitiator
       * @description Below are the allowed values for the enumeration.
       * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
       * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
       * @example PAYEE
       * @enum {string}
       */
      initiator?: "PAYER" | "PAYEE";
      /**
       * TransactionInitiatorType
       * @description Below are the allowed values for the enumeration.
       * - CONSUMER - Consumer is the initiator of the transaction.
       * - AGENT - Agent is the initiator of the transaction.
       * - BUSINESS - Business is the initiator of the transaction.
       * - DEVICE - Device is the initiator of the transaction.
       * @example CONSUMER
       * @enum {string}
       */
      initiatorType?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
      /**
       * AuthenticationType
       * @description Below are the allowed values for the enumeration AuthenticationType.
       * - OTP - One-time password generated by the Payer FSP.
       * - QRCODE - QR code used as One Time Password.
       * - U2F - U2F is a new addition isolated to Thirdparty stream.
       * @example OTP
       * @enum {string}
       */
      authenticationType?: "OTP" | "QRCODE" | "U2F";
      /**
       * TransactionRequestState
       * @description Below are the allowed values for the enumeration.
       * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
       * - PENDING - Payer FSP has sent the transaction request to the Payer.
       * - ACCEPTED - Payer has approved the transaction.
       * - REJECTED - Payer has rejected the transaction.
       * @example RECEIVED
       * @enum {string}
       */
      requestToPayState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
    } & {
      transactionType: unknown;
    };
    requestToPayTransferRequest: {
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      requestToPayTransactionId: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * TransactionType
       * @description Data model for the complex type TransactionType.
       */
      scenario: {
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        scenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        subScenario?: string;
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        initiator: "PAYER" | "PAYEE";
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          originalTransactionId: string;
          /**
           * RefundReason
           * @description Reason for the refund.
           * @example Free text indicating reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        balanceOfPayments?: string;
      };
      /**
       * TransactionInitiator
       * @description Below are the allowed values for the enumeration.
       * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
       * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
       * @example PAYEE
       * @enum {string}
       */
      initiator: "PAYER" | "PAYEE";
      /**
       * TransactionInitiatorType
       * @description Below are the allowed values for the enumeration.
       * - CONSUMER - Consumer is the initiator of the transaction.
       * - AGENT - Agent is the initiator of the transaction.
       * - BUSINESS - Business is the initiator of the transaction.
       * - DEVICE - Device is the initiator of the transaction.
       * @example CONSUMER
       * @enum {string}
       */
      initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
    };
    requestToPayTransferResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transferId?: string;
      /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
      requestToPayTransactionId: string;
      from: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      to: {
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        displayName?: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        firstName?: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        middleName?: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        lastName?: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        dateOfBirth?: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        fspId?: string;
        extensionList?: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
      /**
       * Amount
       * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       * @example 123.45
       */
      amount: string;
      /**
       * transferTransactionType
       * @description Type of transaction.
       * @enum {string}
       */
      transactionType: "TRANSFER";
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      /** @enum {string} */
      currentState?:
        | "ERROR_OCCURRED"
        | "WAITING_FOR_PARTY_ACCEPTANCE"
        | "WAITING_FOR_QUOTE_ACCEPTANCE"
        | "COMPLETED";
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      quoteId?: string;
      /**
       * QuotesIDPutResponse
       * @description The object sent in the PUT /quotes/{ID} callback.
       */
      quoteResponse?: {
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        transferAmount: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        payeeReceiveAmount?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        payeeFspFee?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        payeeFspCommission?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        expiration: string;
        /**
         * GeoCode
         * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
         */
        geoCode?: {
          /**
           * Latitude
           * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           * @example +45.4215
           */
          latitude: string;
          /**
           * Longitude
           * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           * @example +75.6972
           */
          longitude: string;
        };
        /**
         * IlpPacket
         * @description Information for recipient (transport layer information).
         * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
         */
        ilpPacket: string;
        /**
         * IlpCondition
         * @description Condition that must be attached to the transfer by the Payer.
         */
        condition: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      };
      /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
      quoteResponseSource?: string;
      /**
       * TransfersIDPutResponse
       * @description The object sent in the PUT /transfers/{ID} callback.
       */
      fulfil?: {
        /**
         * IlpFulfilment
         * @description Fulfilment that must be attached to the transfer by the Payee.
         * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
         */
        fulfilment?: string;
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        completedTimestamp?: string;
        /**
         * TransferState
         * @description Below are the allowed values for the enumeration.
         * - RECEIVED - Next ledger has received the transfer.
         * - RESERVED - Next ledger has reserved the transfer.
         * - COMMITTED - Next ledger has successfully performed the transfer.
         * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
         * @example RESERVED
         * @enum {string}
         */
        transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      };
      /** @description This object represents a Mojaloop API error received at any time during the transfer process */
      lastError?: {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
    transferContinuationAcceptOTP: {
      /** @enum {boolean} */
      acceptOTP: true | false;
    };
    accountsRequest: {
      /**
       * PartyIdType
       * @description Below are the allowed values for the enumeration.
       * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
       * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
       * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
       * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
       * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
       * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
       * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
       * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
       * @enum {string}
       */
      idType:
        | "MSISDN"
        | "EMAIL"
        | "PERSONAL_ID"
        | "BUSINESS"
        | "DEVICE"
        | "ACCOUNT_ID"
        | "IBAN"
        | "ALIAS";
      /**
       * PartyIdentifier
       * @description Identifier of the Party.
       * @example 16135551212
       */
      idValue: string;
      /**
       * PartySubIdOrType
       * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
       */
      idSubValue?: string;
      /**
       * Currency
       * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       * @enum {string}
       */
      currency:
        | "AED"
        | "AFN"
        | "ALL"
        | "AMD"
        | "ANG"
        | "AOA"
        | "ARS"
        | "AUD"
        | "AWG"
        | "AZN"
        | "BAM"
        | "BBD"
        | "BDT"
        | "BGN"
        | "BHD"
        | "BIF"
        | "BMD"
        | "BND"
        | "BOB"
        | "BRL"
        | "BSD"
        | "BTN"
        | "BWP"
        | "BYN"
        | "BZD"
        | "CAD"
        | "CDF"
        | "CHF"
        | "CLP"
        | "CNY"
        | "COP"
        | "CRC"
        | "CUC"
        | "CUP"
        | "CVE"
        | "CZK"
        | "DJF"
        | "DKK"
        | "DOP"
        | "DZD"
        | "EGP"
        | "ERN"
        | "ETB"
        | "EUR"
        | "FJD"
        | "FKP"
        | "GBP"
        | "GEL"
        | "GGP"
        | "GHS"
        | "GIP"
        | "GMD"
        | "GNF"
        | "GTQ"
        | "GYD"
        | "HKD"
        | "HNL"
        | "HRK"
        | "HTG"
        | "HUF"
        | "IDR"
        | "ILS"
        | "IMP"
        | "INR"
        | "IQD"
        | "IRR"
        | "ISK"
        | "JEP"
        | "JMD"
        | "JOD"
        | "JPY"
        | "KES"
        | "KGS"
        | "KHR"
        | "KMF"
        | "KPW"
        | "KRW"
        | "KWD"
        | "KYD"
        | "KZT"
        | "LAK"
        | "LBP"
        | "LKR"
        | "LRD"
        | "LSL"
        | "LYD"
        | "MAD"
        | "MDL"
        | "MGA"
        | "MKD"
        | "MMK"
        | "MNT"
        | "MOP"
        | "MRO"
        | "MUR"
        | "MVR"
        | "MWK"
        | "MXN"
        | "MYR"
        | "MZN"
        | "NAD"
        | "NGN"
        | "NIO"
        | "NOK"
        | "NPR"
        | "NZD"
        | "OMR"
        | "PAB"
        | "PEN"
        | "PGK"
        | "PHP"
        | "PKR"
        | "PLN"
        | "PYG"
        | "QAR"
        | "RON"
        | "RSD"
        | "RUB"
        | "RWF"
        | "SAR"
        | "SBD"
        | "SCR"
        | "SDG"
        | "SEK"
        | "SGD"
        | "SHP"
        | "SLL"
        | "SOS"
        | "SPL"
        | "SRD"
        | "STD"
        | "SVC"
        | "SYP"
        | "SZL"
        | "THB"
        | "TJS"
        | "TMT"
        | "TND"
        | "TOP"
        | "TRY"
        | "TTD"
        | "TVD"
        | "TWD"
        | "TZS"
        | "UAH"
        | "UGX"
        | "USD"
        | "UYU"
        | "UZS"
        | "VEF"
        | "VND"
        | "VUV"
        | "WST"
        | "XAF"
        | "XCD"
        | "XDR"
        | "XOF"
        | "XPF"
        | "XTS"
        | "XXX"
        | "YER"
        | "ZAR"
        | "ZMW"
        | "ZWD";
    }[];
    accountCreationStatus: {
      /**
       * PartyIdType
       * @description Below are the allowed values for the enumeration.
       * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
       * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
       * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
       * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
       * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
       * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
       * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
       * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
       * @enum {string}
       */
      idType:
        | "MSISDN"
        | "EMAIL"
        | "PERSONAL_ID"
        | "BUSINESS"
        | "DEVICE"
        | "ACCOUNT_ID"
        | "IBAN"
        | "ALIAS";
      /**
       * PartyIdentifier
       * @description Identifier of the Party.
       * @example 16135551212
       */
      idValue: string;
      /**
       * PartySubIdOrType
       * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
       */
      idSubValue?: string;
      error?: {
        /** @description Error code as string. */
        statusCode?: string;
        /** @description Error message text. */
        message?: string;
      };
    }[];
    /** @enum {string} */
    accountsCreationState: "ERROR_OCCURRED" | "COMPLETED";
    accountsResponse: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      modelId?: string;
      accounts: {
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
      }[];
      response?: {
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        idType:
          | "MSISDN"
          | "EMAIL"
          | "PERSONAL_ID"
          | "BUSINESS"
          | "DEVICE"
          | "ACCOUNT_ID"
          | "IBAN"
          | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        idValue: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        idSubValue?: string;
        error?: {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        };
      }[];
      /** @enum {string} */
      currentState?: "ERROR_OCCURRED" | "COMPLETED";
      /** @description This object represents a Mojaloop API error received at any time during the transfer process */
      lastError?: {
        /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
        httpStatusCode?: number;
        /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
        mojaloopError?: {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
      postAccountsResponse?: {
        body: { [key: string]: unknown };
        headers?: { [key: string]: unknown };
      };
    };
    errorAccountsResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & {
      executionState: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        modelId?: string;
        accounts: {
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
        }[];
        response?: {
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          idType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          idValue: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          idSubValue?: string;
          error?: {
            /** @description Error code as string. */
            statusCode?: string;
            /** @description Error message text. */
            message?: string;
          };
        }[];
        /** @enum {string} */
        currentState?: "ERROR_OCCURRED" | "COMPLETED";
        /** @description This object represents a Mojaloop API error received at any time during the transfer process */
        lastError?: {
          /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
          httpStatusCode?: number;
          /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
          mojaloopError?: {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
        postAccountsResponse?: {
          body: { [key: string]: unknown };
          headers?: { [key: string]: unknown };
        };
      };
    };
    /** @enum {string} */
    async2SyncCurrentState:
      | "WAITING_FOR_ACTION"
      | "COMPLETED"
      | "ERROR_OCCURRED";
    /**
     * partiesByIdResponse
     * @description GET /parties/{Type}/{ID} response object
     */
    partiesByIdResponse: {
      party: {
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        body: {
          /**
           * PartyIdInfo
           * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
           */
          partyIdInfo: {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            partyIdType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            partyIdentifier: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            partySubIdOrType?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * PartyName
           * @description Name of the Party. Could be a real name or a nickname.
           */
          name?: string;
          /**
           * PartyPersonalInfo
           * @description Data model for the complex type PartyPersonalInfo.
           */
          personalInfo?: {
            /**
             * PartyComplexName
             * @description Data model for the complex type PartyComplexName.
             */
            complexName?: {
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
            };
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
          };
        };
        headers: { [key: string]: unknown };
      };
      /** @enum {string} */
      currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
    };
    /**
     * QuotesPostRequest
     * @description The object sent in the POST /quotes request.
     */
    QuotesPostRequest: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      quoteId: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transactionId: string;
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transactionRequestId?: string;
      /**
       * Party
       * @description Data model for the complex type Party.
       */
      payee: {
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
         */
        partyIdInfo: {
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          partyIdType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          partyIdentifier: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * PartyComplexName
           * @description Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
          };
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Party
       * @description Data model for the complex type Party.
       */
      payer: {
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
         */
        partyIdInfo: {
          /**
           * PartyIdType
           * @description Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
           * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
           * @enum {string}
           */
          partyIdType:
            | "MSISDN"
            | "EMAIL"
            | "PERSONAL_ID"
            | "BUSINESS"
            | "DEVICE"
            | "ACCOUNT_ID"
            | "IBAN"
            | "ALIAS";
          /**
           * PartyIdentifier
           * @description Identifier of the Party.
           * @example 16135551212
           */
          partyIdentifier: string;
          /**
           * PartySubIdOrType
           * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * PartyComplexName
           * @description Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
          };
          /**
           * DateofBirth (type Date)
           * @description Date of Birth of the Party.
           * @example 1966-06-16
           */
          dateOfBirth?: string;
        };
      };
      /**
       * AmountType
       * @description Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       * @example RECEIVE
       * @enum {string}
       */
      amountType: "SEND" | "RECEIVE";
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      amount: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      fees?: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * TransactionType
       * @description Data model for the complex type TransactionType.
       */
      transactionType: {
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        scenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        subScenario?: string;
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        initiator: "PAYER" | "PAYEE";
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          originalTransactionId: string;
          /**
           * RefundReason
           * @description Reason for the refund.
           * @example Free text indicating reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        balanceOfPayments?: string;
      };
      /**
       * GeoCode
       * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
       */
      geoCode?: {
        /**
         * Latitude
         * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +45.4215
         */
        latitude: string;
        /**
         * Longitude
         * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +75.6972
         */
        longitude: string;
      };
      /**
       * Note
       * @description Memo assigned to transaction.
       * @example Note sent to Payee.
       */
      note?: string;
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      expiration?: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /** simpleQuotesPostRequest */
    simpleQuotesPostRequest: {
      /**
       * FspId
       * @description FSP identifier.
       */
      fspId: string;
      /**
       * QuotesPostRequest
       * @description The object sent in the POST /quotes request.
       */
      quotesPostRequest: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        quoteId: string;
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transactionId: string;
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transactionRequestId?: string;
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        payee: {
          /**
           * PartyIdInfo
           * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
           */
          partyIdInfo: {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            partyIdType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            partyIdentifier: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            partySubIdOrType?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * PartyName
           * @description Name of the Party. Could be a real name or a nickname.
           */
          name?: string;
          /**
           * PartyPersonalInfo
           * @description Data model for the complex type PartyPersonalInfo.
           */
          personalInfo?: {
            /**
             * PartyComplexName
             * @description Data model for the complex type PartyComplexName.
             */
            complexName?: {
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
            };
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
          };
        };
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        payer: {
          /**
           * PartyIdInfo
           * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
           */
          partyIdInfo: {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            partyIdType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            partyIdentifier: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            partySubIdOrType?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          /**
           * MerchantClassificationCode
           * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
           */
          merchantClassificationCode?: string;
          /**
           * PartyName
           * @description Name of the Party. Could be a real name or a nickname.
           */
          name?: string;
          /**
           * PartyPersonalInfo
           * @description Data model for the complex type PartyPersonalInfo.
           */
          personalInfo?: {
            /**
             * PartyComplexName
             * @description Data model for the complex type PartyComplexName.
             */
            complexName?: {
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
            };
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
          };
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        amountType: "SEND" | "RECEIVE";
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        amount: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        fees?: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * TransactionType
         * @description Data model for the complex type TransactionType.
         */
        transactionType: {
          /**
           * TransactionScenario
           * @description Below are the allowed values for the enumeration.
           * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
           * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
           * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
           * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
           * - REFUND - Used for performing a refund of transaction.
           * @example DEPOSIT
           * @enum {string}
           */
          scenario:
            | "DEPOSIT"
            | "WITHDRAWAL"
            | "TRANSFER"
            | "PAYMENT"
            | "REFUND";
          /**
           * TransactionSubScenario
           * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
           * @example LOCALLY_DEFINED_SUBSCENARIO
           */
          subScenario?: string;
          /**
           * TransactionInitiator
           * @description Below are the allowed values for the enumeration.
           * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
           * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
           * @example PAYEE
           * @enum {string}
           */
          initiator: "PAYER" | "PAYEE";
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * Refund
           * @description Data model for the complex type Refund.
           */
          refundInfo?: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            originalTransactionId: string;
            /**
             * RefundReason
             * @description Reason for the refund.
             * @example Free text indicating reason for the refund.
             */
            refundReason?: string;
          };
          /**
           * BalanceOfPayments
           * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
           * @example 123
           */
          balanceOfPayments?: string;
        };
        /**
         * GeoCode
         * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
         */
        geoCode?: {
          /**
           * Latitude
           * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           * @example +45.4215
           */
          latitude: string;
          /**
           * Longitude
           * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           * @example +75.6972
           */
          longitude: string;
        };
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        note?: string;
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        expiration?: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      };
    };
    /** QuotesPostResponse */
    quotesPostResponse: {
      /**
       * QuotesIDPutResponse
       * @description The object sent in the PUT /quotes/{ID} callback.
       */
      quotes: {
        body: {
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          transferAmount: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeReceiveAmount?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeFspFee?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * Money
           * @description Data model for the complex type Money.
           */
          payeeFspCommission?: {
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
          };
          /**
           * @description Date and time until when the quotation is valid and can be honored when used in the subsequent transaction.
           * @example 2016-05-24T08:38:08.699-04:00
           */
          expiration: string;
          /**
           * GeoCode
           * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
           */
          geoCode?: {
            /**
             * Latitude
             * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
             * @example +45.4215
             */
            latitude: string;
            /**
             * Longitude
             * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
             * @example +75.6972
             */
            longitude: string;
          };
          /**
           * IlpPacket
           * @description Information for recipient (transport layer information).
           * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
           */
          ilpPacket: string;
          /**
           * IlpCondition
           * @description Condition that must be attached to the transfer by the Payer.
           */
          condition: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        headers: { [key: string]: unknown };
      };
      /** @enum {string} */
      currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
    };
    errorQuotesResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & { [key: string]: unknown };
    /**
     * TransfersPostRequest
     * @description The object sent in the POST /transfers request.
     */
    TransfersPostRequest: {
      /**
       * CorrelationId
       * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       * @example b51ec534-ee48-4575-b6a9-ead2955b8069
       */
      transferId: string;
      /**
       * FspId
       * @description FSP identifier.
       */
      payeeFsp: string;
      /**
       * FspId
       * @description FSP identifier.
       */
      payerFsp: string;
      /**
       * Money
       * @description Data model for the complex type Money.
       */
      amount: {
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        currency:
          | "AED"
          | "AFN"
          | "ALL"
          | "AMD"
          | "ANG"
          | "AOA"
          | "ARS"
          | "AUD"
          | "AWG"
          | "AZN"
          | "BAM"
          | "BBD"
          | "BDT"
          | "BGN"
          | "BHD"
          | "BIF"
          | "BMD"
          | "BND"
          | "BOB"
          | "BRL"
          | "BSD"
          | "BTN"
          | "BWP"
          | "BYN"
          | "BZD"
          | "CAD"
          | "CDF"
          | "CHF"
          | "CLP"
          | "CNY"
          | "COP"
          | "CRC"
          | "CUC"
          | "CUP"
          | "CVE"
          | "CZK"
          | "DJF"
          | "DKK"
          | "DOP"
          | "DZD"
          | "EGP"
          | "ERN"
          | "ETB"
          | "EUR"
          | "FJD"
          | "FKP"
          | "GBP"
          | "GEL"
          | "GGP"
          | "GHS"
          | "GIP"
          | "GMD"
          | "GNF"
          | "GTQ"
          | "GYD"
          | "HKD"
          | "HNL"
          | "HRK"
          | "HTG"
          | "HUF"
          | "IDR"
          | "ILS"
          | "IMP"
          | "INR"
          | "IQD"
          | "IRR"
          | "ISK"
          | "JEP"
          | "JMD"
          | "JOD"
          | "JPY"
          | "KES"
          | "KGS"
          | "KHR"
          | "KMF"
          | "KPW"
          | "KRW"
          | "KWD"
          | "KYD"
          | "KZT"
          | "LAK"
          | "LBP"
          | "LKR"
          | "LRD"
          | "LSL"
          | "LYD"
          | "MAD"
          | "MDL"
          | "MGA"
          | "MKD"
          | "MMK"
          | "MNT"
          | "MOP"
          | "MRO"
          | "MUR"
          | "MVR"
          | "MWK"
          | "MXN"
          | "MYR"
          | "MZN"
          | "NAD"
          | "NGN"
          | "NIO"
          | "NOK"
          | "NPR"
          | "NZD"
          | "OMR"
          | "PAB"
          | "PEN"
          | "PGK"
          | "PHP"
          | "PKR"
          | "PLN"
          | "PYG"
          | "QAR"
          | "RON"
          | "RSD"
          | "RUB"
          | "RWF"
          | "SAR"
          | "SBD"
          | "SCR"
          | "SDG"
          | "SEK"
          | "SGD"
          | "SHP"
          | "SLL"
          | "SOS"
          | "SPL"
          | "SRD"
          | "STD"
          | "SVC"
          | "SYP"
          | "SZL"
          | "THB"
          | "TJS"
          | "TMT"
          | "TND"
          | "TOP"
          | "TRY"
          | "TTD"
          | "TVD"
          | "TWD"
          | "TZS"
          | "UAH"
          | "UGX"
          | "USD"
          | "UYU"
          | "UZS"
          | "VEF"
          | "VND"
          | "VUV"
          | "WST"
          | "XAF"
          | "XCD"
          | "XDR"
          | "XOF"
          | "XPF"
          | "XTS"
          | "XXX"
          | "YER"
          | "ZAR"
          | "ZMW"
          | "ZWD";
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        amount: string;
      };
      /**
       * IlpPacket
       * @description Information for recipient (transport layer information).
       * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
       */
      ilpPacket: string;
      /**
       * IlpCondition
       * @description Condition that must be attached to the transfer by the Payer.
       */
      condition: string;
      /**
       * DateTime
       * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       * @example 2016-05-24T08:38:08.699-04:00
       */
      expiration: string;
      /**
       * ExtensionList
       * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /** @description Number of Extension elements. */
        extension: {
          /**
           * ExtensionKey
           * @description Extension key.
           */
          key: string;
          /**
           * ExtensionValue
           * @description Extension value.
           */
          value: string;
        }[];
      };
    };
    /** SimpleTransfersPostRequest */
    simpleTransfersPostRequest: {
      /**
       * FspId
       * @description FSP identifier.
       */
      fspId: string;
      /**
       * TransfersPostRequest
       * @description The object sent in the POST /transfers request.
       */
      transfersPostRequest: {
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        transferId: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        payeeFsp: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        payerFsp: string;
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        amount: {
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
        };
        /**
         * IlpPacket
         * @description Information for recipient (transport layer information).
         * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
         */
        ilpPacket: string;
        /**
         * IlpCondition
         * @description Condition that must be attached to the transfer by the Payer.
         */
        condition: string;
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        expiration: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /** @description Number of Extension elements. */
          extension: {
            /**
             * ExtensionKey
             * @description Extension key.
             */
            key: string;
            /**
             * ExtensionValue
             * @description Extension value.
             */
            value: string;
          }[];
        };
      };
    };
    /** SimpleTransfersPostResponse */
    simpleTransfersPostResponse: {
      transfer: {
        /**
         * TransfersIDPutResponse
         * @description The object sent in the PUT /transfers/{ID} callback.
         */
        body: {
          /**
           * IlpFulfilment
           * @description Fulfilment that must be attached to the transfer by the Payee.
           * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
           */
          fulfilment?: string;
          /**
           * DateTime
           * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
           * @example 2016-05-24T08:38:08.699-04:00
           */
          completedTimestamp?: string;
          /**
           * TransferState
           * @description Below are the allowed values for the enumeration.
           * - RECEIVED - Next ledger has received the transfer.
           * - RESERVED - Next ledger has reserved the transfer.
           * - COMMITTED - Next ledger has successfully performed the transfer.
           * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
           * @example RESERVED
           * @enum {string}
           */
          transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
        };
        headers: { [key: string]: unknown };
      };
      /** @enum {string} */
      currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
    };
    errorSimpleTransfersResponse: {
      /** @description Error code as string. */
      statusCode?: string;
      /** @description Error message text. */
      message?: string;
    } & { [key: string]: unknown };
  };
  responses: {
    /** Transfer completed successfully */
    transferSuccess: {
      content: {
        "application/json": {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          transferId?: string;
          /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
          homeTransactionId: string;
          from: {
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Name
             * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            displayName?: string;
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
            /**
             * MerchantClassificationCode
             * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
             */
            merchantClassificationCode?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            extensionList?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          to: {
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Name
             * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            displayName?: string;
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
            /**
             * MerchantClassificationCode
             * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
             */
            merchantClassificationCode?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            extensionList?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /**
           * AmountType
           * @description Below are the allowed values for the enumeration AmountType.
           * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
           * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
           * @example RECEIVE
           * @enum {string}
           */
          amountType: "SEND" | "RECEIVE";
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
          /**
           * transferTransactionType
           * @description Type of transaction.
           * @enum {string}
           */
          transactionType: "TRANSFER";
          /**
           * Note
           * @description Memo assigned to transaction.
           * @example Note sent to Payee.
           */
          note?: string;
          /** @enum {string} */
          currentState?:
            | "ERROR_OCCURRED"
            | "WAITING_FOR_PARTY_ACCEPTANCE"
            | "WAITING_FOR_QUOTE_ACCEPTANCE"
            | "COMPLETED";
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          quoteId?: string;
          getPartiesResponse?: {
            body: { [key: string]: unknown };
            headers?: { [key: string]: unknown };
          };
          quoteResponse?: {
            /**
             * QuotesIDPutResponse
             * @description The object sent in the PUT /quotes/{ID} callback.
             */
            body: {
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              transferAmount: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeReceiveAmount?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspFee?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspCommission?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * DateTime
               * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
               * @example 2016-05-24T08:38:08.699-04:00
               */
              expiration: string;
              /**
               * GeoCode
               * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
               */
              geoCode?: {
                /**
                 * Latitude
                 * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +45.4215
                 */
                latitude: string;
                /**
                 * Longitude
                 * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +75.6972
                 */
                longitude: string;
              };
              /**
               * IlpPacket
               * @description Information for recipient (transport layer information).
               * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
               */
              ilpPacket: string;
              /**
               * IlpCondition
               * @description Condition that must be attached to the transfer by the Payer.
               */
              condition: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
            headers?: { [key: string]: unknown };
          };
          /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
          quoteResponseSource?: string;
          fulfil?: {
            /**
             * TransfersIDPutResponse
             * @description The object sent in the PUT /transfers/{ID} callback.
             */
            body: {
              /**
               * IlpFulfilment
               * @description Fulfilment that must be attached to the transfer by the Payee.
               * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
               */
              fulfilment?: string;
              /**
               * DateTime
               * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
               * @example 2016-05-24T08:38:08.699-04:00
               */
              completedTimestamp?: string;
              /**
               * TransferState
               * @description Below are the allowed values for the enumeration.
               * - RECEIVED - Next ledger has received the transfer.
               * - RESERVED - Next ledger has reserved the transfer.
               * - COMMITTED - Next ledger has successfully performed the transfer.
               * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
               * @example RESERVED
               * @enum {string}
               */
              transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
            headers?: { [key: string]: unknown };
          };
          /** @description This object represents a Mojaloop API error received at any time during the transfer process */
          lastError?: {
            /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
            httpStatusCode?: number;
            /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
            mojaloopError?: {
              /**
               * ErrorInformation
               * @description Data model for the complex type ErrorInformation.
               */
              errorInformation?: {
                /**
                 * ErrorCode
                 * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                 * @example 5100
                 */
                errorCode: string;
                /**
                 * ErrorDescription
                 * @description Error description string.
                 */
                errorDescription: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
            };
          };
          /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
          skipPartyLookup?: boolean;
        };
      };
    };
    /** Malformed or missing required body, headers or parameters */
    transferBadRequest: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          transferState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transferId?: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * transferTransactionType
             * @description Type of transaction.
             * @enum {string}
             */
            transactionType: "TRANSFER";
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
            /** @enum {string} */
            currentState?:
              | "ERROR_OCCURRED"
              | "WAITING_FOR_PARTY_ACCEPTANCE"
              | "WAITING_FOR_QUOTE_ACCEPTANCE"
              | "COMPLETED";
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId?: string;
            getPartiesResponse?: {
              body: { [key: string]: unknown };
              headers?: { [key: string]: unknown };
            };
            quoteResponse?: {
              /**
               * QuotesIDPutResponse
               * @description The object sent in the PUT /quotes/{ID} callback.
               */
              body: {
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration: string;
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
            quoteResponseSource?: string;
            fulfil?: {
              /**
               * TransfersIDPutResponse
               * @description The object sent in the PUT /transfers/{ID} callback.
               */
              body: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                transferState:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
            /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
            skipPartyLookup?: boolean;
          };
        };
      };
    };
    /** An error occurred processing the transfer */
    transferServerError: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          transferState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transferId?: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * transferTransactionType
             * @description Type of transaction.
             * @enum {string}
             */
            transactionType: "TRANSFER";
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
            /** @enum {string} */
            currentState?:
              | "ERROR_OCCURRED"
              | "WAITING_FOR_PARTY_ACCEPTANCE"
              | "WAITING_FOR_QUOTE_ACCEPTANCE"
              | "COMPLETED";
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId?: string;
            getPartiesResponse?: {
              body: { [key: string]: unknown };
              headers?: { [key: string]: unknown };
            };
            quoteResponse?: {
              /**
               * QuotesIDPutResponse
               * @description The object sent in the PUT /quotes/{ID} callback.
               */
              body: {
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration: string;
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
            quoteResponseSource?: string;
            fulfil?: {
              /**
               * TransfersIDPutResponse
               * @description The object sent in the PUT /transfers/{ID} callback.
               */
              body: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                transferState:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
            /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
            skipPartyLookup?: boolean;
          };
        };
      };
    };
    /** Timeout occurred processing the transfer */
    transferTimeout: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          transferState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transferId?: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * transferTransactionType
             * @description Type of transaction.
             * @enum {string}
             */
            transactionType: "TRANSFER";
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
            /** @enum {string} */
            currentState?:
              | "ERROR_OCCURRED"
              | "WAITING_FOR_PARTY_ACCEPTANCE"
              | "WAITING_FOR_QUOTE_ACCEPTANCE"
              | "COMPLETED";
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId?: string;
            getPartiesResponse?: {
              body: { [key: string]: unknown };
              headers?: { [key: string]: unknown };
            };
            quoteResponse?: {
              /**
               * QuotesIDPutResponse
               * @description The object sent in the PUT /quotes/{ID} callback.
               */
              body: {
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration: string;
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
            quoteResponseSource?: string;
            fulfil?: {
              /**
               * TransfersIDPutResponse
               * @description The object sent in the PUT /transfers/{ID} callback.
               */
              body: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                transferState:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
            /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
            skipPartyLookup?: boolean;
          };
        };
      };
    };
    /** Bulk transfer accepted successfully */
    bulkTransactionAccepted: unknown;
    /** Malformed or missing required body, headers or parameters */
    bulkTransferBadRequest: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          bulkTransferState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkTransferId: string;
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkQuoteId?: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId?: string;
            /**
             * TransferState
             * @description Below are the allowed values for the enumeration.
             * - RECEIVED - Next ledger has received the transfer.
             * - RESERVED - Next ledger has reserved the transfer.
             * - COMMITTED - Next ledger has successfully performed the transfer.
             * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
             * @example RESERVED
             * @enum {string}
             */
            bulkTransferState?:
              | "RECEIVED"
              | "RESERVED"
              | "COMMITTED"
              | "ABORTED";
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            completedTimestamp?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @enum {string} */
            currentState: "ERROR_OCCURRED" | "COMPLETED";
            /** @description List of individual transfer result in a bulk transfer response. */
            individualTransferResults: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              transferId: string;
              /**
               * IlpFulfilment
               * @description Fulfilment that must be attached to the transfer by the Payee.
               * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
               */
              fulfilment?: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @description This object represents a Mojaloop API error received at any time during the transfer process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            }[];
          };
        };
      };
    };
    /** Internal Server Error */
    errorResponse: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        };
      };
    };
    /** Malformed or missing required body, headers or parameters */
    bulkTransactionPutBadRequest: {
      content: {
        "application/json":
          | ({
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & {
              bulkTransferState: {
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                bulkHomeTransactionID: string;
                /** @description List of individual transfers in a bulk transfer with accept party information. */
                individualTransfers: ({
                  /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                  homeTransactionId: string;
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  transactionId: string;
                } & {
                  /** @enum {boolean} */
                  acceptParty: true;
                })[];
              } & {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            })
          | ({
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            } & ({
              bulkTransferState?: {
                /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                bulkHomeTransactionID: string;
                /** @description List of individual transfers in a bulk transfer. */
                individualTransfers: ({
                  /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
                  homeTransactionId: string;
                  /**
                   * CorrelationId
                   * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                   * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                   */
                  transactionId: string;
                } & {
                  /** @enum {boolean} */
                  acceptQuote: true | false;
                })[];
              } & {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            } & {
              bulkTansferState: unknown;
            }));
      };
    };
    /** Bulk transfer completed successfully */
    bulkTransferSuccess: {
      content: {
        "application/json": {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          bulkTransferId: string;
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          bulkQuoteId?: string;
          /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
          homeTransactionId?: string;
          /**
           * TransferState
           * @description Below are the allowed values for the enumeration.
           * - RECEIVED - Next ledger has received the transfer.
           * - RESERVED - Next ledger has reserved the transfer.
           * - COMMITTED - Next ledger has successfully performed the transfer.
           * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
           * @example RESERVED
           * @enum {string}
           */
          bulkTransferState?: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
          /**
           * DateTime
           * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
           * @example 2016-05-24T08:38:08.699-04:00
           */
          completedTimestamp?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /** @enum {string} */
          currentState: "ERROR_OCCURRED" | "COMPLETED";
          /** @description List of individual transfer result in a bulk transfer response. */
          individualTransferResults: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transferId: string;
            /**
             * IlpFulfilment
             * @description Fulfilment that must be attached to the transfer by the Payee.
             * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
             */
            fulfilment?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
          }[];
        };
      };
    };
    /** Bulk quote completed successfully */
    bulkQuoteSuccess: {
      content: {
        "application/json": {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          bulkQuoteId: string;
          /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
          homeTransactionId?: string;
          /**
           * DateTime
           * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
           * @example 2016-05-24T08:38:08.699-04:00
           */
          expiration?: string;
          /**
           * ExtensionList
           * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /** @description Number of Extension elements. */
            extension: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /** @enum {string} */
          currentState: "ERROR_OCCURRED" | "COMPLETED";
          /** @description List of individualQuoteResults in a bulk transfer response. */
          individualQuoteResults: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId: string;
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            transferAmount: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeReceiveAmount?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeFspFee?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeFspCommission?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * GeoCode
             * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
             */
            geoCode?: {
              /**
               * Latitude
               * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +45.4215
               */
              latitude: string;
              /**
               * Longitude
               * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +75.6972
               */
              longitude: string;
            };
            /**
             * IlpPacket
             * @description Information for recipient (transport layer information).
             * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
             */
            ilpPacket: string;
            /**
             * IlpCondition
             * @description Condition that must be attached to the transfer by the Payer.
             */
            condition: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @description This object represents a Mojaloop API error received at any time during the quote process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
          }[];
        };
      };
    };
    /** Malformed or missing required body, headers or parameters */
    bulkQuoteBadRequest: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & ({
          bulkQuoteState?: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkQuoteId: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId?: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @enum {string} */
            currentState: "ERROR_OCCURRED" | "COMPLETED";
            /** @description List of individualQuoteResults in a bulk transfer response. */
            individualQuoteResults: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId: string;
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              transferAmount: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeReceiveAmount?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspFee?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspCommission?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * GeoCode
               * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
               */
              geoCode?: {
                /**
                 * Latitude
                 * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +45.4215
                 */
                latitude: string;
                /**
                 * Longitude
                 * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +75.6972
                 */
                longitude: string;
              };
              /**
               * IlpPacket
               * @description Information for recipient (transport layer information).
               * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
               */
              ilpPacket: string;
              /**
               * IlpCondition
               * @description Condition that must be attached to the transfer by the Payer.
               */
              condition: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @description This object represents a Mojaloop API error received at any time during the quote process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            }[];
          };
        } & {
          bulkTansferState: unknown;
        });
      };
    };
    /** An error occurred processing the bulk quote */
    bulkQuoteServerError: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & ({
          bulkQuoteState?: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkQuoteId: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId?: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @enum {string} */
            currentState: "ERROR_OCCURRED" | "COMPLETED";
            /** @description List of individualQuoteResults in a bulk transfer response. */
            individualQuoteResults: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId: string;
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              transferAmount: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeReceiveAmount?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspFee?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspCommission?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * GeoCode
               * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
               */
              geoCode?: {
                /**
                 * Latitude
                 * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +45.4215
                 */
                latitude: string;
                /**
                 * Longitude
                 * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +75.6972
                 */
                longitude: string;
              };
              /**
               * IlpPacket
               * @description Information for recipient (transport layer information).
               * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
               */
              ilpPacket: string;
              /**
               * IlpCondition
               * @description Condition that must be attached to the transfer by the Payer.
               */
              condition: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @description This object represents a Mojaloop API error received at any time during the quote process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            }[];
          };
        } & {
          bulkTansferState: unknown;
        });
      };
    };
    /** Timeout occurred processing the bulk quote */
    bulkQuoteTimeout: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & ({
          bulkQuoteState?: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            bulkQuoteId: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId?: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /** @enum {string} */
            currentState: "ERROR_OCCURRED" | "COMPLETED";
            /** @description List of individualQuoteResults in a bulk transfer response. */
            individualQuoteResults: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              quoteId: string;
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              transferAmount: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeReceiveAmount?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspFee?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspCommission?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * GeoCode
               * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
               */
              geoCode?: {
                /**
                 * Latitude
                 * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +45.4215
                 */
                latitude: string;
                /**
                 * Longitude
                 * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +75.6972
                 */
                longitude: string;
              };
              /**
               * IlpPacket
               * @description Information for recipient (transport layer information).
               * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
               */
              ilpPacket: string;
              /**
               * IlpCondition
               * @description Condition that must be attached to the transfer by the Payer.
               */
              condition: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
              /** @description This object represents a Mojaloop API error received at any time during the quote process */
              lastError?: {
                /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
                httpStatusCode?: number;
                /** @description If a quote process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
                mojaloopError?: {
                  /**
                   * ErrorInformation
                   * @description Data model for the complex type ErrorInformation.
                   */
                  errorInformation?: {
                    /**
                     * ErrorCode
                     * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                     * @example 5100
                     */
                    errorCode: string;
                    /**
                     * ErrorDescription
                     * @description Error description string.
                     */
                    errorDescription: string;
                    /**
                     * ExtensionList
                     * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                     */
                    extensionList?: {
                      /** @description Number of Extension elements. */
                      extension: {
                        /**
                         * ExtensionKey
                         * @description Extension key.
                         */
                        key: string;
                        /**
                         * ExtensionValue
                         * @description Extension value.
                         */
                        value: string;
                      }[];
                    };
                  };
                };
              };
            }[];
          };
        } & {
          bulkTansferState: unknown;
        });
      };
    };
    /** Request to Pay completed successfully */
    requestToPaySuccess: {
      content: {
        "application/json": {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          transactionRequestId: string;
          from: {
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Name
             * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            displayName?: string;
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
            /**
             * MerchantClassificationCode
             * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
             */
            merchantClassificationCode?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            extensionList?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          to: {
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Name
             * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            displayName?: string;
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
            /**
             * MerchantClassificationCode
             * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
             */
            merchantClassificationCode?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            extensionList?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /**
           * AmountType
           * @description Below are the allowed values for the enumeration AmountType.
           * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
           * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
           * @example RECEIVE
           * @enum {string}
           */
          amountType: "SEND" | "RECEIVE";
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
          /**
           * TransactionType
           * @description Data model for the complex type TransactionType.
           */
          scenario?: {
            /**
             * TransactionScenario
             * @description Below are the allowed values for the enumeration.
             * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
             * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
             * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
             * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
             * - REFUND - Used for performing a refund of transaction.
             * @example DEPOSIT
             * @enum {string}
             */
            scenario:
              | "DEPOSIT"
              | "WITHDRAWAL"
              | "TRANSFER"
              | "PAYMENT"
              | "REFUND";
            /**
             * TransactionSubScenario
             * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
             * @example LOCALLY_DEFINED_SUBSCENARIO
             */
            subScenario?: string;
            /**
             * TransactionInitiator
             * @description Below are the allowed values for the enumeration.
             * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
             * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
             * @example PAYEE
             * @enum {string}
             */
            initiator: "PAYER" | "PAYEE";
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * Refund
             * @description Data model for the complex type Refund.
             */
            refundInfo?: {
              /**
               * CorrelationId
               * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
               * @example b51ec534-ee48-4575-b6a9-ead2955b8069
               */
              originalTransactionId: string;
              /**
               * RefundReason
               * @description Reason for the refund.
               * @example Free text indicating reason for the refund.
               */
              refundReason?: string;
            };
            /**
             * BalanceOfPayments
             * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
             * @example 123
             */
            balanceOfPayments?: string;
          };
          /**
           * TransactionInitiator
           * @description Below are the allowed values for the enumeration.
           * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
           * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
           * @example PAYEE
           * @enum {string}
           */
          initiator?: "PAYER" | "PAYEE";
          /**
           * TransactionInitiatorType
           * @description Below are the allowed values for the enumeration.
           * - CONSUMER - Consumer is the initiator of the transaction.
           * - AGENT - Agent is the initiator of the transaction.
           * - BUSINESS - Business is the initiator of the transaction.
           * - DEVICE - Device is the initiator of the transaction.
           * @example CONSUMER
           * @enum {string}
           */
          initiatorType?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
          /**
           * AuthenticationType
           * @description Below are the allowed values for the enumeration AuthenticationType.
           * - OTP - One-time password generated by the Payer FSP.
           * - QRCODE - QR code used as One Time Password.
           * - U2F - U2F is a new addition isolated to Thirdparty stream.
           * @example OTP
           * @enum {string}
           */
          authenticationType?: "OTP" | "QRCODE" | "U2F";
          /**
           * TransactionRequestState
           * @description Below are the allowed values for the enumeration.
           * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
           * - PENDING - Payer FSP has sent the transaction request to the Payer.
           * - ACCEPTED - Payer has approved the transaction.
           * - REJECTED - Payer has rejected the transaction.
           * @example RECEIVED
           * @enum {string}
           */
          requestToPayState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
        } & {
          transactionType: unknown;
        };
      };
    };
    /** Transfer completed successfully */
    requestToPayTransferSuccess: {
      content: {
        "application/json": {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          transferId?: string;
          /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
          requestToPayTransactionId: string;
          from: {
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Name
             * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            displayName?: string;
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
            /**
             * MerchantClassificationCode
             * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
             */
            merchantClassificationCode?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            extensionList?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          to: {
            /**
             * TransactionInitiatorType
             * @description Below are the allowed values for the enumeration.
             * - CONSUMER - Consumer is the initiator of the transaction.
             * - AGENT - Agent is the initiator of the transaction.
             * - BUSINESS - Business is the initiator of the transaction.
             * - DEVICE - Device is the initiator of the transaction.
             * @example CONSUMER
             * @enum {string}
             */
            type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Name
             * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            displayName?: string;
            /**
             * FirstName
             * @description First name of the Party (Name Type).
             * @example Henrik
             */
            firstName?: string;
            /**
             * MiddleName
             * @description Middle name of the Party (Name Type).
             * @example Johannes
             */
            middleName?: string;
            /**
             * LastName
             * @description Last name of the Party (Name Type).
             * @example Karlsson
             */
            lastName?: string;
            /**
             * DateofBirth (type Date)
             * @description Date of Birth of the Party.
             * @example 1966-06-16
             */
            dateOfBirth?: string;
            /**
             * MerchantClassificationCode
             * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
             */
            merchantClassificationCode?: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            fspId?: string;
            extensionList?: {
              /**
               * ExtensionKey
               * @description Extension key.
               */
              key: string;
              /**
               * ExtensionValue
               * @description Extension value.
               */
              value: string;
            }[];
          };
          /**
           * AmountType
           * @description Below are the allowed values for the enumeration AmountType.
           * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
           * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
           * @example RECEIVE
           * @enum {string}
           */
          amountType: "SEND" | "RECEIVE";
          /**
           * Currency
           * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           * @enum {string}
           */
          currency:
            | "AED"
            | "AFN"
            | "ALL"
            | "AMD"
            | "ANG"
            | "AOA"
            | "ARS"
            | "AUD"
            | "AWG"
            | "AZN"
            | "BAM"
            | "BBD"
            | "BDT"
            | "BGN"
            | "BHD"
            | "BIF"
            | "BMD"
            | "BND"
            | "BOB"
            | "BRL"
            | "BSD"
            | "BTN"
            | "BWP"
            | "BYN"
            | "BZD"
            | "CAD"
            | "CDF"
            | "CHF"
            | "CLP"
            | "CNY"
            | "COP"
            | "CRC"
            | "CUC"
            | "CUP"
            | "CVE"
            | "CZK"
            | "DJF"
            | "DKK"
            | "DOP"
            | "DZD"
            | "EGP"
            | "ERN"
            | "ETB"
            | "EUR"
            | "FJD"
            | "FKP"
            | "GBP"
            | "GEL"
            | "GGP"
            | "GHS"
            | "GIP"
            | "GMD"
            | "GNF"
            | "GTQ"
            | "GYD"
            | "HKD"
            | "HNL"
            | "HRK"
            | "HTG"
            | "HUF"
            | "IDR"
            | "ILS"
            | "IMP"
            | "INR"
            | "IQD"
            | "IRR"
            | "ISK"
            | "JEP"
            | "JMD"
            | "JOD"
            | "JPY"
            | "KES"
            | "KGS"
            | "KHR"
            | "KMF"
            | "KPW"
            | "KRW"
            | "KWD"
            | "KYD"
            | "KZT"
            | "LAK"
            | "LBP"
            | "LKR"
            | "LRD"
            | "LSL"
            | "LYD"
            | "MAD"
            | "MDL"
            | "MGA"
            | "MKD"
            | "MMK"
            | "MNT"
            | "MOP"
            | "MRO"
            | "MUR"
            | "MVR"
            | "MWK"
            | "MXN"
            | "MYR"
            | "MZN"
            | "NAD"
            | "NGN"
            | "NIO"
            | "NOK"
            | "NPR"
            | "NZD"
            | "OMR"
            | "PAB"
            | "PEN"
            | "PGK"
            | "PHP"
            | "PKR"
            | "PLN"
            | "PYG"
            | "QAR"
            | "RON"
            | "RSD"
            | "RUB"
            | "RWF"
            | "SAR"
            | "SBD"
            | "SCR"
            | "SDG"
            | "SEK"
            | "SGD"
            | "SHP"
            | "SLL"
            | "SOS"
            | "SPL"
            | "SRD"
            | "STD"
            | "SVC"
            | "SYP"
            | "SZL"
            | "THB"
            | "TJS"
            | "TMT"
            | "TND"
            | "TOP"
            | "TRY"
            | "TTD"
            | "TVD"
            | "TWD"
            | "TZS"
            | "UAH"
            | "UGX"
            | "USD"
            | "UYU"
            | "UZS"
            | "VEF"
            | "VND"
            | "VUV"
            | "WST"
            | "XAF"
            | "XCD"
            | "XDR"
            | "XOF"
            | "XPF"
            | "XTS"
            | "XXX"
            | "YER"
            | "ZAR"
            | "ZMW"
            | "ZWD";
          /**
           * Amount
           * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           * @example 123.45
           */
          amount: string;
          /**
           * transferTransactionType
           * @description Type of transaction.
           * @enum {string}
           */
          transactionType: "TRANSFER";
          /**
           * Note
           * @description Memo assigned to transaction.
           * @example Note sent to Payee.
           */
          note?: string;
          /** @enum {string} */
          currentState?:
            | "ERROR_OCCURRED"
            | "WAITING_FOR_PARTY_ACCEPTANCE"
            | "WAITING_FOR_QUOTE_ACCEPTANCE"
            | "COMPLETED";
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          quoteId?: string;
          /**
           * QuotesIDPutResponse
           * @description The object sent in the PUT /quotes/{ID} callback.
           */
          quoteResponse?: {
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            transferAmount: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeReceiveAmount?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeFspFee?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            payeeFspCommission?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration: string;
            /**
             * GeoCode
             * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
             */
            geoCode?: {
              /**
               * Latitude
               * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +45.4215
               */
              latitude: string;
              /**
               * Longitude
               * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +75.6972
               */
              longitude: string;
            };
            /**
             * IlpPacket
             * @description Information for recipient (transport layer information).
             * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
             */
            ilpPacket: string;
            /**
             * IlpCondition
             * @description Condition that must be attached to the transfer by the Payer.
             */
            condition: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
          quoteResponseSource?: string;
          /**
           * TransfersIDPutResponse
           * @description The object sent in the PUT /transfers/{ID} callback.
           */
          fulfil?: {
            /**
             * IlpFulfilment
             * @description Fulfilment that must be attached to the transfer by the Payee.
             * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
             */
            fulfilment?: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            completedTimestamp?: string;
            /**
             * TransferState
             * @description Below are the allowed values for the enumeration.
             * - RECEIVED - Next ledger has received the transfer.
             * - RESERVED - Next ledger has reserved the transfer.
             * - COMMITTED - Next ledger has successfully performed the transfer.
             * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
             * @example RESERVED
             * @enum {string}
             */
            transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
          /** @description This object represents a Mojaloop API error received at any time during the transfer process */
          lastError?: {
            /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
            httpStatusCode?: number;
            /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
            mojaloopError?: {
              /**
               * ErrorInformation
               * @description Data model for the complex type ErrorInformation.
               */
              errorInformation?: {
                /**
                 * ErrorCode
                 * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                 * @example 5100
                 */
                errorCode: string;
                /**
                 * ErrorDescription
                 * @description Error description string.
                 */
                errorDescription: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
            };
          };
        };
      };
    };
    /** Malformed or missing required body, headers or parameters */
    requestToPayTransferBadRequest: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          transferState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transferId?: string;
            /** @description Transaction ID from the DFSP backend, used to reconcile transactions between the Switch and DFSP backend systems. */
            homeTransactionId: string;
            from: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            to: {
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              type?: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Name
               * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
               *
               * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
               *
               * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
               */
              displayName?: string;
              /**
               * FirstName
               * @description First name of the Party (Name Type).
               * @example Henrik
               */
              firstName?: string;
              /**
               * MiddleName
               * @description Middle name of the Party (Name Type).
               * @example Johannes
               */
              middleName?: string;
              /**
               * LastName
               * @description Last name of the Party (Name Type).
               * @example Karlsson
               */
              lastName?: string;
              /**
               * DateofBirth (type Date)
               * @description Date of Birth of the Party.
               * @example 1966-06-16
               */
              dateOfBirth?: string;
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * FspId
               * @description FSP identifier.
               */
              fspId?: string;
              extensionList?: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
            /**
             * Amount
             * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
             * @example 123.45
             */
            amount: string;
            /**
             * transferTransactionType
             * @description Type of transaction.
             * @enum {string}
             */
            transactionType: "TRANSFER";
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
            /** @enum {string} */
            currentState?:
              | "ERROR_OCCURRED"
              | "WAITING_FOR_PARTY_ACCEPTANCE"
              | "WAITING_FOR_QUOTE_ACCEPTANCE"
              | "COMPLETED";
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId?: string;
            getPartiesResponse?: {
              body: { [key: string]: unknown };
              headers?: { [key: string]: unknown };
            };
            quoteResponse?: {
              /**
               * QuotesIDPutResponse
               * @description The object sent in the PUT /quotes/{ID} callback.
               */
              body: {
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration: string;
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description FSPID of the entity that supplied the quote response. This may not be the same as the FSPID of the entity which owns the end user account in the case of a FOREX transfer. i.e. it may be a FOREX gateway. */
            quoteResponseSource?: string;
            fulfil?: {
              /**
               * TransfersIDPutResponse
               * @description The object sent in the PUT /transfers/{ID} callback.
               */
              body: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                transferState:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers?: { [key: string]: unknown };
            };
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
            /** @description Set to true if supplying an FSPID for the payee party and no party resolution is needed. This may be useful is a previous party resolution has been performed. */
            skipPartyLookup?: boolean;
          };
        };
      };
    };
    /** Accounts creation completed */
    accountsCreationCompleted: {
      content: {
        "application/json": {
          /**
           * CorrelationId
           * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           * @example b51ec534-ee48-4575-b6a9-ead2955b8069
           */
          modelId?: string;
          accounts: {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            /**
             * Currency
             * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             * @enum {string}
             */
            currency:
              | "AED"
              | "AFN"
              | "ALL"
              | "AMD"
              | "ANG"
              | "AOA"
              | "ARS"
              | "AUD"
              | "AWG"
              | "AZN"
              | "BAM"
              | "BBD"
              | "BDT"
              | "BGN"
              | "BHD"
              | "BIF"
              | "BMD"
              | "BND"
              | "BOB"
              | "BRL"
              | "BSD"
              | "BTN"
              | "BWP"
              | "BYN"
              | "BZD"
              | "CAD"
              | "CDF"
              | "CHF"
              | "CLP"
              | "CNY"
              | "COP"
              | "CRC"
              | "CUC"
              | "CUP"
              | "CVE"
              | "CZK"
              | "DJF"
              | "DKK"
              | "DOP"
              | "DZD"
              | "EGP"
              | "ERN"
              | "ETB"
              | "EUR"
              | "FJD"
              | "FKP"
              | "GBP"
              | "GEL"
              | "GGP"
              | "GHS"
              | "GIP"
              | "GMD"
              | "GNF"
              | "GTQ"
              | "GYD"
              | "HKD"
              | "HNL"
              | "HRK"
              | "HTG"
              | "HUF"
              | "IDR"
              | "ILS"
              | "IMP"
              | "INR"
              | "IQD"
              | "IRR"
              | "ISK"
              | "JEP"
              | "JMD"
              | "JOD"
              | "JPY"
              | "KES"
              | "KGS"
              | "KHR"
              | "KMF"
              | "KPW"
              | "KRW"
              | "KWD"
              | "KYD"
              | "KZT"
              | "LAK"
              | "LBP"
              | "LKR"
              | "LRD"
              | "LSL"
              | "LYD"
              | "MAD"
              | "MDL"
              | "MGA"
              | "MKD"
              | "MMK"
              | "MNT"
              | "MOP"
              | "MRO"
              | "MUR"
              | "MVR"
              | "MWK"
              | "MXN"
              | "MYR"
              | "MZN"
              | "NAD"
              | "NGN"
              | "NIO"
              | "NOK"
              | "NPR"
              | "NZD"
              | "OMR"
              | "PAB"
              | "PEN"
              | "PGK"
              | "PHP"
              | "PKR"
              | "PLN"
              | "PYG"
              | "QAR"
              | "RON"
              | "RSD"
              | "RUB"
              | "RWF"
              | "SAR"
              | "SBD"
              | "SCR"
              | "SDG"
              | "SEK"
              | "SGD"
              | "SHP"
              | "SLL"
              | "SOS"
              | "SPL"
              | "SRD"
              | "STD"
              | "SVC"
              | "SYP"
              | "SZL"
              | "THB"
              | "TJS"
              | "TMT"
              | "TND"
              | "TOP"
              | "TRY"
              | "TTD"
              | "TVD"
              | "TWD"
              | "TZS"
              | "UAH"
              | "UGX"
              | "USD"
              | "UYU"
              | "UZS"
              | "VEF"
              | "VND"
              | "VUV"
              | "WST"
              | "XAF"
              | "XCD"
              | "XDR"
              | "XOF"
              | "XPF"
              | "XTS"
              | "XXX"
              | "YER"
              | "ZAR"
              | "ZMW"
              | "ZWD";
          }[];
          response?: {
            /**
             * PartyIdType
             * @description Below are the allowed values for the enumeration.
             * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
             * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
             * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
             * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
             * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
             * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
             * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
             * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
             * @enum {string}
             */
            idType:
              | "MSISDN"
              | "EMAIL"
              | "PERSONAL_ID"
              | "BUSINESS"
              | "DEVICE"
              | "ACCOUNT_ID"
              | "IBAN"
              | "ALIAS";
            /**
             * PartyIdentifier
             * @description Identifier of the Party.
             * @example 16135551212
             */
            idValue: string;
            /**
             * PartySubIdOrType
             * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
             */
            idSubValue?: string;
            error?: {
              /** @description Error code as string. */
              statusCode?: string;
              /** @description Error message text. */
              message?: string;
            };
          }[];
          /** @enum {string} */
          currentState?: "ERROR_OCCURRED" | "COMPLETED";
          /** @description This object represents a Mojaloop API error received at any time during the transfer process */
          lastError?: {
            /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
            httpStatusCode?: number;
            /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
            mojaloopError?: {
              /**
               * ErrorInformation
               * @description Data model for the complex type ErrorInformation.
               */
              errorInformation?: {
                /**
                 * ErrorCode
                 * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                 * @example 5100
                 */
                errorCode: string;
                /**
                 * ErrorDescription
                 * @description Error description string.
                 */
                errorDescription: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
            };
          };
          postAccountsResponse?: {
            body: { [key: string]: unknown };
            headers?: { [key: string]: unknown };
          };
        };
      };
    };
    /** An error occurred creating accounts */
    accountsCreationError: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          executionState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            modelId?: string;
            accounts: {
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
            }[];
            response?: {
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              error?: {
                /** @description Error code as string. */
                statusCode?: string;
                /** @description Error message text. */
                message?: string;
              };
            }[];
            /** @enum {string} */
            currentState?: "ERROR_OCCURRED" | "COMPLETED";
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
            postAccountsResponse?: {
              body: { [key: string]: unknown };
              headers?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /** Timeout occurred creating accounts */
    accountsCreationTimeout: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & {
          executionState: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            modelId?: string;
            accounts: {
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
            }[];
            response?: {
              /**
               * PartyIdType
               * @description Below are the allowed values for the enumeration.
               * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
               * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
               * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
               * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
               * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
               * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
               * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
               * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
               * @enum {string}
               */
              idType:
                | "MSISDN"
                | "EMAIL"
                | "PERSONAL_ID"
                | "BUSINESS"
                | "DEVICE"
                | "ACCOUNT_ID"
                | "IBAN"
                | "ALIAS";
              /**
               * PartyIdentifier
               * @description Identifier of the Party.
               * @example 16135551212
               */
              idValue: string;
              /**
               * PartySubIdOrType
               * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
               */
              idSubValue?: string;
              error?: {
                /** @description Error code as string. */
                statusCode?: string;
                /** @description Error message text. */
                message?: string;
              };
            }[];
            /** @enum {string} */
            currentState?: "ERROR_OCCURRED" | "COMPLETED";
            /** @description This object represents a Mojaloop API error received at any time during the transfer process */
            lastError?: {
              /** @description The HTTP status code returned to the caller. This is the same as the actual HTTP status code returned with the response. */
              httpStatusCode?: number;
              /** @description If a transfer process results in an error callback during the asynchronous Mojaloop API exchange, this property will contain the underlying Mojaloop API error object. */
              mojaloopError?: {
                /**
                 * ErrorInformation
                 * @description Data model for the complex type ErrorInformation.
                 */
                errorInformation?: {
                  /**
                   * ErrorCode
                   * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
                   * @example 5100
                   */
                  errorCode: string;
                  /**
                   * ErrorDescription
                   * @description Error description string.
                   */
                  errorDescription: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
              };
            };
            postAccountsResponse?: {
              body: { [key: string]: unknown };
              headers?: { [key: string]: unknown };
            };
          };
        };
      };
    };
    /** PartiesByIdSuccess */
    partiesByIdSuccess: {
      content: {
        "application/json": {
          party: {
            /**
             * Party
             * @description Data model for the complex type Party.
             */
            body: {
              /**
               * PartyIdInfo
               * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
               */
              partyIdInfo: {
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                partyIdType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                partyIdentifier: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                partySubIdOrType?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * PartyName
               * @description Name of the Party. Could be a real name or a nickname.
               */
              name?: string;
              /**
               * PartyPersonalInfo
               * @description Data model for the complex type PartyPersonalInfo.
               */
              personalInfo?: {
                /**
                 * PartyComplexName
                 * @description Data model for the complex type PartyComplexName.
                 */
                complexName?: {
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                };
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
              };
            };
            headers: { [key: string]: unknown };
          };
          /** @enum {string} */
          currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
        };
      };
    };
    /** PartiesByIdError404 */
    partiesByIdError404: {
      content: {
        "application/json": {
          /**
           * ErrorInformation
           * @description Data model for the complex type ErrorInformation.
           */
          errorInformation?: {
            /**
             * ErrorCode
             * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
             * @example 5100
             */
            errorCode: string;
            /**
             * ErrorDescription
             * @description Error description string.
             */
            errorDescription: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
    /** sync response from POST /quotes */
    quotesPostSuccess: {
      content: {
        "application/json": {
          /**
           * QuotesIDPutResponse
           * @description The object sent in the PUT /quotes/{ID} callback.
           */
          quotes: {
            body: {
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              transferAmount: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeReceiveAmount?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspFee?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * Money
               * @description Data model for the complex type Money.
               */
              payeeFspCommission?: {
                /**
                 * Currency
                 * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                 * @enum {string}
                 */
                currency:
                  | "AED"
                  | "AFN"
                  | "ALL"
                  | "AMD"
                  | "ANG"
                  | "AOA"
                  | "ARS"
                  | "AUD"
                  | "AWG"
                  | "AZN"
                  | "BAM"
                  | "BBD"
                  | "BDT"
                  | "BGN"
                  | "BHD"
                  | "BIF"
                  | "BMD"
                  | "BND"
                  | "BOB"
                  | "BRL"
                  | "BSD"
                  | "BTN"
                  | "BWP"
                  | "BYN"
                  | "BZD"
                  | "CAD"
                  | "CDF"
                  | "CHF"
                  | "CLP"
                  | "CNY"
                  | "COP"
                  | "CRC"
                  | "CUC"
                  | "CUP"
                  | "CVE"
                  | "CZK"
                  | "DJF"
                  | "DKK"
                  | "DOP"
                  | "DZD"
                  | "EGP"
                  | "ERN"
                  | "ETB"
                  | "EUR"
                  | "FJD"
                  | "FKP"
                  | "GBP"
                  | "GEL"
                  | "GGP"
                  | "GHS"
                  | "GIP"
                  | "GMD"
                  | "GNF"
                  | "GTQ"
                  | "GYD"
                  | "HKD"
                  | "HNL"
                  | "HRK"
                  | "HTG"
                  | "HUF"
                  | "IDR"
                  | "ILS"
                  | "IMP"
                  | "INR"
                  | "IQD"
                  | "IRR"
                  | "ISK"
                  | "JEP"
                  | "JMD"
                  | "JOD"
                  | "JPY"
                  | "KES"
                  | "KGS"
                  | "KHR"
                  | "KMF"
                  | "KPW"
                  | "KRW"
                  | "KWD"
                  | "KYD"
                  | "KZT"
                  | "LAK"
                  | "LBP"
                  | "LKR"
                  | "LRD"
                  | "LSL"
                  | "LYD"
                  | "MAD"
                  | "MDL"
                  | "MGA"
                  | "MKD"
                  | "MMK"
                  | "MNT"
                  | "MOP"
                  | "MRO"
                  | "MUR"
                  | "MVR"
                  | "MWK"
                  | "MXN"
                  | "MYR"
                  | "MZN"
                  | "NAD"
                  | "NGN"
                  | "NIO"
                  | "NOK"
                  | "NPR"
                  | "NZD"
                  | "OMR"
                  | "PAB"
                  | "PEN"
                  | "PGK"
                  | "PHP"
                  | "PKR"
                  | "PLN"
                  | "PYG"
                  | "QAR"
                  | "RON"
                  | "RSD"
                  | "RUB"
                  | "RWF"
                  | "SAR"
                  | "SBD"
                  | "SCR"
                  | "SDG"
                  | "SEK"
                  | "SGD"
                  | "SHP"
                  | "SLL"
                  | "SOS"
                  | "SPL"
                  | "SRD"
                  | "STD"
                  | "SVC"
                  | "SYP"
                  | "SZL"
                  | "THB"
                  | "TJS"
                  | "TMT"
                  | "TND"
                  | "TOP"
                  | "TRY"
                  | "TTD"
                  | "TVD"
                  | "TWD"
                  | "TZS"
                  | "UAH"
                  | "UGX"
                  | "USD"
                  | "UYU"
                  | "UZS"
                  | "VEF"
                  | "VND"
                  | "VUV"
                  | "WST"
                  | "XAF"
                  | "XCD"
                  | "XDR"
                  | "XOF"
                  | "XPF"
                  | "XTS"
                  | "XXX"
                  | "YER"
                  | "ZAR"
                  | "ZMW"
                  | "ZWD";
                /**
                 * Amount
                 * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                 * @example 123.45
                 */
                amount: string;
              };
              /**
               * @description Date and time until when the quotation is valid and can be honored when used in the subsequent transaction.
               * @example 2016-05-24T08:38:08.699-04:00
               */
              expiration: string;
              /**
               * GeoCode
               * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
               */
              geoCode?: {
                /**
                 * Latitude
                 * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +45.4215
                 */
                latitude: string;
                /**
                 * Longitude
                 * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                 * @example +75.6972
                 */
                longitude: string;
              };
              /**
               * IlpPacket
               * @description Information for recipient (transport layer information).
               * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
               */
              ilpPacket: string;
              /**
               * IlpCondition
               * @description Condition that must be attached to the transfer by the Payer.
               */
              condition: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
            headers: { [key: string]: unknown };
          };
          /** @enum {string} */
          currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
        };
      };
    };
    /** An error occurred processing the quotes request */
    quotesServerError: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & { [key: string]: unknown };
      };
    };
    /** sync response from POST /simpleTransfers */
    simpleTransfersPostSuccess: {
      content: {
        "application/json": {
          transfer: {
            /**
             * TransfersIDPutResponse
             * @description The object sent in the PUT /transfers/{ID} callback.
             */
            body: {
              /**
               * IlpFulfilment
               * @description Fulfilment that must be attached to the transfer by the Payee.
               * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
               */
              fulfilment?: string;
              /**
               * DateTime
               * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
               * @example 2016-05-24T08:38:08.699-04:00
               */
              completedTimestamp?: string;
              /**
               * TransferState
               * @description Below are the allowed values for the enumeration.
               * - RECEIVED - Next ledger has received the transfer.
               * - RESERVED - Next ledger has reserved the transfer.
               * - COMMITTED - Next ledger has successfully performed the transfer.
               * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
               * @example RESERVED
               * @enum {string}
               */
              transferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
            headers: { [key: string]: unknown };
          };
          /** @enum {string} */
          currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
        };
      };
    };
    /** An error occurred processing the simple transfers request */
    simpleTransfersServerError: {
      content: {
        "application/json": {
          /** @description Error code as string. */
          statusCode?: string;
          /** @description Error message text. */
          message?: string;
        } & { [key: string]: unknown };
      };
    };
  };
  parameters: {
    /** @description Identifier of the transfer to continue as returned in the response to a `POST /transfers` request. */
    transferId: string;
    /** @description Identifier of the bulk transaction to continue as returned in the response to a `POST /bulkTransaction` request. */
    bulkTransactionId: string;
    /** @description Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request. */
    bulkTransferId: string;
    /** @description Identifier of the bulk transfer to continue as returned in the response to a `POST /bulkTransfers` request. */
    bulkQuoteId: string;
    /** @description Identifier of the merchant request to pay transfer to continue as returned in the response to a `POST /requestToPayTransfer` request. */
    requestToPayTransactionId: string;
    /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
    Type: string;
    /** @description The identifier value. */
    ID: string;
    /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
    SubId: string;
  };
}

export interface operations {
  /** The HTTP request GET /parties// (or GET /parties///) is used to lookup information regarding the requested Party, defined by ,  and optionally (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1). */
  PartiesByTypeAndID: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** The identifier value. */
        ID: string;
      };
    };
    responses: {
      /** PartiesByIdSuccess */
      200: {
        content: {
          "application/json": {
            party: {
              /**
               * Party
               * @description Data model for the complex type Party.
               */
              body: {
                /**
                 * PartyIdInfo
                 * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
                 */
                partyIdInfo: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  partyIdType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  partyIdentifier: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  partySubIdOrType?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * PartyName
                 * @description Name of the Party. Could be a real name or a nickname.
                 */
                name?: string;
                /**
                 * PartyPersonalInfo
                 * @description Data model for the complex type PartyPersonalInfo.
                 */
                personalInfo?: {
                  /**
                   * PartyComplexName
                   * @description Data model for the complex type PartyComplexName.
                   */
                  complexName?: {
                    /**
                     * FirstName
                     * @description First name of the Party (Name Type).
                     * @example Henrik
                     */
                    firstName?: string;
                    /**
                     * MiddleName
                     * @description Middle name of the Party (Name Type).
                     * @example Johannes
                     */
                    middleName?: string;
                    /**
                     * LastName
                     * @description Last name of the Party (Name Type).
                     * @example Karlsson
                     */
                    lastName?: string;
                  };
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                };
              };
              headers: { [key: string]: unknown };
            };
            /** @enum {string} */
            currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
          };
        };
      };
      /** PartiesByIdError404 */
      404: {
        content: {
          "application/json": {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
      };
    };
  };
  /** The HTTP request GET /parties// (or GET /parties///) is used to lookup information regarding the requested Party, defined by ,  and optionally (for example, GET /parties/MSISDN/123456789, or GET /parties/BUSINESS/shoecompany/employee1). */
  PartiesSubIdByTypeAndID: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** The identifier value. */
        ID: string;
        /** A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
        SubId: string;
      };
    };
    responses: {
      /** PartiesByIdSuccess */
      200: {
        content: {
          "application/json": {
            party: {
              /**
               * Party
               * @description Data model for the complex type Party.
               */
              body: {
                /**
                 * PartyIdInfo
                 * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
                 */
                partyIdInfo: {
                  /**
                   * PartyIdType
                   * @description Below are the allowed values for the enumeration.
                   * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                   * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                   * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                   * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                   * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                   * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                   * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                   * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                   * @enum {string}
                   */
                  partyIdType:
                    | "MSISDN"
                    | "EMAIL"
                    | "PERSONAL_ID"
                    | "BUSINESS"
                    | "DEVICE"
                    | "ACCOUNT_ID"
                    | "IBAN"
                    | "ALIAS";
                  /**
                   * PartyIdentifier
                   * @description Identifier of the Party.
                   * @example 16135551212
                   */
                  partyIdentifier: string;
                  /**
                   * PartySubIdOrType
                   * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                   */
                  partySubIdOrType?: string;
                  /**
                   * FspId
                   * @description FSP identifier.
                   */
                  fspId?: string;
                  /**
                   * ExtensionList
                   * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                   */
                  extensionList?: {
                    /** @description Number of Extension elements. */
                    extension: {
                      /**
                       * ExtensionKey
                       * @description Extension key.
                       */
                      key: string;
                      /**
                       * ExtensionValue
                       * @description Extension value.
                       */
                      value: string;
                    }[];
                  };
                };
                /**
                 * MerchantClassificationCode
                 * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
                 */
                merchantClassificationCode?: string;
                /**
                 * PartyName
                 * @description Name of the Party. Could be a real name or a nickname.
                 */
                name?: string;
                /**
                 * PartyPersonalInfo
                 * @description Data model for the complex type PartyPersonalInfo.
                 */
                personalInfo?: {
                  /**
                   * PartyComplexName
                   * @description Data model for the complex type PartyComplexName.
                   */
                  complexName?: {
                    /**
                     * FirstName
                     * @description First name of the Party (Name Type).
                     * @example Henrik
                     */
                    firstName?: string;
                    /**
                     * MiddleName
                     * @description Middle name of the Party (Name Type).
                     * @example Johannes
                     */
                    middleName?: string;
                    /**
                     * LastName
                     * @description Last name of the Party (Name Type).
                     * @example Karlsson
                     */
                    lastName?: string;
                  };
                  /**
                   * DateofBirth (type Date)
                   * @description Date of Birth of the Party.
                   * @example 1966-06-16
                   */
                  dateOfBirth?: string;
                };
              };
              headers: { [key: string]: unknown };
            };
            /** @enum {string} */
            currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
          };
        };
      };
      /** PartiesByIdError404 */
      404: {
        content: {
          "application/json": {
            /**
             * ErrorInformation
             * @description Data model for the complex type ErrorInformation.
             */
            errorInformation?: {
              /**
               * ErrorCode
               * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
               * @example 5100
               */
              errorCode: string;
              /**
               * ErrorDescription
               * @description Error description string.
               */
              errorDescription: string;
              /**
               * ExtensionList
               * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
               */
              extensionList?: {
                /** @description Number of Extension elements. */
                extension: {
                  /**
                   * ExtensionKey
                   * @description Extension key.
                   */
                  key: string;
                  /**
                   * ExtensionValue
                   * @description Extension value.
                   */
                  value: string;
                }[];
              };
            };
          };
        };
      };
    };
  };
  /** is used to request quotes from other DFSP */
  QuotesPost: {
    responses: {
      /** sync response from POST /quotes */
      200: {
        content: {
          "application/json": {
            /**
             * QuotesIDPutResponse
             * @description The object sent in the PUT /quotes/{ID} callback.
             */
            quotes: {
              body: {
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                transferAmount: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeReceiveAmount?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspFee?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * Money
                 * @description Data model for the complex type Money.
                 */
                payeeFspCommission?: {
                  /**
                   * Currency
                   * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
                   * @enum {string}
                   */
                  currency:
                    | "AED"
                    | "AFN"
                    | "ALL"
                    | "AMD"
                    | "ANG"
                    | "AOA"
                    | "ARS"
                    | "AUD"
                    | "AWG"
                    | "AZN"
                    | "BAM"
                    | "BBD"
                    | "BDT"
                    | "BGN"
                    | "BHD"
                    | "BIF"
                    | "BMD"
                    | "BND"
                    | "BOB"
                    | "BRL"
                    | "BSD"
                    | "BTN"
                    | "BWP"
                    | "BYN"
                    | "BZD"
                    | "CAD"
                    | "CDF"
                    | "CHF"
                    | "CLP"
                    | "CNY"
                    | "COP"
                    | "CRC"
                    | "CUC"
                    | "CUP"
                    | "CVE"
                    | "CZK"
                    | "DJF"
                    | "DKK"
                    | "DOP"
                    | "DZD"
                    | "EGP"
                    | "ERN"
                    | "ETB"
                    | "EUR"
                    | "FJD"
                    | "FKP"
                    | "GBP"
                    | "GEL"
                    | "GGP"
                    | "GHS"
                    | "GIP"
                    | "GMD"
                    | "GNF"
                    | "GTQ"
                    | "GYD"
                    | "HKD"
                    | "HNL"
                    | "HRK"
                    | "HTG"
                    | "HUF"
                    | "IDR"
                    | "ILS"
                    | "IMP"
                    | "INR"
                    | "IQD"
                    | "IRR"
                    | "ISK"
                    | "JEP"
                    | "JMD"
                    | "JOD"
                    | "JPY"
                    | "KES"
                    | "KGS"
                    | "KHR"
                    | "KMF"
                    | "KPW"
                    | "KRW"
                    | "KWD"
                    | "KYD"
                    | "KZT"
                    | "LAK"
                    | "LBP"
                    | "LKR"
                    | "LRD"
                    | "LSL"
                    | "LYD"
                    | "MAD"
                    | "MDL"
                    | "MGA"
                    | "MKD"
                    | "MMK"
                    | "MNT"
                    | "MOP"
                    | "MRO"
                    | "MUR"
                    | "MVR"
                    | "MWK"
                    | "MXN"
                    | "MYR"
                    | "MZN"
                    | "NAD"
                    | "NGN"
                    | "NIO"
                    | "NOK"
                    | "NPR"
                    | "NZD"
                    | "OMR"
                    | "PAB"
                    | "PEN"
                    | "PGK"
                    | "PHP"
                    | "PKR"
                    | "PLN"
                    | "PYG"
                    | "QAR"
                    | "RON"
                    | "RSD"
                    | "RUB"
                    | "RWF"
                    | "SAR"
                    | "SBD"
                    | "SCR"
                    | "SDG"
                    | "SEK"
                    | "SGD"
                    | "SHP"
                    | "SLL"
                    | "SOS"
                    | "SPL"
                    | "SRD"
                    | "STD"
                    | "SVC"
                    | "SYP"
                    | "SZL"
                    | "THB"
                    | "TJS"
                    | "TMT"
                    | "TND"
                    | "TOP"
                    | "TRY"
                    | "TTD"
                    | "TVD"
                    | "TWD"
                    | "TZS"
                    | "UAH"
                    | "UGX"
                    | "USD"
                    | "UYU"
                    | "UZS"
                    | "VEF"
                    | "VND"
                    | "VUV"
                    | "WST"
                    | "XAF"
                    | "XCD"
                    | "XDR"
                    | "XOF"
                    | "XPF"
                    | "XTS"
                    | "XXX"
                    | "YER"
                    | "ZAR"
                    | "ZMW"
                    | "ZWD";
                  /**
                   * Amount
                   * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
                   * @example 123.45
                   */
                  amount: string;
                };
                /**
                 * @description Date and time until when the quotation is valid and can be honored when used in the subsequent transaction.
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                expiration: string;
                /**
                 * GeoCode
                 * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
                 */
                geoCode?: {
                  /**
                   * Latitude
                   * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +45.4215
                   */
                  latitude: string;
                  /**
                   * Longitude
                   * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
                   * @example +75.6972
                   */
                  longitude: string;
                };
                /**
                 * IlpPacket
                 * @description Information for recipient (transport layer information).
                 * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                 */
                ilpPacket: string;
                /**
                 * IlpCondition
                 * @description Condition that must be attached to the transfer by the Payer.
                 */
                condition: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers: { [key: string]: unknown };
            };
            /** @enum {string} */
            currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
          };
        };
      };
      /** An error occurred processing the quotes request */
      500: {
        content: {
          "application/json": {
            /** @description Error code as string. */
            statusCode?: string;
            /** @description Error message text. */
            message?: string;
          } & { [key: string]: unknown };
        };
      };
    };
    /** Quotes request payload */
    requestBody: {
      content: {
        "application/json": {
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId: string;
          /**
           * QuotesPostRequest
           * @description The object sent in the POST /quotes request.
           */
          quotesPostRequest: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId: string;
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transactionId: string;
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transactionRequestId?: string;
            /**
             * Party
             * @description Data model for the complex type Party.
             */
            payee: {
              /**
               * PartyIdInfo
               * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
               */
              partyIdInfo: {
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                partyIdType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                partyIdentifier: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                partySubIdOrType?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * PartyName
               * @description Name of the Party. Could be a real name or a nickname.
               */
              name?: string;
              /**
               * PartyPersonalInfo
               * @description Data model for the complex type PartyPersonalInfo.
               */
              personalInfo?: {
                /**
                 * PartyComplexName
                 * @description Data model for the complex type PartyComplexName.
                 */
                complexName?: {
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                };
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
              };
            };
            /**
             * Party
             * @description Data model for the complex type Party.
             */
            payer: {
              /**
               * PartyIdInfo
               * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
               */
              partyIdInfo: {
                /**
                 * PartyIdType
                 * @description Below are the allowed values for the enumeration.
                 * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
                 * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
                 * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
                 * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
                 * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
                 * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
                 * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
                 * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
                 * @enum {string}
                 */
                partyIdType:
                  | "MSISDN"
                  | "EMAIL"
                  | "PERSONAL_ID"
                  | "BUSINESS"
                  | "DEVICE"
                  | "ACCOUNT_ID"
                  | "IBAN"
                  | "ALIAS";
                /**
                 * PartyIdentifier
                 * @description Identifier of the Party.
                 * @example 16135551212
                 */
                partyIdentifier: string;
                /**
                 * PartySubIdOrType
                 * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
                 */
                partySubIdOrType?: string;
                /**
                 * FspId
                 * @description FSP identifier.
                 */
                fspId?: string;
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              /**
               * MerchantClassificationCode
               * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
               */
              merchantClassificationCode?: string;
              /**
               * PartyName
               * @description Name of the Party. Could be a real name or a nickname.
               */
              name?: string;
              /**
               * PartyPersonalInfo
               * @description Data model for the complex type PartyPersonalInfo.
               */
              personalInfo?: {
                /**
                 * PartyComplexName
                 * @description Data model for the complex type PartyComplexName.
                 */
                complexName?: {
                  /**
                   * FirstName
                   * @description First name of the Party (Name Type).
                   * @example Henrik
                   */
                  firstName?: string;
                  /**
                   * MiddleName
                   * @description Middle name of the Party (Name Type).
                   * @example Johannes
                   */
                  middleName?: string;
                  /**
                   * LastName
                   * @description Last name of the Party (Name Type).
                   * @example Karlsson
                   */
                  lastName?: string;
                };
                /**
                 * DateofBirth (type Date)
                 * @description Date of Birth of the Party.
                 * @example 1966-06-16
                 */
                dateOfBirth?: string;
              };
            };
            /**
             * AmountType
             * @description Below are the allowed values for the enumeration AmountType.
             * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
             * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
             * @example RECEIVE
             * @enum {string}
             */
            amountType: "SEND" | "RECEIVE";
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            amount: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            fees?: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * TransactionType
             * @description Data model for the complex type TransactionType.
             */
            transactionType: {
              /**
               * TransactionScenario
               * @description Below are the allowed values for the enumeration.
               * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
               * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
               * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
               * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
               * - REFUND - Used for performing a refund of transaction.
               * @example DEPOSIT
               * @enum {string}
               */
              scenario:
                | "DEPOSIT"
                | "WITHDRAWAL"
                | "TRANSFER"
                | "PAYMENT"
                | "REFUND";
              /**
               * TransactionSubScenario
               * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
               * @example LOCALLY_DEFINED_SUBSCENARIO
               */
              subScenario?: string;
              /**
               * TransactionInitiator
               * @description Below are the allowed values for the enumeration.
               * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
               * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
               * @example PAYEE
               * @enum {string}
               */
              initiator: "PAYER" | "PAYEE";
              /**
               * TransactionInitiatorType
               * @description Below are the allowed values for the enumeration.
               * - CONSUMER - Consumer is the initiator of the transaction.
               * - AGENT - Agent is the initiator of the transaction.
               * - BUSINESS - Business is the initiator of the transaction.
               * - DEVICE - Device is the initiator of the transaction.
               * @example CONSUMER
               * @enum {string}
               */
              initiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
              /**
               * Refund
               * @description Data model for the complex type Refund.
               */
              refundInfo?: {
                /**
                 * CorrelationId
                 * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
                 * @example b51ec534-ee48-4575-b6a9-ead2955b8069
                 */
                originalTransactionId: string;
                /**
                 * RefundReason
                 * @description Reason for the refund.
                 * @example Free text indicating reason for the refund.
                 */
                refundReason?: string;
              };
              /**
               * BalanceOfPayments
               * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
               * @example 123
               */
              balanceOfPayments?: string;
            };
            /**
             * GeoCode
             * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
             */
            geoCode?: {
              /**
               * Latitude
               * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +45.4215
               */
              latitude: string;
              /**
               * Longitude
               * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
               * @example +75.6972
               */
              longitude: string;
            };
            /**
             * Note
             * @description Memo assigned to transaction.
             * @example Note sent to Payee.
             */
            note?: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration?: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
  };
  /** is used to request a transfer */
  SimpleTransfersPost: {
    responses: {
      /** sync response from POST /simpleTransfers */
      200: {
        content: {
          "application/json": {
            transfer: {
              /**
               * TransfersIDPutResponse
               * @description The object sent in the PUT /transfers/{ID} callback.
               */
              body: {
                /**
                 * IlpFulfilment
                 * @description Fulfilment that must be attached to the transfer by the Payee.
                 * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                 */
                fulfilment?: string;
                /**
                 * DateTime
                 * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
                 * @example 2016-05-24T08:38:08.699-04:00
                 */
                completedTimestamp?: string;
                /**
                 * TransferState
                 * @description Below are the allowed values for the enumeration.
                 * - RECEIVED - Next ledger has received the transfer.
                 * - RESERVED - Next ledger has reserved the transfer.
                 * - COMMITTED - Next ledger has successfully performed the transfer.
                 * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
                 * @example RESERVED
                 * @enum {string}
                 */
                transferState:
                  | "RECEIVED"
                  | "RESERVED"
                  | "COMMITTED"
                  | "ABORTED";
                /**
                 * ExtensionList
                 * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
                 */
                extensionList?: {
                  /** @description Number of Extension elements. */
                  extension: {
                    /**
                     * ExtensionKey
                     * @description Extension key.
                     */
                    key: string;
                    /**
                     * ExtensionValue
                     * @description Extension value.
                     */
                    value: string;
                  }[];
                };
              };
              headers: { [key: string]: unknown };
            };
            /** @enum {string} */
            currentState: "WAITING_FOR_ACTION" | "COMPLETED" | "ERROR_OCCURRED";
          };
        };
      };
      /** An error occurred processing the simple transfers request */
      500: {
        content: {
          "application/json": {
            /** @description Error code as string. */
            statusCode?: string;
            /** @description Error message text. */
            message?: string;
          } & { [key: string]: unknown };
        };
      };
    };
    /** Simple Transfer request payload */
    requestBody: {
      content: {
        "application/json": {
          /**
           * FspId
           * @description FSP identifier.
           */
          fspId: string;
          /**
           * TransfersPostRequest
           * @description The object sent in the POST /transfers request.
           */
          transfersPostRequest: {
            /**
             * CorrelationId
             * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            transferId: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            payeeFsp: string;
            /**
             * FspId
             * @description FSP identifier.
             */
            payerFsp: string;
            /**
             * Money
             * @description Data model for the complex type Money.
             */
            amount: {
              /**
               * Currency
               * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
               * @enum {string}
               */
              currency:
                | "AED"
                | "AFN"
                | "ALL"
                | "AMD"
                | "ANG"
                | "AOA"
                | "ARS"
                | "AUD"
                | "AWG"
                | "AZN"
                | "BAM"
                | "BBD"
                | "BDT"
                | "BGN"
                | "BHD"
                | "BIF"
                | "BMD"
                | "BND"
                | "BOB"
                | "BRL"
                | "BSD"
                | "BTN"
                | "BWP"
                | "BYN"
                | "BZD"
                | "CAD"
                | "CDF"
                | "CHF"
                | "CLP"
                | "CNY"
                | "COP"
                | "CRC"
                | "CUC"
                | "CUP"
                | "CVE"
                | "CZK"
                | "DJF"
                | "DKK"
                | "DOP"
                | "DZD"
                | "EGP"
                | "ERN"
                | "ETB"
                | "EUR"
                | "FJD"
                | "FKP"
                | "GBP"
                | "GEL"
                | "GGP"
                | "GHS"
                | "GIP"
                | "GMD"
                | "GNF"
                | "GTQ"
                | "GYD"
                | "HKD"
                | "HNL"
                | "HRK"
                | "HTG"
                | "HUF"
                | "IDR"
                | "ILS"
                | "IMP"
                | "INR"
                | "IQD"
                | "IRR"
                | "ISK"
                | "JEP"
                | "JMD"
                | "JOD"
                | "JPY"
                | "KES"
                | "KGS"
                | "KHR"
                | "KMF"
                | "KPW"
                | "KRW"
                | "KWD"
                | "KYD"
                | "KZT"
                | "LAK"
                | "LBP"
                | "LKR"
                | "LRD"
                | "LSL"
                | "LYD"
                | "MAD"
                | "MDL"
                | "MGA"
                | "MKD"
                | "MMK"
                | "MNT"
                | "MOP"
                | "MRO"
                | "MUR"
                | "MVR"
                | "MWK"
                | "MXN"
                | "MYR"
                | "MZN"
                | "NAD"
                | "NGN"
                | "NIO"
                | "NOK"
                | "NPR"
                | "NZD"
                | "OMR"
                | "PAB"
                | "PEN"
                | "PGK"
                | "PHP"
                | "PKR"
                | "PLN"
                | "PYG"
                | "QAR"
                | "RON"
                | "RSD"
                | "RUB"
                | "RWF"
                | "SAR"
                | "SBD"
                | "SCR"
                | "SDG"
                | "SEK"
                | "SGD"
                | "SHP"
                | "SLL"
                | "SOS"
                | "SPL"
                | "SRD"
                | "STD"
                | "SVC"
                | "SYP"
                | "SZL"
                | "THB"
                | "TJS"
                | "TMT"
                | "TND"
                | "TOP"
                | "TRY"
                | "TTD"
                | "TVD"
                | "TWD"
                | "TZS"
                | "UAH"
                | "UGX"
                | "USD"
                | "UYU"
                | "UZS"
                | "VEF"
                | "VND"
                | "VUV"
                | "WST"
                | "XAF"
                | "XCD"
                | "XDR"
                | "XOF"
                | "XPF"
                | "XTS"
                | "XXX"
                | "YER"
                | "ZAR"
                | "ZMW"
                | "ZWD";
              /**
               * Amount
               * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
               * @example 123.45
               */
              amount: string;
            };
            /**
             * IlpPacket
             * @description Information for recipient (transport layer information).
             * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
             */
            ilpPacket: string;
            /**
             * IlpCondition
             * @description Condition that must be attached to the transfer by the Payer.
             */
            condition: string;
            /**
             * DateTime
             * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration: string;
            /**
             * ExtensionList
             * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
             */
            extensionList?: {
              /** @description Number of Extension elements. */
              extension: {
                /**
                 * ExtensionKey
                 * @description Extension key.
                 */
                key: string;
                /**
                 * ExtensionValue
                 * @description Extension value.
                 */
                value: string;
              }[];
            };
          };
        };
      };
    };
  };
}

export interface external {}
