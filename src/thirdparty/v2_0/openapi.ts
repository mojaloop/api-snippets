/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Essential path to include schema definitions that are not used so that these definitions get included into the openapi-cli bundle api definition so that they get converted into typescript definitions. */
        post: operations["test"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description The HTTP request GET /health is used to return the current status of the API.
         */
        get: operations["HealthGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus metrics endpoint
         * @description The HTTP request GET /metrics is used to return metrics for the API.
         */
        get: operations["MetricsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tppTransactionRequests": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * tppTransactionsPost
         * @description The `/tppTransactionRequests` resource is analogous to the `/transactionRequests` resource described fspiop API. The PISP uses it to request the owner of the PISP's customer's account to transfer a specified amount from the customer's account with the DFSP to a named Payee, or a request to pay request from a named payer into the customer's account.
         *
         */
        post: operations["tppTransactionsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tppTransactionRequests/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * GetThirdpartyTransactionRequests
         * @description The HTTP request `GET /tppTransactionRequests/{ID}` is used to request the
         *     retrieval of a third party transaction request.
         *
         */
        get: operations["GetThirdpartyTransactionRequests"];
        /**
         * tppUpdateTransactionRequests
         * @description The HTTP request `PUT /tppTransactionRequests/{ID}` is used by the DFSP to inform the client about
         *     the status of a previously requested thirdparty transaction request.
         *
         *     Switch(Thirdparty API Adapter) -> PISP
         *
         */
        put: operations["tppUpdateTransactionRequests"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tppTransactionRequests/{ID}/error": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * tppTransactionRequestsError
         * @description If the server is unable to find the transaction request, or another processing error occurs,
         *     the error callback `PUT /tppTransactionRequests/{ID}/error` is used.
         *     The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of
         *     the thirdparty transaction request.
         *
         */
        put: operations["tppTransactionRequestsError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tppTransfers": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * tppPostTransfers
         * @description The HTTP request POST `/tppTransfers` is used by a PISP to initiate a 3rd party Transaction request with a DFSP
         */
        post: operations["tppPostTransfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tppTransfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * tppGetTransfers
         * @description The HTTP request `GET /tppTransfers/{ID}` is used to request the
         *     retrieval of a third party transaction request.
         *
         */
        get: operations["tppGetTransfers"];
        /**
         * tppUpdateTransfersRequest
         * @description The HTTP request `PUT /tppTransfers/{ID}` is used by the DFSP to inform the client about
         *     the status of a previously requested thirdparty transaction request. The ID is the executionRequestId that was provided in the corresponding POST request.
         *
         *     Switch(Thirdparty API Adapter) -> PISP
         *
         */
        put: operations["tppUpdateTransfersRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tppTransfers/{ID}/error": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * tppTransfersRequestsError
         * @description If the server is unable to find the transaction request, or another processing error occurs,
         *     the error callback `PUT /tppTransfers/{ID}/error` is used.
         *     The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of
         *     the thirdparty transaction request.
         *
         */
        put: operations["tppTransfersRequestsError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         *     - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
         *     Number, that is, the phone number) is used as reference to a participant.
         *     The MSISDN identifier should be in international format according to the
         *     [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
         *     Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
         *     international prefix.
         *     - EMAIL - An email is used as reference to a
         *     participant. The format of the email should be according to the informational
         *     [RFC 3696](https://tools.ietf.org/html/rfc3696).
         *     - PERSONAL_ID - A personal identifier is used as reference to a participant.
         *     Examples of personal identification are passport number, birth certificate
         *     number, and national registration number. The identifier number is added in
         *     the PartyIdentifier element. The personal identifier type is added in the
         *     PartySubIdOrType element.
         *     - BUSINESS - A specific Business (for example, an organization or a company)
         *     is used as reference to a participant. The BUSINESS identifier can be in any
         *     format. To make a transaction connected to a specific username or bill number
         *     in a Business, the PartySubIdOrType element should be used.
         *     - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
         *     specific business or organization is used as reference to a Party.
         *     For referencing a specific device under a specific business or organization,
         *     use the PartySubIdOrType element.
         *     - ACCOUNT_ID - A bank account number or FSP account ID should be used as
         *     reference to a participant. The ACCOUNT_ID identifier can be in any format,
         *     as formats can greatly differ depending on country and FSP.
         *     - IBAN - A bank account number or FSP account ID is used as reference to a
         *     participant. The IBAN identifier can consist of up to 34 alphanumeric
         *     characters and should be entered without whitespace.
         *     - ALIAS An alias is used as reference to a participant. The alias should be
         *     created in the FSP as an alternative reference to an account owner.
         *     Another example of an alias is a username in the FSP system.
         *     The ALIAS identifier can be in any format. It is also possible to use the
         *     PartySubIdOrType element for identifying an account under an Alias defined
         *     by the PartyIdentifier.
         *     - CONSENT - A Consent represents an agreement between a PISP, a Customer and
         *     a DFSP which allows the PISP permission to perform actions on behalf of the
         *     customer. A Consent has an authoritative source: either the DFSP who issued
         *     the Consent, or an Auth Service which administers the Consent.
         *     - THIRD_PARTY_LINK - A Third Party Link represents an agreement between a PISP,
         *     a DFSP, and a specific Customer's account at the DFSP. The content of the link
         *     is created by the DFSP at the time when it gives permission to the PISP for
         *     specific access to a given account.
         *
         * @example PERSONAL_ID
         * @enum {string}
         */
        PartyIdType: "MSISDN" | "EMAIL" | "PERSONAL_ID" | "BUSINESS" | "DEVICE" | "ACCOUNT_ID" | "IBAN" | "ALIAS" | "CONSENT" | "THIRD_PARTY_LINK";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        PartyIdentifier: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        PartySubIdOrType: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        FspId: string;
        /**
         * ExtensionKey
         * @description Extension key.
         */
        ExtensionKey: string;
        /**
         * ExtensionValue
         * @description Extension value.
         */
        ExtensionValue: string;
        /**
         * Extension
         * @description Data model for the complex type Extension.
         */
        Extension: {
            key: components["schemas"]["ExtensionKey"];
            value: components["schemas"]["ExtensionValue"];
        };
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        ExtensionList: {
            /** @description Number of Extension elements. */
            extension: components["schemas"]["Extension"][];
        };
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo.
         */
        PartyIdInfo: {
            partyIdType: components["schemas"]["PartyIdType"];
            partyIdentifier: components["schemas"]["PartyIdentifier"];
            partySubIdOrType?: components["schemas"]["PartySubIdOrType"];
            fspId?: components["schemas"]["FspId"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ErrorCode
         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         * @example 5100
         */
        ErrorCode: string;
        /**
         * ErrorDescription
         * @description Error description string.
         */
        ErrorDescription: string;
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        ErrorInformation: {
            errorCode: components["schemas"]["ErrorCode"];
            errorDescription: components["schemas"]["ErrorDescription"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * PartyResult
         * @description Data model for the complex type PartyResult.
         */
        PartyResult: {
            partyId: components["schemas"]["PartyIdInfo"];
            errorInformation?: components["schemas"]["ErrorInformation"];
        };
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        Currency: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHF" | "CLP" | "CNY" | "COP" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GGP" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IMP" | "INR" | "IQD" | "IRR" | "ISK" | "JEP" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRO" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SLL" | "SOS" | "SPL" | "SRD" | "STD" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TVD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XTS" | "XXX" | "YER" | "ZAR" | "ZMW" | "ZWD";
        /**
         * ParticipantsIDPutResponse
         * @description The object sent in the PUT /participants/{ID} callback.
         */
        ParticipantsIDPutResponse: {
            /** @description List of PartyResult elements that were either created or failed to be created. */
            partyList: components["schemas"]["PartyResult"][];
            currency?: components["schemas"]["Currency"];
        };
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        MerchantClassificationCode: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        PartyName: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        FirstName: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        MiddleName: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        LastName: string;
        /**
         * PartyComplexName
         * @description Data model for the complex type PartyComplexName.
         */
        PartyComplexName: {
            firstName?: components["schemas"]["FirstName"];
            middleName?: components["schemas"]["MiddleName"];
            lastName?: components["schemas"]["LastName"];
        };
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        DateOfBirth: string;
        /**
         * KYCInformation
         * @description KYC information for the party in a form mandated by an individual scheme.
         * @example {
         *         "metadata": {
         *             "format": "JSON",
         *             "version": "1.0",
         *             "description": "Data containing KYC Information"
         *         },
         *         "data": {
         *             "name": "John Doe",
         *             "dob": "1980-05-15",
         *             "gender": "Male",
         *             "address": "123 Main Street, Anytown, USA",
         *             "email": "johndoe@example.com",
         *             "phone": "+1 555-123-4567",
         *             "nationality": "US",
         *             "passport_number": "AB1234567",
         *             "issue_date": "2010-02-20",
         *             "expiry_date": "2025-02-20",
         *             "bank_account_number": "1234567890",
         *             "bank_name": "Example Bank",
         *             "employer": "ABC Company",
         *             "occupation": "Software Engineer",
         *             "income": "$80,000 per year",
         *             "marital_status": "Single",
         *             "dependents": 0,
         *             "risk_level": "Low"
         *         }
         *     }
         */
        KYCInformation: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        PartyPersonalInfo: {
            complexName?: components["schemas"]["PartyComplexName"];
            dateOfBirth?: components["schemas"]["DateOfBirth"];
            kycInformation?: components["schemas"]["KYCInformation"];
        };
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        Party: {
            partyIdInfo: components["schemas"]["PartyIdInfo"];
            merchantClassificationCode?: components["schemas"]["MerchantClassificationCode"];
            name?: components["schemas"]["PartyName"];
            personalInfo?: components["schemas"]["PartyPersonalInfo"];
        };
        /**
         * PartiesTypeIDPutResponse
         * @description The object sent in the PUT /parties/{Type}/{ID} callback.
         *
         *     This is a variant based on FSPIOP `PartiesTypeIDPutResponse` specification.
         *     Main difference being that it returns a `Party` with the newly added
         *     `accounts` property.
         *
         */
        PartiesTypeIDPutResponse: {
            party: components["schemas"]["Party"];
        };
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        Amount: string;
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        Money: {
            currency: components["schemas"]["Currency"];
            amount: components["schemas"]["Amount"];
        };
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        DateTime: string;
        /**
         * Latitude
         * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +45.4215
         */
        Latitude: string;
        /**
         * Longitude
         * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +75.6972
         */
        Longitude: string;
        /**
         * GeoCode
         * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
         */
        GeoCode: {
            latitude: components["schemas"]["Latitude"];
            longitude: components["schemas"]["Longitude"];
        };
        /**
         * IlpPacket
         * @description Information for recipient (transport layer information).
         * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
         */
        IlpPacket: string;
        /**
         * IlpCondition
         * @description Condition that must be attached to the transfer by the Payer.
         */
        IlpCondition: string;
        /**
         * QuotesIDPutResponse
         * @description The object sent in the PUT /quotes/{ID} callback.
         */
        QuotesIDPutResponse: {
            transferAmount: components["schemas"]["Money"];
            payeeReceiveAmount?: components["schemas"]["Money"];
            payeeFspFee?: components["schemas"]["Money"];
            payeeFspCommission?: components["schemas"]["Money"];
            expiration: components["schemas"]["DateTime"];
            geoCode?: components["schemas"]["GeoCode"];
            ilpPacket: components["schemas"]["IlpPacket"];
            condition: components["schemas"]["IlpCondition"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * AuthorizationResponseType
         * @description Enum containing authorization response information; if the customer
         *     accepted the terms of the transfer, or rejected the terms.
         *
         * @enum {string}
         */
        AuthorizationResponseType: "ACCEPTED" | "REJECTED";
        /**
         * ConsentStatusIssued
         * @description Allowed values for the enumeration ConsentStatus
         *     - ISSUED - The consent has been issued by the DFSP
         * @enum {string}
         */
        ConsentStatusIssued: "ISSUED";
        /**
         * IlpFulfilment
         * @description Fulfilment that must be attached to the transfer by the Payee.
         * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
         */
        IlpFulfilment: string;
        /**
         * Integer
         * @description The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
         */
        Integer: string;
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        Note: string;
        /**
         * PartyIdTypeTPLink
         * @description - THIRD_PARTY_LINK - is the DFSP's internal reference which allows DFSP to find out the corresponding consent
         *
         * @example PERSONAL_ID
         * @enum {string}
         */
        PartyIdTypeTPLink: "THIRD_PARTY_LINK";
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo.
         */
        PartyIdInfoTPLink: {
            partyIdType: components["schemas"]["PartyIdTypeTPLink"];
            partyIdentifier: components["schemas"]["PartyIdentifier"];
            partySubIdOrType?: components["schemas"]["PartySubIdOrType"];
            fspId?: components["schemas"]["FspId"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ServiceType
         * @description The ServiceType enumeration describes the types of role for which a DFSP may query using the /services resource.
         *     Below are the allowed values for the enumeration ServiceType - THIRD_PARTY_DFSP - Enum used to query for DFSPs that have thirdparty features enabled. - PISP - Enum used to query for PISPs. - AUTH_SERVICE - Participants which provide Authentication Services.
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v2.0.0/api/thirdparty/data-models.md#3229-servicetype
         * @enum {string}
         */
        ServiceType: "THIRD_PARTY_DFSP" | "PISP" | "AUTH_SERVICE";
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        CorrelationId: string;
        /**
         * ParticipantsPostRequest
         * @description The object sent in the POST /participants request.
         */
        ParticipantsPostRequest: {
            requestId: components["schemas"]["CorrelationId"];
            /** @description List of PartyIdInfo elements that the client would like to update
             *     or create FSP information about.
             *      */
            partyList: components["schemas"]["PartyIdInfo"][];
            currency?: components["schemas"]["Currency"];
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         *     - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         *     - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        AmountType: "SEND" | "RECEIVE";
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         *     - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         *     - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         *     - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         *     - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         *     - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        TransactionScenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        TransactionSubScenario: string;
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         *     - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         *     - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        TransactionInitiator: "PAYER" | "PAYEE";
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         *     - CONSUMER - Consumer is the initiator of the transaction.
         *     - AGENT - Agent is the initiator of the transaction.
         *     - BUSINESS - Business is the initiator of the transaction.
         *     - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        TransactionInitiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * RefundReason
         * @description Reason for the refund.
         * @example Free text indicating reason for the refund.
         */
        RefundReason: string;
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        Refund: {
            originalTransactionId: components["schemas"]["CorrelationId"];
            refundReason?: components["schemas"]["RefundReason"];
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        BalanceOfPayments: string;
        /**
         * TransactionType
         * @description Data model for the complex type TransactionType.
         */
        TransactionType: {
            scenario: components["schemas"]["TransactionScenario"];
            subScenario?: components["schemas"]["TransactionSubScenario"];
            initiator: components["schemas"]["TransactionInitiator"];
            initiatorType: components["schemas"]["TransactionInitiatorType"];
            refundInfo?: components["schemas"]["Refund"];
            balanceOfPayments?: components["schemas"]["BalanceOfPayments"];
        };
        /**
         * QuotesPostRequest
         * @description The object sent in the POST /quotes request.
         */
        QuotesPostRequest: {
            /**
             * @description Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.
             * @example b51ec534-ee48-4575-b6a9-ead2955b8069
             */
            quoteId: components["schemas"]["CorrelationId"];
            /**
             * @description Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.
             * @example a8323bc6-c228-4df2-ae82-e5a997baf899
             */
            transactionId: components["schemas"]["CorrelationId"];
            /**
             * @description Identifies an optional previously-sent transaction request.
             * @example a8323bc6-c228-4df2-ae82-e5a997baf890
             */
            transactionRequestId?: components["schemas"]["CorrelationId"];
            /** @description Information about the Payee in the proposed financial transaction. */
            payee: components["schemas"]["Party"];
            /** @description Information about the Payer in the proposed financial transaction. */
            payer: components["schemas"]["Party"];
            /**
             * @description SEND for send amount, RECEIVE for receive amount.
             * @example SEND
             */
            amountType: components["schemas"]["AmountType"];
            /** @description Depending on amountType - If SEND - The amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. The amount is updated by each participating entity in the transaction. If RECEIVE - The amount the Payee should receive, that is, the amount that should be sent to the receiver exclusive any fees. The amount is not updated by any of the participating entities. */
            amount: components["schemas"]["Money"];
            /** @description The fees in the transaction. The fees element should be empty if fees should be non-disclosed. The fees element should be non-empty if fees should be disclosed. */
            fees?: components["schemas"]["Money"];
            /** @description Type of transaction for which the quote is requested. */
            transactionType: components["schemas"]["TransactionType"];
            /** @description Longitude and Latitude of the initiating Party. Can be used to detect fraud. */
            geoCode?: components["schemas"]["GeoCode"];
            /**
             * @description A memo that will be attached to the transaction.
             * @example Free-text memo.
             */
            note?: components["schemas"]["Note"];
            /**
             * @description Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit.
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration?: components["schemas"]["DateTime"];
            /** @description Optional extension, specific to deployment. */
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ErrorInformationResponse
         * @description Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
         */
        ErrorInformationResponse: {
            errorInformation?: components["schemas"]["ErrorInformation"];
        };
        /**
         * tppTransactionRequestPostRequest
         * @description Used by: PISP
         *     The HTTP request POST /tppTransationRequest is used to request the creation of a transaction request on the server for the transfer described in the request.
         *     Callback and data model information for POST /tppTransationRequest:
         *     Callback - PUT /tppTransationRequest/{ID} Error Callback - PUT /tppTransationRequest/{ID}/error
         */
        tppTransactionRequestPostRequest: {
            /** @description Common ID between the PISP and the Payer DFSP for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
             *      */
            transactionRequestId: components["schemas"]["CorrelationId"];
            /** @description Information about the Payee in the proposed financial transaction. */
            payee: components["schemas"]["Party"];
            /** @description Information about the Payer in the proposed financial transaction. */
            payer: components["schemas"]["PartyIdInfo"];
            /** @description SEND for sendAmount, RECEIVE for receiveAmount. */
            amountType: components["schemas"]["AmountType"];
            /** @description Requested amount to be transferred from the Payer to Payee. */
            amount: components["schemas"]["Money"];
            /** @description Type of transaction. */
            transactionType: components["schemas"]["TransactionType"];
            /** @description A memo that will be attached to the transaction. */
            note?: string;
            /**
             * @description Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.
             *
             * @example 2016-05-24T08:38:08.699-04:00
             */
            expiration: string;
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * tppAuthorizationsPostRequest
         * @description Used by: DFSP
         *     The HTTP request PUT /tppTransactionRequests/<ID> resource will have the following content. The <ID> in the request should match the transactionRequestId which was given when the transaction request was created.
         *     It is used to return the:  1. status of the customer information for validation. 2. the status of that agreement of terms for the transfer 3. a challenge that the PISP's client is to sign if the terms are agreed to and the transaction is to be authorized.
         */
        tppTransactionRequestPutResponse: {
            transactionRequestId: components["schemas"]["CorrelationId"];
            /** @description The challenge that the PISP's client is to sign */
            challenge: string;
            /** @description The unique identifier for the proposed transaction. It is set by the payer DFSP and signed by the payee DFSP as part of the terms of the transfer */
            transactionId: components["schemas"]["CorrelationId"];
            /** @description The amount that will be debited from the sending customer's account as a consequence of the transaction. */
            transferAmount: components["schemas"]["Money"];
            /** @description The amount that will be credited to the receiving customer's account as a consequence of the transaction. */
            payeeReceiveAmount: components["schemas"]["Money"];
            /** @description The amount of fees that the paying customer will be charged as part of the transaction. */
            fees: components["schemas"]["Money"];
            /** @description Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction. */
            payer: components["schemas"]["PartyIdInfo"];
            /** @description Information about the Payee in the proposed financial transaction. */
            payee: components["schemas"]["Party"];
            transactionType: components["schemas"]["TransactionType"];
            /** @description The time by which the transfer must be completed, set by the payee DFSP. */
            expiration: components["schemas"]["DateTime"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ErrorInformationObject
         * @description Data model for the complex type object that contains ErrorInformation.
         */
        ErrorInformationObject: {
            errorInformation: components["schemas"]["ErrorInformation"];
        };
        /**
         * AuthorizationResponseType
         * @description The customer accepted the terms of the transfer
         *
         * @enum {string}
         */
        AuthorizationResponseTypeAccepted: "ACCEPTED";
        /**
         * SignedPayloadTypeGeneric
         * @description Describes a challenge that has been signed with a private key
         * @enum {string}
         */
        SignedPayloadTypeGeneric: "GENERIC";
        /** @description The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters. */
        BinaryString: string;
        /** SignedPayloadGeneric */
        SignedPayloadGeneric: {
            signedPayloadType: components["schemas"]["SignedPayloadTypeGeneric"];
            genericSignedPayload: components["schemas"]["BinaryString"];
        };
        /**
         * TransfersPostRequestGeneric
         * @description The object sent in the PUT /tppAuthorizations/{ID} callback.
         */
        TransfersPostRequestGeneric: {
            responseType: components["schemas"]["AuthorizationResponseTypeAccepted"];
            signedPayload: components["schemas"]["SignedPayloadGeneric"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * SignedPayloadTypeFIDO
         * @description Describes a challenge that has been signed with FIDO Attestation flows
         * @enum {string}
         */
        SignedPayloadTypeFIDO: "FIDO";
        /**
         * FIDOPublicKeyCredentialAssertion
         * @description A data model representing a FIDO Assertion result.
         *     Derived from PublicKeyCredential Interface in WebAuthN.
         *
         *     The PublicKeyCredential interface represents the below fields with a Type of
         *     Javascript ArrayBuffer.
         *     For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
         *
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v2.0.0/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
         *
         */
        FIDOPublicKeyCredentialAssertion: {
            /** @description credential id: identifier of pair of keys, base64 encoded
             *     https://w3c.github.io/webauthn/#ref-for-dom-credential-id
             *      */
            id: string;
            /** @description raw credential id: identifier of pair of keys, base64 encoded.
             *      */
            rawId: string;
            /** @description AuthenticatorAssertionResponse
             *      */
            response: {
                /** @description Authenticator data object.
                 *      */
                authenticatorData: string;
                /** @description JSON string with client data.
                 *      */
                clientDataJSON: string;
                /** @description The signature generated by the private key associated with this credential.
                 *      */
                signature: string;
                /** @description This field is optionally provided by the authenticator, and
                 *     represents the user.id that was supplied during registration.
                 *      */
                userHandle?: string;
            };
            /**
             * @description response type, we need only the type of public-key
             * @enum {string}
             */
            type: "public-key";
        };
        /** SignedPayloadFIDO */
        SignedPayloadFIDO: {
            signedPayloadType: components["schemas"]["SignedPayloadTypeFIDO"];
            fidoSignedPayload: components["schemas"]["FIDOPublicKeyCredentialAssertion"];
        };
        /**
         * TransfersPostRequestFIDO
         * @description The object sent in the PUT /tppAuthorizations/{ID} callback.
         */
        TransfersPostRequestFIDO: {
            responseType: components["schemas"]["AuthorizationResponseTypeAccepted"];
            signedPayload: components["schemas"]["SignedPayloadFIDO"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * tppTransfersPostRequest
         * @description The object sent in the PUT /tppAuthorizations/{ID} callback.
         */
        tppTransfersPostRequest: {
            executionRequestId: components["schemas"]["CorrelationId"];
            transactionRequestId: components["schemas"]["CorrelationId"];
            authenticationInfo: components["schemas"]["TransfersPostRequestGeneric"] | components["schemas"]["TransfersPostRequestFIDO"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransactionState
         * @description Below are the allowed values for the enumeration.
         *     - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
         *     - PENDING - Payee FSP has validated the transaction.
         *     - COMPLETED - Payee FSP has successfully performed the transaction.
         *     - REJECTED - Payee FSP has failed to perform the transaction.
         * @example RECEIVED
         * @enum {string}
         */
        TransactionState: "RECEIVED" | "PENDING" | "COMPLETED" | "REJECTED";
        /**
         * tppTransfersPutResponse
         * @description Used by: DFSP
         *     The issuing PISP will expect a response to their request for a transfer which describes the finalized state of the requested transfer.
         *     This response will be given by a PUT callback call on the /tppTransfers/{ID} resource.
         *     The {ID} given in the query string should be the executionRequestId which was originally used by the PISP to initiate the transaction.
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v2.0.0/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
         */
        tppTransfersPutResponse: {
            completedTimestamp?: components["schemas"]["DateTime"];
            transactionState: components["schemas"]["TransactionState"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
    };
    responses: {
        /** @description OK */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Accepted */
        202: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Bad Request */
        400: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Method Not Allowed */
        405: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Acceptable */
        406: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Implemented */
        501: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Service Unavailable */
        503: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
    };
    parameters: {
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
        /** @description The `Date` header field indicates the date when the request was sent. */
        Date: string;
        /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
        "X-Forwarded-For": string;
        /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": string;
        /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination": string;
        /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption": string;
        /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature": string;
        /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-URI": string;
        /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method": string;
        /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: string;
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The identifier value. */
        ID: string;
    };
    requestBodies: never;
    headers: {
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ParticipantsIDPutResponse"] | components["schemas"]["PartiesTypeIDPutResponse"] | components["schemas"]["QuotesIDPutResponse"] | components["schemas"]["AuthorizationResponseType"] | components["schemas"]["ConsentStatusIssued"] | components["schemas"]["IlpFulfilment"] | components["schemas"]["Integer"] | components["schemas"]["Note"] | components["schemas"]["PartyIdInfoTPLink"] | components["schemas"]["PartyResult"] | components["schemas"]["ServiceType"] | components["schemas"]["ParticipantsPostRequest"] | components["schemas"]["QuotesPostRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    MetricsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppTransactionsPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Transaction request to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tppTransactionRequestPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    GetThirdpartyTransactionRequests: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppUpdateTransactionRequests: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["tppTransactionRequestPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppTransactionRequestsError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Error information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppPostTransfers: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Transaction request to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["tppTransfersPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppGetTransfers: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppUpdateTransfersRequest: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "transactionRequestState": "RECEIVED"
                 *     } */
                "application/json": components["schemas"]["tppTransfersPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    tppTransfersRequestsError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Error information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
}
