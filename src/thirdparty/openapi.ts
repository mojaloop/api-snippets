/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    /**
     * A valid OpenApi3 specification requires `paths` to be defined.
     */
    get: {
      responses: {
        /**
         * OK
         */
        '200': unknown;
      };
    };
  };
}

export interface operations {}

export interface components {
  schemas: {
    /**
     * A long-lived unique account identifier provided by the DFSP. This MUST NOT
     * be Bank Account Number or anything that may expose a User's private bank
     * account information.
     */
    AccountAddress: string;
    /**
     * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
     */
    Currency:
    | 'AED'
    | 'AFN'
    | 'ALL'
    | 'AMD'
    | 'ANG'
    | 'AOA'
    | 'ARS'
    | 'AUD'
    | 'AWG'
    | 'AZN'
    | 'BAM'
    | 'BBD'
    | 'BDT'
    | 'BGN'
    | 'BHD'
    | 'BIF'
    | 'BMD'
    | 'BND'
    | 'BOB'
    | 'BRL'
    | 'BSD'
    | 'BTN'
    | 'BWP'
    | 'BYN'
    | 'BZD'
    | 'CAD'
    | 'CDF'
    | 'CHF'
    | 'CLP'
    | 'CNY'
    | 'COP'
    | 'CRC'
    | 'CUC'
    | 'CUP'
    | 'CVE'
    | 'CZK'
    | 'DJF'
    | 'DKK'
    | 'DOP'
    | 'DZD'
    | 'EGP'
    | 'ERN'
    | 'ETB'
    | 'EUR'
    | 'FJD'
    | 'FKP'
    | 'GBP'
    | 'GEL'
    | 'GGP'
    | 'GHS'
    | 'GIP'
    | 'GMD'
    | 'GNF'
    | 'GTQ'
    | 'GYD'
    | 'HKD'
    | 'HNL'
    | 'HRK'
    | 'HTG'
    | 'HUF'
    | 'IDR'
    | 'ILS'
    | 'IMP'
    | 'INR'
    | 'IQD'
    | 'IRR'
    | 'ISK'
    | 'JEP'
    | 'JMD'
    | 'JOD'
    | 'JPY'
    | 'KES'
    | 'KGS'
    | 'KHR'
    | 'KMF'
    | 'KPW'
    | 'KRW'
    | 'KWD'
    | 'KYD'
    | 'KZT'
    | 'LAK'
    | 'LBP'
    | 'LKR'
    | 'LRD'
    | 'LSL'
    | 'LYD'
    | 'MAD'
    | 'MDL'
    | 'MGA'
    | 'MKD'
    | 'MMK'
    | 'MNT'
    | 'MOP'
    | 'MRO'
    | 'MUR'
    | 'MVR'
    | 'MWK'
    | 'MXN'
    | 'MYR'
    | 'MZN'
    | 'NAD'
    | 'NGN'
    | 'NIO'
    | 'NOK'
    | 'NPR'
    | 'NZD'
    | 'OMR'
    | 'PAB'
    | 'PEN'
    | 'PGK'
    | 'PHP'
    | 'PKR'
    | 'PLN'
    | 'PYG'
    | 'QAR'
    | 'RON'
    | 'RSD'
    | 'RUB'
    | 'RWF'
    | 'SAR'
    | 'SBD'
    | 'SCR'
    | 'SDG'
    | 'SEK'
    | 'SGD'
    | 'SHP'
    | 'SLL'
    | 'SOS'
    | 'SPL'
    | 'SRD'
    | 'STD'
    | 'SVC'
    | 'SYP'
    | 'SZL'
    | 'THB'
    | 'TJS'
    | 'TMT'
    | 'TND'
    | 'TOP'
    | 'TRY'
    | 'TTD'
    | 'TVD'
    | 'TWD'
    | 'TZS'
    | 'UAH'
    | 'UGX'
    | 'USD'
    | 'UYU'
    | 'UZS'
    | 'VEF'
    | 'VND'
    | 'VUV'
    | 'WST'
    | 'XAF'
    | 'XCD'
    | 'XDR'
    | 'XOF'
    | 'XPF'
    | 'YER'
    | 'ZAR'
    | 'ZMW'
    | 'ZWD';
    /**
     * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
     *
     * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
     *
     * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
     */
    Name: string;
    /**
     * Data model for the complex type Account.
     */
    Account: {
      /**
       * A long-lived unique account identifier provided by the DFSP. This MUST NOT
       * be Bank Account Number or anything that may expose a User's private bank
       * account information.
       */
      address?: string;
      /**
       * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       */
      currency:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GGP'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'IMP'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JEP'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRO'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLL'
      | 'SOS'
      | 'SPL'
      | 'SRD'
      | 'STD'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TVD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VEF'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPF'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZWD';
      /**
       * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
       *
       * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
       *
       * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
       */
      description?: string;
    };
    /**
     * Data model for the complex type AccountList.
     */
    AccountList: {
      /**
       * Accounts associated with the Party.
       */
      account: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        address?: string;
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        description?: string;
      }[];
    };
    /**
     * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
     */
    Amount: string;
    /**
     * Below are the allowed values for the enumeration AmountType.
     * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
     * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
     */
    AmountType: 'SEND' | 'RECEIVE';
    /**
     * Below are the allowed values for the enumeration AuthenticationType.
     * - OTP - One-time password generated by the Payer FSP.
     * - QRCODE - QR code used as One Time Password.
     * - U2F - U2F is a new addition isolated to Thirdparty stream.
     */
    AuthenticationType: 'OTP' | 'QRCODE' | 'U2F';
    /**
     * The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.
     */
    OtpValue: string;
    /**
     * QR code used as a One Time Password.
     */
    QRCODE: string;
    /**
     * U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
     */
    U2FPIN: string;
    /**
     * The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
     */
    Integer: string;
    /**
     * U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
     */
    U2FPinValue: {
      /**
       * U2F challenge-response.
       */
      pinValue: string;
      /**
       * Sequential counter used for cloning detection. Present only for U2F authentication.
       */
      counter: string;
    };
    /**
     * Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.
     */
    AuthenticationValue:
    | string
    | string
    | {
      /**
           * U2F challenge-response.
           */
      pinValue: string;
      /**
           * Sequential counter used for cloning detection. Present only for U2F authentication.
           */
      counter: string;
    };
    /**
     * Data model for the complex type AuthenticationInfo.
     */
    AuthenticationInfo: {
      /**
       * Below are the allowed values for the enumeration AuthenticationType.
       * - OTP - One-time password generated by the Payer FSP.
       * - QRCODE - QR code used as One Time Password.
       * - U2F - U2F is a new addition isolated to Thirdparty stream.
       */
      authentication: 'OTP' | 'QRCODE' | 'U2F';
      /**
       * Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.
       */
      authenticationValue:
      | string
      | string
      | {
        /**
             * U2F challenge-response.
             */
        pinValue: string;
        /**
             * Sequential counter used for cloning detection. Present only for U2F authentication.
             */
        counter: string;
      };
    };
    /**
     * Below are the allowed values for the enumeration AuthorizationChannelType.
     * - OTP - One-time password generated by the Payer FSP.
     * - QRCODE - QR code used as One Time Password.
     * - U2F - U2F is a new addition isolated to Thirdparty stream.
     *
     * This is based on FSPIOP `AuthenticationType` with U2F added.
     */
    AuthorizationChannelType: 'OTP' | 'QRCODE' | 'U2F';
    /**
     * Enum containing response information; if the customer entered the
     * authentication value, rejected the transaction, or requested a
     * resend of the authentication value.
     */
    AuthorizationResponseType: 'ENTERED' | 'REJECTED' | 'RESEND';
    /**
     * Data model for the complex type Money.
     */
    Money: {
      /**
       * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       */
      currency:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GGP'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'IMP'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JEP'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRO'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLL'
      | 'SOS'
      | 'SPL'
      | 'SRD'
      | 'STD'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TVD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VEF'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPF'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZWD';
      /**
       * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
       */
      amount: string;
    };
    /**
     * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
     */
    CorrelationId: string;
    /**
     * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
     */
    DateTime: string;
    /**
     * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
     */
    Latitude: string;
    /**
     * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
     */
    Longitude: string;
    /**
     * Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
     */
    GeoCode: {
      /**
       * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
       */
      latitude: string;
      /**
       * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
       */
      longitude: string;
    };
    /**
     * Information for recipient (transport layer information).
     */
    IlpPacket: string;
    /**
     * Condition that must be attached to the transfer by the Payer.
     */
    IlpCondition: string;
    /**
     * Extension key.
     */
    ExtensionKey: string;
    /**
     * Extension value.
     */
    ExtensionValue: string;
    /**
     * Data model for the complex type Extension.
     */
    Extension: {
      /**
       * Extension key.
       */
      key: string;
      /**
       * Extension value.
       */
      value: string;
    };
    /**
     * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
     */
    ExtensionList: {
      /**
       * Number of Extension elements.
       */
      extension: {
        /**
         * Extension key.
         */
        key: string;
        /**
         * Extension value.
         */
        value: string;
      }[];
    };
    /**
     * The object sent in the PUT /quotes/{ID} callback.
     */
    QuotesIDPutResponse: {
      /**
       * Data model for the complex type Money.
       */
      transferAmount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      payeeReceiveAmount?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      payeeFspFee?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      payeeFspCommission?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       */
      expiration: string;
      /**
       * Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
       */
      geoCode?: {
        /**
         * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         */
        latitude: string;
        /**
         * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         */
        longitude: string;
      };
      /**
       * Information for recipient (transport layer information).
       */
      ilpPacket: string;
      /**
       * Condition that must be attached to the transfer by the Payer.
       */
      condition: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * POST /authorizations request object.
     */
    AuthorizationsPostRequest: {
      /**
       * Below are the allowed values for the enumeration AuthorizationChannelType.
       * - OTP - One-time password generated by the Payer FSP.
       * - QRCODE - QR code used as One Time Password.
       * - U2F - U2F is a new addition isolated to Thirdparty stream.
       *
       * This is based on FSPIOP `AuthenticationType` with U2F added.
       */
      authenticationType: 'OTP' | 'QRCODE' | 'U2F';
      /**
       * The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
       */
      retriesLeft: string;
      /**
       * Data model for the complex type Money.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionRequestId: string;
      /**
       * The object sent in the PUT /quotes/{ID} callback.
       */
      quote: {
        /**
         * Data model for the complex type Money.
         */
        transferAmount: {
          /**
           * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           */
          currency:
          | 'AED'
          | 'AFN'
          | 'ALL'
          | 'AMD'
          | 'ANG'
          | 'AOA'
          | 'ARS'
          | 'AUD'
          | 'AWG'
          | 'AZN'
          | 'BAM'
          | 'BBD'
          | 'BDT'
          | 'BGN'
          | 'BHD'
          | 'BIF'
          | 'BMD'
          | 'BND'
          | 'BOB'
          | 'BRL'
          | 'BSD'
          | 'BTN'
          | 'BWP'
          | 'BYN'
          | 'BZD'
          | 'CAD'
          | 'CDF'
          | 'CHF'
          | 'CLP'
          | 'CNY'
          | 'COP'
          | 'CRC'
          | 'CUC'
          | 'CUP'
          | 'CVE'
          | 'CZK'
          | 'DJF'
          | 'DKK'
          | 'DOP'
          | 'DZD'
          | 'EGP'
          | 'ERN'
          | 'ETB'
          | 'EUR'
          | 'FJD'
          | 'FKP'
          | 'GBP'
          | 'GEL'
          | 'GGP'
          | 'GHS'
          | 'GIP'
          | 'GMD'
          | 'GNF'
          | 'GTQ'
          | 'GYD'
          | 'HKD'
          | 'HNL'
          | 'HRK'
          | 'HTG'
          | 'HUF'
          | 'IDR'
          | 'ILS'
          | 'IMP'
          | 'INR'
          | 'IQD'
          | 'IRR'
          | 'ISK'
          | 'JEP'
          | 'JMD'
          | 'JOD'
          | 'JPY'
          | 'KES'
          | 'KGS'
          | 'KHR'
          | 'KMF'
          | 'KPW'
          | 'KRW'
          | 'KWD'
          | 'KYD'
          | 'KZT'
          | 'LAK'
          | 'LBP'
          | 'LKR'
          | 'LRD'
          | 'LSL'
          | 'LYD'
          | 'MAD'
          | 'MDL'
          | 'MGA'
          | 'MKD'
          | 'MMK'
          | 'MNT'
          | 'MOP'
          | 'MRO'
          | 'MUR'
          | 'MVR'
          | 'MWK'
          | 'MXN'
          | 'MYR'
          | 'MZN'
          | 'NAD'
          | 'NGN'
          | 'NIO'
          | 'NOK'
          | 'NPR'
          | 'NZD'
          | 'OMR'
          | 'PAB'
          | 'PEN'
          | 'PGK'
          | 'PHP'
          | 'PKR'
          | 'PLN'
          | 'PYG'
          | 'QAR'
          | 'RON'
          | 'RSD'
          | 'RUB'
          | 'RWF'
          | 'SAR'
          | 'SBD'
          | 'SCR'
          | 'SDG'
          | 'SEK'
          | 'SGD'
          | 'SHP'
          | 'SLL'
          | 'SOS'
          | 'SPL'
          | 'SRD'
          | 'STD'
          | 'SVC'
          | 'SYP'
          | 'SZL'
          | 'THB'
          | 'TJS'
          | 'TMT'
          | 'TND'
          | 'TOP'
          | 'TRY'
          | 'TTD'
          | 'TVD'
          | 'TWD'
          | 'TZS'
          | 'UAH'
          | 'UGX'
          | 'USD'
          | 'UYU'
          | 'UZS'
          | 'VEF'
          | 'VND'
          | 'VUV'
          | 'WST'
          | 'XAF'
          | 'XCD'
          | 'XDR'
          | 'XOF'
          | 'XPF'
          | 'YER'
          | 'ZAR'
          | 'ZMW'
          | 'ZWD';
          /**
           * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           */
          amount: string;
        };
        /**
         * Data model for the complex type Money.
         */
        payeeReceiveAmount?: {
          /**
           * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           */
          currency:
          | 'AED'
          | 'AFN'
          | 'ALL'
          | 'AMD'
          | 'ANG'
          | 'AOA'
          | 'ARS'
          | 'AUD'
          | 'AWG'
          | 'AZN'
          | 'BAM'
          | 'BBD'
          | 'BDT'
          | 'BGN'
          | 'BHD'
          | 'BIF'
          | 'BMD'
          | 'BND'
          | 'BOB'
          | 'BRL'
          | 'BSD'
          | 'BTN'
          | 'BWP'
          | 'BYN'
          | 'BZD'
          | 'CAD'
          | 'CDF'
          | 'CHF'
          | 'CLP'
          | 'CNY'
          | 'COP'
          | 'CRC'
          | 'CUC'
          | 'CUP'
          | 'CVE'
          | 'CZK'
          | 'DJF'
          | 'DKK'
          | 'DOP'
          | 'DZD'
          | 'EGP'
          | 'ERN'
          | 'ETB'
          | 'EUR'
          | 'FJD'
          | 'FKP'
          | 'GBP'
          | 'GEL'
          | 'GGP'
          | 'GHS'
          | 'GIP'
          | 'GMD'
          | 'GNF'
          | 'GTQ'
          | 'GYD'
          | 'HKD'
          | 'HNL'
          | 'HRK'
          | 'HTG'
          | 'HUF'
          | 'IDR'
          | 'ILS'
          | 'IMP'
          | 'INR'
          | 'IQD'
          | 'IRR'
          | 'ISK'
          | 'JEP'
          | 'JMD'
          | 'JOD'
          | 'JPY'
          | 'KES'
          | 'KGS'
          | 'KHR'
          | 'KMF'
          | 'KPW'
          | 'KRW'
          | 'KWD'
          | 'KYD'
          | 'KZT'
          | 'LAK'
          | 'LBP'
          | 'LKR'
          | 'LRD'
          | 'LSL'
          | 'LYD'
          | 'MAD'
          | 'MDL'
          | 'MGA'
          | 'MKD'
          | 'MMK'
          | 'MNT'
          | 'MOP'
          | 'MRO'
          | 'MUR'
          | 'MVR'
          | 'MWK'
          | 'MXN'
          | 'MYR'
          | 'MZN'
          | 'NAD'
          | 'NGN'
          | 'NIO'
          | 'NOK'
          | 'NPR'
          | 'NZD'
          | 'OMR'
          | 'PAB'
          | 'PEN'
          | 'PGK'
          | 'PHP'
          | 'PKR'
          | 'PLN'
          | 'PYG'
          | 'QAR'
          | 'RON'
          | 'RSD'
          | 'RUB'
          | 'RWF'
          | 'SAR'
          | 'SBD'
          | 'SCR'
          | 'SDG'
          | 'SEK'
          | 'SGD'
          | 'SHP'
          | 'SLL'
          | 'SOS'
          | 'SPL'
          | 'SRD'
          | 'STD'
          | 'SVC'
          | 'SYP'
          | 'SZL'
          | 'THB'
          | 'TJS'
          | 'TMT'
          | 'TND'
          | 'TOP'
          | 'TRY'
          | 'TTD'
          | 'TVD'
          | 'TWD'
          | 'TZS'
          | 'UAH'
          | 'UGX'
          | 'USD'
          | 'UYU'
          | 'UZS'
          | 'VEF'
          | 'VND'
          | 'VUV'
          | 'WST'
          | 'XAF'
          | 'XCD'
          | 'XDR'
          | 'XOF'
          | 'XPF'
          | 'YER'
          | 'ZAR'
          | 'ZMW'
          | 'ZWD';
          /**
           * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           */
          amount: string;
        };
        /**
         * Data model for the complex type Money.
         */
        payeeFspFee?: {
          /**
           * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           */
          currency:
          | 'AED'
          | 'AFN'
          | 'ALL'
          | 'AMD'
          | 'ANG'
          | 'AOA'
          | 'ARS'
          | 'AUD'
          | 'AWG'
          | 'AZN'
          | 'BAM'
          | 'BBD'
          | 'BDT'
          | 'BGN'
          | 'BHD'
          | 'BIF'
          | 'BMD'
          | 'BND'
          | 'BOB'
          | 'BRL'
          | 'BSD'
          | 'BTN'
          | 'BWP'
          | 'BYN'
          | 'BZD'
          | 'CAD'
          | 'CDF'
          | 'CHF'
          | 'CLP'
          | 'CNY'
          | 'COP'
          | 'CRC'
          | 'CUC'
          | 'CUP'
          | 'CVE'
          | 'CZK'
          | 'DJF'
          | 'DKK'
          | 'DOP'
          | 'DZD'
          | 'EGP'
          | 'ERN'
          | 'ETB'
          | 'EUR'
          | 'FJD'
          | 'FKP'
          | 'GBP'
          | 'GEL'
          | 'GGP'
          | 'GHS'
          | 'GIP'
          | 'GMD'
          | 'GNF'
          | 'GTQ'
          | 'GYD'
          | 'HKD'
          | 'HNL'
          | 'HRK'
          | 'HTG'
          | 'HUF'
          | 'IDR'
          | 'ILS'
          | 'IMP'
          | 'INR'
          | 'IQD'
          | 'IRR'
          | 'ISK'
          | 'JEP'
          | 'JMD'
          | 'JOD'
          | 'JPY'
          | 'KES'
          | 'KGS'
          | 'KHR'
          | 'KMF'
          | 'KPW'
          | 'KRW'
          | 'KWD'
          | 'KYD'
          | 'KZT'
          | 'LAK'
          | 'LBP'
          | 'LKR'
          | 'LRD'
          | 'LSL'
          | 'LYD'
          | 'MAD'
          | 'MDL'
          | 'MGA'
          | 'MKD'
          | 'MMK'
          | 'MNT'
          | 'MOP'
          | 'MRO'
          | 'MUR'
          | 'MVR'
          | 'MWK'
          | 'MXN'
          | 'MYR'
          | 'MZN'
          | 'NAD'
          | 'NGN'
          | 'NIO'
          | 'NOK'
          | 'NPR'
          | 'NZD'
          | 'OMR'
          | 'PAB'
          | 'PEN'
          | 'PGK'
          | 'PHP'
          | 'PKR'
          | 'PLN'
          | 'PYG'
          | 'QAR'
          | 'RON'
          | 'RSD'
          | 'RUB'
          | 'RWF'
          | 'SAR'
          | 'SBD'
          | 'SCR'
          | 'SDG'
          | 'SEK'
          | 'SGD'
          | 'SHP'
          | 'SLL'
          | 'SOS'
          | 'SPL'
          | 'SRD'
          | 'STD'
          | 'SVC'
          | 'SYP'
          | 'SZL'
          | 'THB'
          | 'TJS'
          | 'TMT'
          | 'TND'
          | 'TOP'
          | 'TRY'
          | 'TTD'
          | 'TVD'
          | 'TWD'
          | 'TZS'
          | 'UAH'
          | 'UGX'
          | 'USD'
          | 'UYU'
          | 'UZS'
          | 'VEF'
          | 'VND'
          | 'VUV'
          | 'WST'
          | 'XAF'
          | 'XCD'
          | 'XDR'
          | 'XOF'
          | 'XPF'
          | 'YER'
          | 'ZAR'
          | 'ZMW'
          | 'ZWD';
          /**
           * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           */
          amount: string;
        };
        /**
         * Data model for the complex type Money.
         */
        payeeFspCommission?: {
          /**
           * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           */
          currency:
          | 'AED'
          | 'AFN'
          | 'ALL'
          | 'AMD'
          | 'ANG'
          | 'AOA'
          | 'ARS'
          | 'AUD'
          | 'AWG'
          | 'AZN'
          | 'BAM'
          | 'BBD'
          | 'BDT'
          | 'BGN'
          | 'BHD'
          | 'BIF'
          | 'BMD'
          | 'BND'
          | 'BOB'
          | 'BRL'
          | 'BSD'
          | 'BTN'
          | 'BWP'
          | 'BYN'
          | 'BZD'
          | 'CAD'
          | 'CDF'
          | 'CHF'
          | 'CLP'
          | 'CNY'
          | 'COP'
          | 'CRC'
          | 'CUC'
          | 'CUP'
          | 'CVE'
          | 'CZK'
          | 'DJF'
          | 'DKK'
          | 'DOP'
          | 'DZD'
          | 'EGP'
          | 'ERN'
          | 'ETB'
          | 'EUR'
          | 'FJD'
          | 'FKP'
          | 'GBP'
          | 'GEL'
          | 'GGP'
          | 'GHS'
          | 'GIP'
          | 'GMD'
          | 'GNF'
          | 'GTQ'
          | 'GYD'
          | 'HKD'
          | 'HNL'
          | 'HRK'
          | 'HTG'
          | 'HUF'
          | 'IDR'
          | 'ILS'
          | 'IMP'
          | 'INR'
          | 'IQD'
          | 'IRR'
          | 'ISK'
          | 'JEP'
          | 'JMD'
          | 'JOD'
          | 'JPY'
          | 'KES'
          | 'KGS'
          | 'KHR'
          | 'KMF'
          | 'KPW'
          | 'KRW'
          | 'KWD'
          | 'KYD'
          | 'KZT'
          | 'LAK'
          | 'LBP'
          | 'LKR'
          | 'LRD'
          | 'LSL'
          | 'LYD'
          | 'MAD'
          | 'MDL'
          | 'MGA'
          | 'MKD'
          | 'MMK'
          | 'MNT'
          | 'MOP'
          | 'MRO'
          | 'MUR'
          | 'MVR'
          | 'MWK'
          | 'MXN'
          | 'MYR'
          | 'MZN'
          | 'NAD'
          | 'NGN'
          | 'NIO'
          | 'NOK'
          | 'NPR'
          | 'NZD'
          | 'OMR'
          | 'PAB'
          | 'PEN'
          | 'PGK'
          | 'PHP'
          | 'PKR'
          | 'PLN'
          | 'PYG'
          | 'QAR'
          | 'RON'
          | 'RSD'
          | 'RUB'
          | 'RWF'
          | 'SAR'
          | 'SBD'
          | 'SCR'
          | 'SDG'
          | 'SEK'
          | 'SGD'
          | 'SHP'
          | 'SLL'
          | 'SOS'
          | 'SPL'
          | 'SRD'
          | 'STD'
          | 'SVC'
          | 'SYP'
          | 'SZL'
          | 'THB'
          | 'TJS'
          | 'TMT'
          | 'TND'
          | 'TOP'
          | 'TRY'
          | 'TTD'
          | 'TVD'
          | 'TWD'
          | 'TZS'
          | 'UAH'
          | 'UGX'
          | 'USD'
          | 'UYU'
          | 'UZS'
          | 'VEF'
          | 'VND'
          | 'VUV'
          | 'WST'
          | 'XAF'
          | 'XCD'
          | 'XDR'
          | 'XOF'
          | 'XPF'
          | 'YER'
          | 'ZAR'
          | 'ZMW'
          | 'ZWD';
          /**
           * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
           */
          amount: string;
        };
        /**
         * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         */
        expiration: string;
        /**
         * Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
         */
        geoCode?: {
          /**
           * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           */
          latitude: string;
          /**
           * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
           */
          longitude: string;
        };
        /**
         * Information for recipient (transport layer information).
         */
        ilpPacket: string;
        /**
         * Condition that must be attached to the transfer by the Payer.
         */
        condition: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      };
    };
    /**
     * The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters.
     */
    BinaryString: string;
    /**
     * The auth channel being used for the consentRequest.
     * - "WEB" - The Web auth channel.
     * - "OTP" - The OTP auth channel.
     */
    ConsentRequestChannelType: 'WEB' | 'OTP';
    /**
     * The OTP auth channel being used for PUT consentRequest/{ID} request.
     */
    ConsentRequestChannelTypeOTP: 'OTP';
    /**
     * The web auth channel being used for PUT consentRequest/{ID} request.
     */
    ConsentRequestChannelTypeWeb: 'WEB';
    /**
     * The scopes requested for a ConsentRequest.
     * - "accounts.getBalance" - Get the balance of a given account.
     * - "accounts.transfer" - Initiate a transfer from an account.
     */
    ConsentScopeType: 'accounts.getBalance' | 'accounts.transfer';
    /**
     * Scope + Account Identifier mapping for a Consent.
     */
    Scope: {
      /**
       * A long-lived unique account identifier provided by the DFSP. This MUST NOT
       * be Bank Account Number or anything that may expose a User's private bank
       * account information.
       */
      accountId: string;
      actions: ('accounts.getBalance' | 'accounts.transfer')[];
    };
    /**
     * The object sent in a `PUT /consentRequests/{ID}` request.
     *
     * Schema used in the request consent phase of the account linking OTP/SMS flow.
     */
    ConsentRequestsIDPutResponseOTP: {
      /**
       * The id of the PISP who will initiate transactions on a user's behalf.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      authChannels: 'OTP'[];
      /**
       * The callback uri that the user will be redirected to after completing the WEB auth channel.
       */
      callbackUri: string;
    };
    /**
     * The object sent in a `PUT /consentRequests/{ID}` request.
     *
     * Schema used in the authentication phase of the account linking flow,
     * the user is expected to prove their identity to the DFSP by passing a OTP
     * or secret to the PISP.
     */
    ConsentRequestsIDPutResponseOTPAuth: {
      /**
       * The id of the PISP who will initiate transactions on a user's behalf.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      authChannels: 'OTP'[];
      /**
       * The callback uri that the user will be redirected to after completing the WEB auth channel.
       */
      callbackUri: string;
      /**
       * The Auth token from the OTP or redirect to pisp app.
       */
      authToken: string;
    };
    /**
     * The object sent in a `PUT /consentRequests/{ID}` request.
     *
     * Schema used in the request consent phase of the account linking web flow,
     * the result is the PISP being instructed on a specific URL where this
     * supposed user should be redirected. This URL should be a place where
     * the user can prove their identity (e.g., by logging in).
     */
    ConsentRequestsIDPutResponseWeb: {
      /**
       * The id of the PISP who will initiate transactions on a user's behalf.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      authChannels: 'WEB'[];
      /**
       * The callback uri that the user will be redirected to after completing the WEB auth channel.
       */
      callbackUri: string;
      /**
       * The callback uri that the pisp app redirects to for user to complete their login.
       */
      authUri: string;
    };
    /**
     * The object sent in a `PUT /consentRequests/{ID}` request.
     *
     * Schema used in the authentication phase of the account linking flow,
     * the user is expected to prove their identity to the DFSP by passing a OTP
     * or secret to the PISP.
     */
    ConsentRequestsIDPutResponseWebAuth: {
      /**
       * The id of the PISP who will initiate transactions on a user's behalf.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      authChannels: 'WEB'[];
      /**
       * The callback uri that the user will be redirected to after completing the WEB auth channel.
       */
      callbackUri: string;
      /**
       * The callback uri that the pisp app redirects to for user to complete their login.
       */
      authUri: string;
      /**
       * The Auth token from the OTP or redirect to pisp app.
       */
      authToken: string;
    };
    /**
     * The object sent in a `POST /consentRequests` request.
     */
    ConsentRequestsPostRequest: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      id: string;
      /**
       * The id of the PISP who will initiate transactions on a user's behalf.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      authChannels: ('WEB' | 'OTP')[];
      /**
       * The callback uri that the user will be redirected to after completing the WEB auth channel.
       */
      callbackUri: string;
    };
    /**
     * The type of the Credential.
     * - "FIDO" - A FIDO public/private keypair.
     */
    CredentialType: 'FIDO';
    /**
     * A credential used to allow a user to prove their identity
     * and access to an account with a DFSP.
     */
    ConsentsIDGenerateChallengePostRequest: {
      /**
       * The type of the Credential.
       * - "FIDO" - A FIDO public/private keypair.
       */
      type: 'FIDO';
    };
    /**
     * The status of the Consent.
     * - "REVOKED" - The Consent is no longer valid and has been revoked.
     */
    ConsentStatusType: 'REVOKED';
    /**
     * PATCH /consents/{ID} request object.
     *
     * Sent to both the PISP and DFSP when a consent is revoked.
     */
    ConsentsIDPatchResponse: {
      /**
       * The status of the Consent.
       * - "REVOKED" - The Consent is no longer valid and has been revoked.
       */
      status: 'REVOKED';
      /**
       * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       */
      revokedAt: string;
    };
    /**
     * FSP identifier.
     */
    FspId: string;
    /**
     * The challenge that has been signed by a PISP.
     */
    CredentialChallengeSigned: {
      /**
       * Base64 encoded binary of the challenge that must be answered by the PISP.
       */
      payload: string;
      /**
       * Base64 encoded binary string or result of the payload signed by the PISP using the private key.
       */
      signature: string;
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * SignedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be PENDING when updating
     * a credential.
     */
    SignedCredential: {
      /**
       * The id of a Credential.
       */
      id: string;
      /**
       * The type of the Credential.
       * - "FIDO" - A FIDO public/private keypair.
       */
      type: 'FIDO';
      /**
       * The challenge has signed but not yet verified.
       */
      status: 'PENDING';
      /**
       * The challenge that has been signed by a PISP.
       */
      challenge: {
        /**
         * Base64 encoded binary of the challenge that must be answered by the PISP.
         */
        payload: string;
        /**
         * Base64 encoded binary string or result of the payload signed by the PISP using the private key.
         */
        signature: string;
      };
      /**
       * Base64 encoded bytes - The public key of the Public/Private keypair.
       */
      payload: string;
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent
     * with a signed challenge and register a credential.
     *
     * Called by a `PISP` to after signing a challenge. Sent to an `auth-service` for verification.
     */
    ConsentsIDPutResponseSigned: {
      /**
       * The id of the ConsentRequest that was used to initiate the
       * creation of this Consent.
       */
      requestId: string;
      /**
       * FSP identifier.
       */
      participantId: string;
      /**
       * PISP identifier who uses this Consent.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      /**
       * A credential used to allow a user to prove their identity and access
       * to an account with a DFSP.
       *
       * SignedCredential is a special formatting of the credential to allow us to be
       * more explicit about the `status` field - it should only ever be PENDING when updating
       * a credential.
       */
      credential: {
        /**
         * The id of a Credential.
         */
        id: string;
        /**
         * The type of the Credential.
         * - "FIDO" - A FIDO public/private keypair.
         */
        type: 'FIDO';
        /**
         * The challenge has signed but not yet verified.
         */
        status: 'PENDING';
        /**
         * The challenge that has been signed by a PISP.
         */
        challenge: {
          /**
           * Base64 encoded binary of the challenge that must be answered by the PISP.
           */
          payload: string;
          /**
           * Base64 encoded binary string or result of the payload signed by the PISP using the private key.
           */
          signature: string;
        };
        /**
         * Base64 encoded bytes - The public key of the Public/Private keypair.
         */
        payload: string;
      };
    };
    /**
     * The challenge issued by a DFSP that must be answered by the PISP.
     */
    CredentialChallengeUnsigned: {
      /**
       * Base64 encoded binary of the challenge that must be answered by the PISP.
       */
      payload: string;
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * UnsignedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be PENDING when updating
     * a credential.
     */
    UnsignedCredential: {
      /**
       * The type of the Credential.
       * - "FIDO" - A FIDO public/private keypair.
       */
      type: 'FIDO';
      /**
       * The challenge has initialized but not yet answered by the PISP.
       */
      status: 'PENDING';
      /**
       * The challenge issued by a DFSP that must be answered by the PISP.
       */
      challenge: {
        /**
         * Base64 encoded binary of the challenge that must be answered by the PISP.
         */
        payload: string;
      };
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used to request a PISP to sign a challenge.
     * The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.
     *
     * Called by a `auth-service` to request PISP to add the credential details.
     */
    ConsentsIDPutResponseUnsigned: {
      /**
       * The id of the ConsentRequest that was used to initiate the
       * creation of this Consent.
       */
      requestId: string;
      /**
       * FSP identifier.
       */
      participantId: string;
      /**
       * PISP identifier who uses this Consent.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      /**
       * A credential used to allow a user to prove their identity and access
       * to an account with a DFSP.
       *
       * UnsignedCredential is a special formatting of the credential to allow us to be
       * more explicit about the `status` field - it should only ever be PENDING when updating
       * a credential.
       */
      credential: {
        /**
         * The type of the Credential.
         * - "FIDO" - A FIDO public/private keypair.
         */
        type: 'FIDO';
        /**
         * The challenge has initialized but not yet answered by the PISP.
         */
        status: 'PENDING';
        /**
         * The challenge issued by a DFSP that must be answered by the PISP.
         */
        challenge: {
          /**
           * Base64 encoded binary of the challenge that must be answered by the PISP.
           */
          payload: string;
        };
      };
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * VerifiedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be VERIFIED when updating
     * a credential.
     */
    VerifiedCredential: {
      /**
       * The id of a Credential.
       */
      id?: string;
      /**
       * The type of the Credential.
       * - "FIDO" - A FIDO public/private keypair.
       */
      type: 'FIDO';
      /**
       * The Credential is valid, and ready to be used by the PISP.
       */
      status: 'VERIFIED';
      /**
       * The challenge that has been signed by a PISP.
       */
      challenge: {
        /**
         * Base64 encoded binary of the challenge that must be answered by the PISP.
         */
        payload: string;
        /**
         * Base64 encoded binary string or result of the payload signed by the PISP using the private key.
         */
        signature: string;
      };
      /**
       * Base64 encoded bytes - The public key of the Public/Private keypair.
       */
      payload?: string;
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to
     * update a Consent object once it has been Verified.
     *
     * Called by a `auth-service` to notify a DFSP and PISP that a credential has been verified and registered.
     */
    ConsentsIDPutResponseVerified: {
      /**
       * The id of the ConsentRequest that was used to initiate the
       * creation of this Consent.
       */
      requestId: string;
      /**
       * FSP identifier.
       */
      participantId: string;
      /**
       * PISP identifier who uses this Consent.
       */
      initiatorId: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
      /**
       * A credential used to allow a user to prove their identity and access
       * to an account with a DFSP.
       *
       * VerifiedCredential is a special formatting of the credential to allow us to be
       * more explicit about the `status` field - it should only ever be VERIFIED when updating
       * a credential.
       */
      credential: {
        /**
         * The id of a Credential.
         */
        id?: string;
        /**
         * The type of the Credential.
         * - "FIDO" - A FIDO public/private keypair.
         */
        type: 'FIDO';
        /**
         * The Credential is valid, and ready to be used by the PISP.
         */
        status: 'VERIFIED';
        /**
         * The challenge that has been signed by a PISP.
         */
        challenge: {
          /**
           * Base64 encoded binary of the challenge that must be answered by the PISP.
           */
          payload: string;
          /**
           * Base64 encoded binary string or result of the payload signed by the PISP using the private key.
           */
          signature: string;
        };
        /**
         * Base64 encoded bytes - The public key of the Public/Private keypair.
         */
        payload?: string;
      };
    };
    /**
     * The object sent in a `POST /consents` request.
     */
    ConsentsPostRequest: {
      /**
       * Common ID between the PISP and FSP for the Consent object
       * decided by the DFSP who creates the Consent
       * This field is REQUIRED for POST /consent.
       */
      id: string;
      /**
       * The id of the ConsentRequest that was used to initiate the
       * creation of this Consent.
       */
      requestId?: string;
      /**
       * FSP identifier.
       */
      participantId: string;
      /**
       * PISP identifier who uses this Consent.
       */
      initiatorId: string;
      /**
       * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       */
      revokedAt?: string;
      scopes: {
        /**
         * A long-lived unique account identifier provided by the DFSP. This MUST NOT
         * be Bank Account Number or anything that may expose a User's private bank
         * account information.
         */
        accountId: string;
        actions: ('accounts.getBalance' | 'accounts.transfer')[];
      }[];
    };
    /**
     * The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
     */
    ErrorCode: string;
    /**
     * Error description string.
     */
    ErrorDescription: string;
    /**
     * Data model for the complex type ErrorInformation.
     */
    ErrorInformation: {
      /**
       * The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
       */
      errorCode: string;
      /**
       * Error description string.
       */
      errorDescription: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * Date of Birth of the Party.
     */
    DateOfBirth: string;
    /**
     * First name of the Party (Name Type).
     */
    FirstName: string;
    /**
     * Last name of the Party (Name Type).
     */
    LastName: string;
    /**
     * Fulfilment that must be attached to the transfer by the Payee.
     */
    IlpFulfilment: string;
    /**
     * This is a variant based on FSPIOP `PartyIdType` specification.
     * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
     *
     * Below are the allowed values for the enumeration.
     * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
     * Number, that is, the phone number) is used as reference to a participant.
     * The MSISDN identifier should be in international format according to the
     * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
     * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
     * international prefix.
     * - EMAIL - An email is used as reference to a
     * participant. The format of the email should be according to the informational
     * [RFC 3696](https://tools.ietf.org/html/rfc3696).
     * - PERSONAL_ID - A personal identifier is used as reference to a participant.
     * Examples of personal identification are passport number, birth certificate
     * number, and national registration number. The identifier number is added in
     * the PartyIdentifier element. The personal identifier type is added in the
     * PartySubIdOrType element.
     * - BUSINESS - A specific Business (for example, an organization or a company)
     * is used as reference to a participant. The BUSINESS identifier can be in any
     * format. To make a transaction connected to a specific username or bill number
     * in a Business, the PartySubIdOrType element should be used.
     * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
     * specific business or organization is used as reference to a Party.
     * For referencing a specific device under a specific business or organization,
     * use the PartySubIdOrType element.
     * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
     * reference to a participant. The ACCOUNT_ID identifier can be in any format,
     * as formats can greatly differ depending on country and FSP.
     * - IBAN - A bank account number or FSP account ID is used as reference to a
     * participant. The IBAN identifier can consist of up to 34 alphanumeric
     * characters and should be entered without whitespace.
     * - ALIAS An alias is used as reference to a participant. The alias should be
     * created in the FSP as an alternative reference to an account owner.
     * Another example of an alias is a username in the FSP system.
     * The ALIAS identifier can be in any format. It is also possible to use the
     * PartySubIdOrType element for identifying an account under an Alias defined
     * by the PartyIdentifier.
     * - CONSENT - TBD
     * - THIRD_PARTY_LINK - TBD
     */
    PartyIdType:
    | 'MSISDN'
    | 'EMAIL'
    | 'PERSONAL_ID'
    | 'BUSINESS'
    | 'DEVICE'
    | 'ACCOUNT_ID'
    | 'IBAN'
    | 'ALIAS'
    | 'CONSENT'
    | 'THIRD_PARTY_LINK';
    /**
     * Identifier of the Party.
     */
    PartyIdentifier: string;
    /**
     * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
     */
    PartySubIdOrType: string;
    /**
     * Data model for the complex type PartyIdInfo.
     */
    PartyIdInfo: {
      /**
       * This is a variant based on FSPIOP `PartyIdType` specification.
       * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
       *
       * Below are the allowed values for the enumeration.
       * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
       * Number, that is, the phone number) is used as reference to a participant.
       * The MSISDN identifier should be in international format according to the
       * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
       * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
       * international prefix.
       * - EMAIL - An email is used as reference to a
       * participant. The format of the email should be according to the informational
       * [RFC 3696](https://tools.ietf.org/html/rfc3696).
       * - PERSONAL_ID - A personal identifier is used as reference to a participant.
       * Examples of personal identification are passport number, birth certificate
       * number, and national registration number. The identifier number is added in
       * the PartyIdentifier element. The personal identifier type is added in the
       * PartySubIdOrType element.
       * - BUSINESS - A specific Business (for example, an organization or a company)
       * is used as reference to a participant. The BUSINESS identifier can be in any
       * format. To make a transaction connected to a specific username or bill number
       * in a Business, the PartySubIdOrType element should be used.
       * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
       * specific business or organization is used as reference to a Party.
       * For referencing a specific device under a specific business or organization,
       * use the PartySubIdOrType element.
       * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
       * reference to a participant. The ACCOUNT_ID identifier can be in any format,
       * as formats can greatly differ depending on country and FSP.
       * - IBAN - A bank account number or FSP account ID is used as reference to a
       * participant. The IBAN identifier can consist of up to 34 alphanumeric
       * characters and should be entered without whitespace.
       * - ALIAS An alias is used as reference to a participant. The alias should be
       * created in the FSP as an alternative reference to an account owner.
       * Another example of an alias is a username in the FSP system.
       * The ALIAS identifier can be in any format. It is also possible to use the
       * PartySubIdOrType element for identifying an account under an Alias defined
       * by the PartyIdentifier.
       * - CONSENT - TBD
       * - THIRD_PARTY_LINK - TBD
       */
      partyIdType:
      | 'MSISDN'
      | 'EMAIL'
      | 'PERSONAL_ID'
      | 'BUSINESS'
      | 'DEVICE'
      | 'ACCOUNT_ID'
      | 'IBAN'
      | 'ALIAS'
      | 'CONSENT'
      | 'THIRD_PARTY_LINK';
      /**
       * Identifier of the Party.
       */
      partyIdentifier: string;
      /**
       * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
       */
      partySubIdOrType?: string;
      /**
       * FSP identifier.
       */
      fspId?: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
     */
    MerchantClassificationCode: string;
    /**
     * Name of the Party. Could be a real name or a nickname.
     */
    PartyName: string;
    /**
     * Middle name of the Party (Name Type).
     */
    MiddleName: string;
    /**
     * Data model for the complex type PartyComplexName.
     */
    PartyComplexName: {
      /**
       * First name of the Party (Name Type).
       */
      firstName?: string;
      /**
       * Middle name of the Party (Name Type).
       */
      middleName?: string;
      /**
       * Last name of the Party (Name Type).
       */
      lastName?: string;
    };
    /**
     * Data model for the complex type PartyPersonalInfo.
     */
    PartyPersonalInfo: {
      /**
       * Data model for the complex type PartyComplexName.
       */
      complexName?: {
        /**
         * First name of the Party (Name Type).
         */
        firstName?: string;
        /**
         * Middle name of the Party (Name Type).
         */
        middleName?: string;
        /**
         * Last name of the Party (Name Type).
         */
        lastName?: string;
      };
      /**
       * Date of Birth of the Party.
       */
      dateOfBirth?: string;
    };
    /**
     * Data model for the complex type Party.
     */
    Party: {
      /**
       * Data model for the complex type AccountList.
       */
      accounts?: {
        /**
         * Accounts associated with the Party.
         */
        account: {
          /**
           * A long-lived unique account identifier provided by the DFSP. This MUST NOT
           * be Bank Account Number or anything that may expose a User's private bank
           * account information.
           */
          address?: string;
          /**
           * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
           */
          currency:
          | 'AED'
          | 'AFN'
          | 'ALL'
          | 'AMD'
          | 'ANG'
          | 'AOA'
          | 'ARS'
          | 'AUD'
          | 'AWG'
          | 'AZN'
          | 'BAM'
          | 'BBD'
          | 'BDT'
          | 'BGN'
          | 'BHD'
          | 'BIF'
          | 'BMD'
          | 'BND'
          | 'BOB'
          | 'BRL'
          | 'BSD'
          | 'BTN'
          | 'BWP'
          | 'BYN'
          | 'BZD'
          | 'CAD'
          | 'CDF'
          | 'CHF'
          | 'CLP'
          | 'CNY'
          | 'COP'
          | 'CRC'
          | 'CUC'
          | 'CUP'
          | 'CVE'
          | 'CZK'
          | 'DJF'
          | 'DKK'
          | 'DOP'
          | 'DZD'
          | 'EGP'
          | 'ERN'
          | 'ETB'
          | 'EUR'
          | 'FJD'
          | 'FKP'
          | 'GBP'
          | 'GEL'
          | 'GGP'
          | 'GHS'
          | 'GIP'
          | 'GMD'
          | 'GNF'
          | 'GTQ'
          | 'GYD'
          | 'HKD'
          | 'HNL'
          | 'HRK'
          | 'HTG'
          | 'HUF'
          | 'IDR'
          | 'ILS'
          | 'IMP'
          | 'INR'
          | 'IQD'
          | 'IRR'
          | 'ISK'
          | 'JEP'
          | 'JMD'
          | 'JOD'
          | 'JPY'
          | 'KES'
          | 'KGS'
          | 'KHR'
          | 'KMF'
          | 'KPW'
          | 'KRW'
          | 'KWD'
          | 'KYD'
          | 'KZT'
          | 'LAK'
          | 'LBP'
          | 'LKR'
          | 'LRD'
          | 'LSL'
          | 'LYD'
          | 'MAD'
          | 'MDL'
          | 'MGA'
          | 'MKD'
          | 'MMK'
          | 'MNT'
          | 'MOP'
          | 'MRO'
          | 'MUR'
          | 'MVR'
          | 'MWK'
          | 'MXN'
          | 'MYR'
          | 'MZN'
          | 'NAD'
          | 'NGN'
          | 'NIO'
          | 'NOK'
          | 'NPR'
          | 'NZD'
          | 'OMR'
          | 'PAB'
          | 'PEN'
          | 'PGK'
          | 'PHP'
          | 'PKR'
          | 'PLN'
          | 'PYG'
          | 'QAR'
          | 'RON'
          | 'RSD'
          | 'RUB'
          | 'RWF'
          | 'SAR'
          | 'SBD'
          | 'SCR'
          | 'SDG'
          | 'SEK'
          | 'SGD'
          | 'SHP'
          | 'SLL'
          | 'SOS'
          | 'SPL'
          | 'SRD'
          | 'STD'
          | 'SVC'
          | 'SYP'
          | 'SZL'
          | 'THB'
          | 'TJS'
          | 'TMT'
          | 'TND'
          | 'TOP'
          | 'TRY'
          | 'TTD'
          | 'TVD'
          | 'TWD'
          | 'TZS'
          | 'UAH'
          | 'UGX'
          | 'USD'
          | 'UYU'
          | 'UZS'
          | 'VEF'
          | 'VND'
          | 'VUV'
          | 'WST'
          | 'XAF'
          | 'XCD'
          | 'XDR'
          | 'XOF'
          | 'XPF'
          | 'YER'
          | 'ZAR'
          | 'ZMW'
          | 'ZWD';
          /**
           * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
           *
           * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
           *
           * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
           */
          description?: string;
        }[];
      };
      /**
       * Data model for the complex type PartyIdInfo.
       */
      partyIdInfo: {
        /**
         * This is a variant based on FSPIOP `PartyIdType` specification.
         * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
         *
         * Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
         * Number, that is, the phone number) is used as reference to a participant.
         * The MSISDN identifier should be in international format according to the
         * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
         * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
         * international prefix.
         * - EMAIL - An email is used as reference to a
         * participant. The format of the email should be according to the informational
         * [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant.
         * Examples of personal identification are passport number, birth certificate
         * number, and national registration number. The identifier number is added in
         * the PartyIdentifier element. The personal identifier type is added in the
         * PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company)
         * is used as reference to a participant. The BUSINESS identifier can be in any
         * format. To make a transaction connected to a specific username or bill number
         * in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
         * specific business or organization is used as reference to a Party.
         * For referencing a specific device under a specific business or organization,
         * use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
         * reference to a participant. The ACCOUNT_ID identifier can be in any format,
         * as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a
         * participant. The IBAN identifier can consist of up to 34 alphanumeric
         * characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be
         * created in the FSP as an alternative reference to an account owner.
         * Another example of an alias is a username in the FSP system.
         * The ALIAS identifier can be in any format. It is also possible to use the
         * PartySubIdOrType element for identifying an account under an Alias defined
         * by the PartyIdentifier.
         * - CONSENT - TBD
         * - THIRD_PARTY_LINK - TBD
         */
        partyIdType:
        | 'MSISDN'
        | 'EMAIL'
        | 'PERSONAL_ID'
        | 'BUSINESS'
        | 'DEVICE'
        | 'ACCOUNT_ID'
        | 'IBAN'
        | 'ALIAS'
        | 'CONSENT'
        | 'THIRD_PARTY_LINK';
        /**
         * Identifier of the Party.
         */
        partyIdentifier: string;
        /**
         * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        partySubIdOrType?: string;
        /**
         * FSP identifier.
         */
        fspId?: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      };
      /**
       * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
       */
      merchantClassificationCode?: string;
      /**
       * Name of the Party. Could be a real name or a nickname.
       */
      name?: string;
      /**
       * Data model for the complex type PartyPersonalInfo.
       */
      personalInfo?: {
        /**
         * Data model for the complex type PartyComplexName.
         */
        complexName?: {
          /**
           * First name of the Party (Name Type).
           */
          firstName?: string;
          /**
           * Middle name of the Party (Name Type).
           */
          middleName?: string;
          /**
           * Last name of the Party (Name Type).
           */
          lastName?: string;
        };
        /**
         * Date of Birth of the Party.
         */
        dateOfBirth?: string;
      };
    };
    /**
     * Below are the allowed values for the enumeration.
     * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
     * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
     * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
     * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
     * - REFUND - Used for performing a refund of transaction.
     */
    TransactionScenario:
    | 'DEPOSIT'
    | 'WITHDRAWAL'
    | 'TRANSFER'
    | 'PAYMENT'
    | 'REFUND';
    /**
     * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
     */
    TransactionSubScenario: string;
    /**
     * Below are the allowed values for the enumeration.
     * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
     * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
     */
    TransactionInitiator: 'PAYER' | 'PAYEE';
    /**
     * Below are the allowed values for the enumeration.
     * - CONSUMER - Consumer is the initiator of the transaction.
     * - AGENT - Agent is the initiator of the transaction.
     * - BUSINESS - Business is the initiator of the transaction.
     * - DEVICE - Device is the initiator of the transaction.
     */
    TransactionInitiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
    /**
     * Reason for the refund.
     */
    RefundReason: string;
    /**
     * Data model for the complex type Refund.
     */
    Refund: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      originalTransactionId: string;
      /**
       * Reason for the refund.
       */
      refundReason?: string;
    };
    /**
     * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
     */
    BalanceOfPayments: string;
    /**
     * Data model for the complex type TransactionType.
     */
    TransactionType: {
      /**
       * Below are the allowed values for the enumeration.
       * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
       * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
       * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
       * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
       * - REFUND - Used for performing a refund of transaction.
       */
      scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
      /**
       * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
       */
      subScenario?: string;
      /**
       * Below are the allowed values for the enumeration.
       * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
       * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
       */
      initiator: 'PAYER' | 'PAYEE';
      /**
       * Below are the allowed values for the enumeration.
       * - CONSUMER - Consumer is the initiator of the transaction.
       * - AGENT - Agent is the initiator of the transaction.
       * - BUSINESS - Business is the initiator of the transaction.
       * - DEVICE - Device is the initiator of the transaction.
       */
      initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
      /**
       * Data model for the complex type Refund.
       */
      refundInfo?: {
        /**
         * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         */
        originalTransactionId: string;
        /**
         * Reason for the refund.
         */
        refundReason?: string;
      };
      /**
       * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
       */
      balanceOfPayments?: string;
    };
    /**
     * Memo assigned to transaction.
     */
    Note: string;
    /**
     * Data model for the complex type IndividualQuote.
     */
    IndividualQuote: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      quoteId: string;
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Data model for the complex type Party.
       */
      payee: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       */
      amountType: 'SEND' | 'RECEIVE';
      /**
       * Data model for the complex type Money.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      fees?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type TransactionType.
       */
      transactionType: {
        /**
         * Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         */
        scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         */
        subScenario?: string;
        /**
         * Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         */
        initiator: 'PAYER' | 'PAYEE';
        /**
         * Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         */
        initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           */
          originalTransactionId: string;
          /**
           * Reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         */
        balanceOfPayments?: string;
      };
      /**
       * Memo assigned to transaction.
       */
      note?: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * Data model for the complex type IndividualQuoteResult.
     */
    IndividualQuoteResult: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      quoteId: string;
      /**
       * Data model for the complex type Party.
       */
      payee?: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type Money.
       */
      transferAmount?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      payeeReceiveAmount?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      payeeFspFee?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      payeeFspCommission?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Information for recipient (transport layer information).
       */
      ilpPacket?: string;
      /**
       * Condition that must be attached to the transfer by the Payer.
       */
      condition?: string;
      /**
       * Data model for the complex type ErrorInformation.
       */
      errorInformation?: {
        /**
         * The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         */
        errorCode: string;
        /**
         * Error description string.
         */
        errorDescription: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      };
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * The object sent in the POST /participants request.
     */
    ParticipantsPostRequest: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      requestId: string;
      /**
       * List of PartyIdInfo elements that the client would like to update
       * or create FSP information about.
       */
      partyList: {
        /**
         * This is a variant based on FSPIOP `PartyIdType` specification.
         * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
         *
         * Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
         * Number, that is, the phone number) is used as reference to a participant.
         * The MSISDN identifier should be in international format according to the
         * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
         * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
         * international prefix.
         * - EMAIL - An email is used as reference to a
         * participant. The format of the email should be according to the informational
         * [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant.
         * Examples of personal identification are passport number, birth certificate
         * number, and national registration number. The identifier number is added in
         * the PartyIdentifier element. The personal identifier type is added in the
         * PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company)
         * is used as reference to a participant. The BUSINESS identifier can be in any
         * format. To make a transaction connected to a specific username or bill number
         * in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
         * specific business or organization is used as reference to a Party.
         * For referencing a specific device under a specific business or organization,
         * use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
         * reference to a participant. The ACCOUNT_ID identifier can be in any format,
         * as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a
         * participant. The IBAN identifier can consist of up to 34 alphanumeric
         * characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be
         * created in the FSP as an alternative reference to an account owner.
         * Another example of an alias is a username in the FSP system.
         * The ALIAS identifier can be in any format. It is also possible to use the
         * PartySubIdOrType element for identifying an account under an Alias defined
         * by the PartyIdentifier.
         * - CONSENT - TBD
         * - THIRD_PARTY_LINK - TBD
         */
        partyIdType:
        | 'MSISDN'
        | 'EMAIL'
        | 'PERSONAL_ID'
        | 'BUSINESS'
        | 'DEVICE'
        | 'ACCOUNT_ID'
        | 'IBAN'
        | 'ALIAS'
        | 'CONSENT'
        | 'THIRD_PARTY_LINK';
        /**
         * Identifier of the Party.
         */
        partyIdentifier: string;
        /**
         * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        partySubIdOrType?: string;
        /**
         * FSP identifier.
         */
        fspId?: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      }[];
      /**
       * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
       */
      currency?:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GGP'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'IMP'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JEP'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRO'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLL'
      | 'SOS'
      | 'SPL'
      | 'SRD'
      | 'STD'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TVD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VEF'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPF'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZWD';
    };
    /**
     * The object sent in the PUT /parties/{Type}/{ID} callback.
     *
     * This is a variant based on FSPIOP `PartiesTypeIDPutResponse` specification.
     * Main difference being that it returns a `Party` with the newly added
     * `accounts` property.
     */
    PartiesTypeIDPutResponse: {
      /**
       * Data model for the complex type Party.
       */
      party: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
    };
    /**
     * Data model for the complex type PartyResult.
     */
    PartyResult: {
      /**
       * Data model for the complex type PartyIdInfo.
       */
      partyId: {
        /**
         * This is a variant based on FSPIOP `PartyIdType` specification.
         * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
         *
         * Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
         * Number, that is, the phone number) is used as reference to a participant.
         * The MSISDN identifier should be in international format according to the
         * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
         * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
         * international prefix.
         * - EMAIL - An email is used as reference to a
         * participant. The format of the email should be according to the informational
         * [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant.
         * Examples of personal identification are passport number, birth certificate
         * number, and national registration number. The identifier number is added in
         * the PartyIdentifier element. The personal identifier type is added in the
         * PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company)
         * is used as reference to a participant. The BUSINESS identifier can be in any
         * format. To make a transaction connected to a specific username or bill number
         * in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
         * specific business or organization is used as reference to a Party.
         * For referencing a specific device under a specific business or organization,
         * use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
         * reference to a participant. The ACCOUNT_ID identifier can be in any format,
         * as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a
         * participant. The IBAN identifier can consist of up to 34 alphanumeric
         * characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be
         * created in the FSP as an alternative reference to an account owner.
         * Another example of an alias is a username in the FSP system.
         * The ALIAS identifier can be in any format. It is also possible to use the
         * PartySubIdOrType element for identifying an account under an Alias defined
         * by the PartyIdentifier.
         * - CONSENT - TBD
         * - THIRD_PARTY_LINK - TBD
         */
        partyIdType:
        | 'MSISDN'
        | 'EMAIL'
        | 'PERSONAL_ID'
        | 'BUSINESS'
        | 'DEVICE'
        | 'ACCOUNT_ID'
        | 'IBAN'
        | 'ALIAS'
        | 'CONSENT'
        | 'THIRD_PARTY_LINK';
        /**
         * Identifier of the Party.
         */
        partyIdentifier: string;
        /**
         * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        partySubIdOrType?: string;
        /**
         * FSP identifier.
         */
        fspId?: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      };
      /**
       * Data model for the complex type ErrorInformation.
       */
      errorInformation?: {
        /**
         * The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         */
        errorCode: string;
        /**
         * Error description string.
         */
        errorDescription: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      };
    };
    /**
     * The object sent in the POST /quotes request.
     */
    QuotesPostRequest: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      quoteId: string;
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionRequestId?: string;
      /**
       * Data model for the complex type Party.
       */
      payee: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type Party.
       */
      payer: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Below are the allowed values for the enumeration AmountType.
       * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
       * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
       */
      amountType: 'SEND' | 'RECEIVE';
      /**
       * Data model for the complex type Money.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type Money.
       */
      fees?: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type TransactionType.
       */
      transactionType: {
        /**
         * Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         */
        scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         */
        subScenario?: string;
        /**
         * Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         */
        initiator: 'PAYER' | 'PAYEE';
        /**
         * Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         */
        initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           */
          originalTransactionId: string;
          /**
           * Reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         */
        balanceOfPayments?: string;
      };
      /**
       * Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
       */
      geoCode?: {
        /**
         * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         */
        latitude: string;
        /**
         * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         */
        longitude: string;
      };
      /**
       * Memo assigned to transaction.
       */
      note?: string;
      /**
       * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       */
      expiration?: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request.
     */
    ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest: {
      /**
       * Base64 encoded binary string - the original challenge.
       */
      challenge: string;
      /**
       * Base64 encoded binary string - the signed challenge
       */
      value: string;
      /**
       * Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
       */
      consentId: string;
      /**
       * DFSP specific account identifiers, e.g. `dfspa.alice.1234`
       */
      sourceAccountId: string;
      /**
       * The status of the authorization. This MUST be PENDING for a POST request
       */
      status: 'PENDING';
    };
    /**
     * The object sent in the PUT /thirdpartyRequests/transactions/{id}/authorizations request.
     */
    ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse: {
      /**
       * Base64 encoded binary string - the original challenge.
       */
      challenge: string;
      /**
       * Base64 encoded binary string - the signed challenge.
       */
      value: string;
      /**
       * Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which consent allows the PISP to initiate transaction.
       */
      consentId: string;
      /**
       * DFSP specific account identifiers, e.g. `dfspa.alice.1234`
       */
      sourceAccountId: string;
      /**
       * The status of the authorization. This value must be `VERIFIED` for a PUT request.
       */
      status: 'VERIFIED';
    };
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
     * - PENDING - Payer FSP has sent the transaction request to the Payer.
     * - ACCEPTED - Payer has approved the transaction.
     * - REJECTED - Payer has rejected the transaction.
     */
    TransactionRequestState: 'RECEIVED' | 'PENDING' | 'ACCEPTED' | 'REJECTED';
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
     * - PENDING - Payee FSP has validated the transaction.
     * - COMPLETED - Payee FSP has successfully performed the transaction.
     * - REJECTED - Payee FSP has failed to perform the transaction.
     */
    TransactionState: 'RECEIVED' | 'PENDING' | 'COMPLETED' | 'REJECTED';
    /**
     * The object sent in the PATCH /thirdpartyRequests/transactions/{ID} callback.
     */
    ThirdpartyRequestsTransactionsIDPatchResponse: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Below are the allowed values for the enumeration.
       * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
       * - PENDING - Payer FSP has sent the transaction request to the Payer.
       * - ACCEPTED - Payer has approved the transaction.
       * - REJECTED - Payer has rejected the transaction.
       */
      transactionRequestState: 'RECEIVED' | 'PENDING' | 'ACCEPTED' | 'REJECTED';
      /**
       * Below are the allowed values for the enumeration.
       * - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
       * - PENDING - Payee FSP has validated the transaction.
       * - COMPLETED - Payee FSP has successfully performed the transaction.
       * - REJECTED - Payee FSP has failed to perform the transaction.
       */
      transactionState: 'RECEIVED' | 'PENDING' | 'COMPLETED' | 'REJECTED';
    };
    /**
     * The object sent in the PUT /thirdPartyRequests/transactions/{ID} request.
     */
    ThirdpartyRequestsTransactionsIDPutResponse: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Below are the allowed values for the enumeration.
       * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
       * - PENDING - Payer FSP has sent the transaction request to the Payer.
       * - ACCEPTED - Payer has approved the transaction.
       * - REJECTED - Payer has rejected the transaction.
       */
      transactionRequestState: 'RECEIVED' | 'PENDING' | 'ACCEPTED' | 'REJECTED';
    };
    /**
     * The object sent in the POST /thirdpartyRequests/transactions request.
     */
    ThirdpartyRequestsTransactionsPostRequest: {
      /**
       * Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
       */
      transactionRequestId: string;
      /**
       * DFSP specific account identifiers, e.g. `dfspa.alice.1234`
       */
      sourceAccountId: string;
      /**
       * Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
       */
      consentId: string;
      /**
       * Information about the Payee in the proposed financial transaction.
       */
      payee: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Information about the Payer in the proposed financial transaction.
       */
      payer: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * SEND for sendAmount, RECEIVE for receiveAmount.
       */
      amountType: 'SEND' | 'RECEIVE';
      /**
       * Requested amount to be transferred from the Payer to Payee.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Type of transaction.
       */
      transactionType: {
        /**
         * Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         */
        scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         */
        subScenario?: string;
        /**
         * Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         */
        initiator: 'PAYER' | 'PAYEE';
        /**
         * Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         */
        initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           */
          originalTransactionId: string;
          /**
           * Reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         */
        balanceOfPayments?: string;
      };
      /**
       * Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.
       */
      expiration: string;
    };
    /**
     * The object sent in the POST /transactionRequests request.
     */
    TransactionRequestsPostRequest: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionRequestId: string;
      /**
       * Data model for the complex type Party.
       */
      payee: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type PartyIdInfo.
       */
      payer: {
        /**
         * This is a variant based on FSPIOP `PartyIdType` specification.
         * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
         *
         * Below are the allowed values for the enumeration.
         * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
         * Number, that is, the phone number) is used as reference to a participant.
         * The MSISDN identifier should be in international format according to the
         * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
         * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
         * international prefix.
         * - EMAIL - An email is used as reference to a
         * participant. The format of the email should be according to the informational
         * [RFC 3696](https://tools.ietf.org/html/rfc3696).
         * - PERSONAL_ID - A personal identifier is used as reference to a participant.
         * Examples of personal identification are passport number, birth certificate
         * number, and national registration number. The identifier number is added in
         * the PartyIdentifier element. The personal identifier type is added in the
         * PartySubIdOrType element.
         * - BUSINESS - A specific Business (for example, an organization or a company)
         * is used as reference to a participant. The BUSINESS identifier can be in any
         * format. To make a transaction connected to a specific username or bill number
         * in a Business, the PartySubIdOrType element should be used.
         * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
         * specific business or organization is used as reference to a Party.
         * For referencing a specific device under a specific business or organization,
         * use the PartySubIdOrType element.
         * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
         * reference to a participant. The ACCOUNT_ID identifier can be in any format,
         * as formats can greatly differ depending on country and FSP.
         * - IBAN - A bank account number or FSP account ID is used as reference to a
         * participant. The IBAN identifier can consist of up to 34 alphanumeric
         * characters and should be entered without whitespace.
         * - ALIAS An alias is used as reference to a participant. The alias should be
         * created in the FSP as an alternative reference to an account owner.
         * Another example of an alias is a username in the FSP system.
         * The ALIAS identifier can be in any format. It is also possible to use the
         * PartySubIdOrType element for identifying an account under an Alias defined
         * by the PartyIdentifier.
         * - CONSENT - TBD
         * - THIRD_PARTY_LINK - TBD
         */
        partyIdType:
        | 'MSISDN'
        | 'EMAIL'
        | 'PERSONAL_ID'
        | 'BUSINESS'
        | 'DEVICE'
        | 'ACCOUNT_ID'
        | 'IBAN'
        | 'ALIAS'
        | 'CONSENT'
        | 'THIRD_PARTY_LINK';
        /**
         * Identifier of the Party.
         */
        partyIdentifier: string;
        /**
         * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        partySubIdOrType?: string;
        /**
         * FSP identifier.
         */
        fspId?: string;
        /**
         * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        extensionList?: {
          /**
           * Number of Extension elements.
           */
          extension: {
            /**
             * Extension key.
             */
            key: string;
            /**
             * Extension value.
             */
            value: string;
          }[];
        };
      };
      /**
       * Data model for the complex type Money.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type TransactionType.
       */
      transactionType: {
        /**
         * Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         */
        scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         */
        subScenario?: string;
        /**
         * Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         */
        initiator: 'PAYER' | 'PAYEE';
        /**
         * Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         */
        initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           */
          originalTransactionId: string;
          /**
           * Reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         */
        balanceOfPayments?: string;
      };
      /**
       * Memo assigned to transaction.
       */
      note?: string;
      /**
       * Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
       */
      geoCode?: {
        /**
         * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         */
        latitude: string;
        /**
         * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         */
        longitude: string;
      };
      /**
       * Below are the allowed values for the enumeration AuthenticationType.
       * - OTP - One-time password generated by the Payer FSP.
       * - QRCODE - QR code used as One Time Password.
       * - U2F - U2F is a new addition isolated to Thirdparty stream.
       */
      authenticationType?: 'OTP' | 'QRCODE' | 'U2F';
      /**
       * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
       */
      expiration?: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes request.
     */
    Transaction: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      quoteId: string;
      /**
       * Data model for the complex type Party.
       */
      payee: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type Party.
       */
      payer: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type Money.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type TransactionType.
       */
      transactionType: {
        /**
         * Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         */
        scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         */
        subScenario?: string;
        /**
         * Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         */
        initiator: 'PAYER' | 'PAYEE';
        /**
         * Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         */
        initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           */
          originalTransactionId: string;
          /**
           * Reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         */
        balanceOfPayments?: string;
      };
      /**
       * Memo assigned to transaction.
       */
      note?: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
    /**
     * Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes request.
     */
    Transactione: {
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      transactionId: string;
      /**
       * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
       */
      quoteId: string;
      /**
       * Data model for the complex type Party.
       */
      payee: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type Party.
       */
      payer: {
        /**
         * Data model for the complex type AccountList.
         */
        accounts?: {
          /**
           * Accounts associated with the Party.
           */
          account: {
            /**
             * A long-lived unique account identifier provided by the DFSP. This MUST NOT
             * be Bank Account Number or anything that may expose a User's private bank
             * account information.
             */
            address?: string;
            /**
             * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
             */
            currency:
            | 'AED'
            | 'AFN'
            | 'ALL'
            | 'AMD'
            | 'ANG'
            | 'AOA'
            | 'ARS'
            | 'AUD'
            | 'AWG'
            | 'AZN'
            | 'BAM'
            | 'BBD'
            | 'BDT'
            | 'BGN'
            | 'BHD'
            | 'BIF'
            | 'BMD'
            | 'BND'
            | 'BOB'
            | 'BRL'
            | 'BSD'
            | 'BTN'
            | 'BWP'
            | 'BYN'
            | 'BZD'
            | 'CAD'
            | 'CDF'
            | 'CHF'
            | 'CLP'
            | 'CNY'
            | 'COP'
            | 'CRC'
            | 'CUC'
            | 'CUP'
            | 'CVE'
            | 'CZK'
            | 'DJF'
            | 'DKK'
            | 'DOP'
            | 'DZD'
            | 'EGP'
            | 'ERN'
            | 'ETB'
            | 'EUR'
            | 'FJD'
            | 'FKP'
            | 'GBP'
            | 'GEL'
            | 'GGP'
            | 'GHS'
            | 'GIP'
            | 'GMD'
            | 'GNF'
            | 'GTQ'
            | 'GYD'
            | 'HKD'
            | 'HNL'
            | 'HRK'
            | 'HTG'
            | 'HUF'
            | 'IDR'
            | 'ILS'
            | 'IMP'
            | 'INR'
            | 'IQD'
            | 'IRR'
            | 'ISK'
            | 'JEP'
            | 'JMD'
            | 'JOD'
            | 'JPY'
            | 'KES'
            | 'KGS'
            | 'KHR'
            | 'KMF'
            | 'KPW'
            | 'KRW'
            | 'KWD'
            | 'KYD'
            | 'KZT'
            | 'LAK'
            | 'LBP'
            | 'LKR'
            | 'LRD'
            | 'LSL'
            | 'LYD'
            | 'MAD'
            | 'MDL'
            | 'MGA'
            | 'MKD'
            | 'MMK'
            | 'MNT'
            | 'MOP'
            | 'MRO'
            | 'MUR'
            | 'MVR'
            | 'MWK'
            | 'MXN'
            | 'MYR'
            | 'MZN'
            | 'NAD'
            | 'NGN'
            | 'NIO'
            | 'NOK'
            | 'NPR'
            | 'NZD'
            | 'OMR'
            | 'PAB'
            | 'PEN'
            | 'PGK'
            | 'PHP'
            | 'PKR'
            | 'PLN'
            | 'PYG'
            | 'QAR'
            | 'RON'
            | 'RSD'
            | 'RUB'
            | 'RWF'
            | 'SAR'
            | 'SBD'
            | 'SCR'
            | 'SDG'
            | 'SEK'
            | 'SGD'
            | 'SHP'
            | 'SLL'
            | 'SOS'
            | 'SPL'
            | 'SRD'
            | 'STD'
            | 'SVC'
            | 'SYP'
            | 'SZL'
            | 'THB'
            | 'TJS'
            | 'TMT'
            | 'TND'
            | 'TOP'
            | 'TRY'
            | 'TTD'
            | 'TVD'
            | 'TWD'
            | 'TZS'
            | 'UAH'
            | 'UGX'
            | 'USD'
            | 'UYU'
            | 'UZS'
            | 'VEF'
            | 'VND'
            | 'VUV'
            | 'WST'
            | 'XAF'
            | 'XCD'
            | 'XDR'
            | 'XOF'
            | 'XPF'
            | 'YER'
            | 'ZAR'
            | 'ZMW'
            | 'ZWD';
            /**
             * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
             *
             * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
             *
             * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
             */
            description?: string;
          }[];
        };
        /**
         * Data model for the complex type PartyIdInfo.
         */
        partyIdInfo: {
          /**
           * This is a variant based on FSPIOP `PartyIdType` specification.
           * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
           *
           * Below are the allowed values for the enumeration.
           * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
           * Number, that is, the phone number) is used as reference to a participant.
           * The MSISDN identifier should be in international format according to the
           * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
           * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
           * international prefix.
           * - EMAIL - An email is used as reference to a
           * participant. The format of the email should be according to the informational
           * [RFC 3696](https://tools.ietf.org/html/rfc3696).
           * - PERSONAL_ID - A personal identifier is used as reference to a participant.
           * Examples of personal identification are passport number, birth certificate
           * number, and national registration number. The identifier number is added in
           * the PartyIdentifier element. The personal identifier type is added in the
           * PartySubIdOrType element.
           * - BUSINESS - A specific Business (for example, an organization or a company)
           * is used as reference to a participant. The BUSINESS identifier can be in any
           * format. To make a transaction connected to a specific username or bill number
           * in a Business, the PartySubIdOrType element should be used.
           * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
           * specific business or organization is used as reference to a Party.
           * For referencing a specific device under a specific business or organization,
           * use the PartySubIdOrType element.
           * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
           * reference to a participant. The ACCOUNT_ID identifier can be in any format,
           * as formats can greatly differ depending on country and FSP.
           * - IBAN - A bank account number or FSP account ID is used as reference to a
           * participant. The IBAN identifier can consist of up to 34 alphanumeric
           * characters and should be entered without whitespace.
           * - ALIAS An alias is used as reference to a participant. The alias should be
           * created in the FSP as an alternative reference to an account owner.
           * Another example of an alias is a username in the FSP system.
           * The ALIAS identifier can be in any format. It is also possible to use the
           * PartySubIdOrType element for identifying an account under an Alias defined
           * by the PartyIdentifier.
           * - CONSENT - TBD
           * - THIRD_PARTY_LINK - TBD
           */
          partyIdType:
          | 'MSISDN'
          | 'EMAIL'
          | 'PERSONAL_ID'
          | 'BUSINESS'
          | 'DEVICE'
          | 'ACCOUNT_ID'
          | 'IBAN'
          | 'ALIAS'
          | 'CONSENT'
          | 'THIRD_PARTY_LINK';
          /**
           * Identifier of the Party.
           */
          partyIdentifier: string;
          /**
           * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
           */
          partySubIdOrType?: string;
          /**
           * FSP identifier.
           */
          fspId?: string;
          /**
           * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
           */
          extensionList?: {
            /**
             * Number of Extension elements.
             */
            extension: {
              /**
               * Extension key.
               */
              key: string;
              /**
               * Extension value.
               */
              value: string;
            }[];
          };
        };
        /**
         * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        merchantClassificationCode?: string;
        /**
         * Name of the Party. Could be a real name or a nickname.
         */
        name?: string;
        /**
         * Data model for the complex type PartyPersonalInfo.
         */
        personalInfo?: {
          /**
           * Data model for the complex type PartyComplexName.
           */
          complexName?: {
            /**
             * First name of the Party (Name Type).
             */
            firstName?: string;
            /**
             * Middle name of the Party (Name Type).
             */
            middleName?: string;
            /**
             * Last name of the Party (Name Type).
             */
            lastName?: string;
          };
          /**
           * Date of Birth of the Party.
           */
          dateOfBirth?: string;
        };
      };
      /**
       * Data model for the complex type Money.
       */
      amount: {
        /**
         * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         */
        currency:
        | 'AED'
        | 'AFN'
        | 'ALL'
        | 'AMD'
        | 'ANG'
        | 'AOA'
        | 'ARS'
        | 'AUD'
        | 'AWG'
        | 'AZN'
        | 'BAM'
        | 'BBD'
        | 'BDT'
        | 'BGN'
        | 'BHD'
        | 'BIF'
        | 'BMD'
        | 'BND'
        | 'BOB'
        | 'BRL'
        | 'BSD'
        | 'BTN'
        | 'BWP'
        | 'BYN'
        | 'BZD'
        | 'CAD'
        | 'CDF'
        | 'CHF'
        | 'CLP'
        | 'CNY'
        | 'COP'
        | 'CRC'
        | 'CUC'
        | 'CUP'
        | 'CVE'
        | 'CZK'
        | 'DJF'
        | 'DKK'
        | 'DOP'
        | 'DZD'
        | 'EGP'
        | 'ERN'
        | 'ETB'
        | 'EUR'
        | 'FJD'
        | 'FKP'
        | 'GBP'
        | 'GEL'
        | 'GGP'
        | 'GHS'
        | 'GIP'
        | 'GMD'
        | 'GNF'
        | 'GTQ'
        | 'GYD'
        | 'HKD'
        | 'HNL'
        | 'HRK'
        | 'HTG'
        | 'HUF'
        | 'IDR'
        | 'ILS'
        | 'IMP'
        | 'INR'
        | 'IQD'
        | 'IRR'
        | 'ISK'
        | 'JEP'
        | 'JMD'
        | 'JOD'
        | 'JPY'
        | 'KES'
        | 'KGS'
        | 'KHR'
        | 'KMF'
        | 'KPW'
        | 'KRW'
        | 'KWD'
        | 'KYD'
        | 'KZT'
        | 'LAK'
        | 'LBP'
        | 'LKR'
        | 'LRD'
        | 'LSL'
        | 'LYD'
        | 'MAD'
        | 'MDL'
        | 'MGA'
        | 'MKD'
        | 'MMK'
        | 'MNT'
        | 'MOP'
        | 'MRO'
        | 'MUR'
        | 'MVR'
        | 'MWK'
        | 'MXN'
        | 'MYR'
        | 'MZN'
        | 'NAD'
        | 'NGN'
        | 'NIO'
        | 'NOK'
        | 'NPR'
        | 'NZD'
        | 'OMR'
        | 'PAB'
        | 'PEN'
        | 'PGK'
        | 'PHP'
        | 'PKR'
        | 'PLN'
        | 'PYG'
        | 'QAR'
        | 'RON'
        | 'RSD'
        | 'RUB'
        | 'RWF'
        | 'SAR'
        | 'SBD'
        | 'SCR'
        | 'SDG'
        | 'SEK'
        | 'SGD'
        | 'SHP'
        | 'SLL'
        | 'SOS'
        | 'SPL'
        | 'SRD'
        | 'STD'
        | 'SVC'
        | 'SYP'
        | 'SZL'
        | 'THB'
        | 'TJS'
        | 'TMT'
        | 'TND'
        | 'TOP'
        | 'TRY'
        | 'TTD'
        | 'TVD'
        | 'TWD'
        | 'TZS'
        | 'UAH'
        | 'UGX'
        | 'USD'
        | 'UYU'
        | 'UZS'
        | 'VEF'
        | 'VND'
        | 'VUV'
        | 'WST'
        | 'XAF'
        | 'XCD'
        | 'XDR'
        | 'XOF'
        | 'XPF'
        | 'YER'
        | 'ZAR'
        | 'ZMW'
        | 'ZWD';
        /**
         * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         */
        amount: string;
      };
      /**
       * Data model for the complex type TransactionType.
       */
      transactionType: {
        /**
         * Below are the allowed values for the enumeration.
         * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         * - REFUND - Used for performing a refund of transaction.
         */
        scenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         */
        subScenario?: string;
        /**
         * Below are the allowed values for the enumeration.
         * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         */
        initiator: 'PAYER' | 'PAYEE';
        /**
         * Below are the allowed values for the enumeration.
         * - CONSUMER - Consumer is the initiator of the transaction.
         * - AGENT - Agent is the initiator of the transaction.
         * - BUSINESS - Business is the initiator of the transaction.
         * - DEVICE - Device is the initiator of the transaction.
         */
        initiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * Data model for the complex type Refund.
         */
        refundInfo?: {
          /**
           * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
           */
          originalTransactionId: string;
          /**
           * Reason for the refund.
           */
          refundReason?: string;
        };
        /**
         * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         */
        balanceOfPayments?: string;
      };
      /**
       * Memo assigned to transaction.
       */
      note?: string;
      /**
       * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
       */
      extensionList?: {
        /**
         * Number of Extension elements.
         */
        extension: {
          /**
           * Extension key.
           */
          key: string;
          /**
           * Extension value.
           */
          value: string;
        }[];
      };
    };
  };
}
