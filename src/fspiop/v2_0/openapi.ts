/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/participants/{Type}/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Look up participant information
         * @description The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
         */
        get: operations["ParticipantsByTypeAndID"];
        /**
         * Return participant information
         * @description The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.
         */
        put: operations["ParticipantsByTypeAndID3"];
        /**
         * Create participant information
         * @description The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1
         */
        post: operations["ParticipantsByIDAndType"];
        /**
         * Delete participant information
         * @description The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
         *
         *     **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
         */
        delete: operations["ParticipantsByTypeAndID2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants/{Type}/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return participant information error
         * @description If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.
         */
        put: operations["ParticipantsErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants/{Type}/{ID}/{SubId}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /**
         * Look up participant information
         * @description The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
         */
        get: operations["ParticipantsSubIdByTypeAndID"];
        /**
         * Return participant information
         * @description The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.
         */
        put: operations["ParticipantsSubIdByTypeAndID3"];
        /**
         * Create participant information
         * @description The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1
         */
        post: operations["ParticipantsSubIdByTypeAndIDPost"];
        /**
         * Delete participant information
         * @description The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
         *
         *     **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
         */
        delete: operations["ParticipantsSubIdByTypeAndID2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants/{Type}/{ID}/{SubId}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return participant information error
         * @description If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.
         */
        put: operations["ParticipantsSubIdErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create bulk participant information
         * @description The HTTP request `POST /participants` is used to create information in the server regarding the provided list of identities. This request should be used for bulk creation of FSP information for more than one Party. The optional currency parameter should indicate that each provided Party supports the currency.
         */
        post: operations["Participants1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants/{ID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return bulk participant information
         * @description The callback `PUT /participants/{ID}` is used to inform the client of the result of the creation of the provided list of identities.
         */
        put: operations["putParticipantsByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return bulk participant information error
         * @description If there is an error during FSP information creation in the server, the error callback `PUT /participants/{ID}/error` is used. The `{ID}` in the URI should contain the requestId that was used for the creation of the participant information.
         */
        put: operations["ParticipantsByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Look up party information
         * @description The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
         */
        get: operations["PartiesByTypeAndID"];
        /**
         * Return party information
         * @description The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
         */
        put: operations["PartiesByTypeAndID2"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return party information error
         * @description If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubI}/error`) is used.
         */
        put: operations["PartiesErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/{SubId}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /**
         * Look up party information
         * @description The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
         */
        get: operations["PartiesSubIdByTypeAndID"];
        /**
         * Return party information
         * @description The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
         */
        put: operations["PartiesSubIdByTypeAndIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/{SubId}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return party information error
         * @description If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubId}/error`) is used.
         */
        put: operations["PartiesSubIdErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactionRequests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform transaction request
         * @description The HTTP request `POST /transactionRequests` is used to request the creation of a transaction request for the provided financial transaction in the server.
         */
        post: operations["TransactionRequests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactionRequests/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve transaction request information
         * @description The HTTP request `GET /transactionRequests/{ID}` is used to get information regarding a transaction request created or requested earlier. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request.
         */
        get: operations["TransactionRequestsByID"];
        /**
         * Return transaction request information
         * @description The callback `PUT /transactionRequests/{ID}` is used to inform the client of a requested or created transaction request. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request, or the `{ID}` that was used in the `GET /transactionRequests/{ID}`.
         */
        put: operations["TransactionRequestsByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactionRequests/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return transaction request information error
         * @description If the server is unable to find or create a transaction request, or another processing error occurs, the error callback `PUT /transactionRequests/{ID}/error` is used. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request, or the `{ID}` that was used in the `GET /transactionRequests/{ID}`.
         */
        put: operations["TransactionRequestsErrorByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate quote
         * @description The HTTP request `POST /quotes` is used to request the creation of a quote for the provided financial transaction in the server.
         */
        post: operations["Quotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve quote information
         * @description The HTTP request `GET /quotes/{ID}` is used to get information regarding a quote created or requested earlier. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote.
         */
        get: operations["QuotesByID"];
        /**
         * Return quote information
         * @description The callback `PUT /quotes/{ID}` is used to inform the client of a requested or created quote. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
         */
        put: operations["QuotesByID1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return quote information error
         * @description If the server is unable to find or create a quote, or some other processing error occurs, the error callback `PUT /quotes/{ID}/error` is used. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
         */
        put: operations["QuotesByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Perform authorization
         * @description The HTTP request `GET /authorizations/{ID}` is used to request the Payer to enter the applicable credentials in the Payee FSP system. The `{ID}` in the URI should contain the `transactionRequestID`, received from the `POST /transactionRequests` service earlier in the process. This request requires a query string to be included in the URI, with the following key-value pairs*:*
         *
         *     - `authenticationType={Type}`, where `{Type}` value is a valid authentication type from the enumeration `AuthenticationType`.
         *
         *     - `retriesLeft=={NrOfRetries}`, where `{NrOfRetries}` is the number of retries left before the financial transaction is rejected. `{NrOfRetries}` must be expressed in the form of the data type `Integer`. `retriesLeft=1` means that this is the last retry before the financial transaction is rejected.
         *
         *     - `amount={Amount}`, where `{Amount}` is the transaction amount that will be withdrawn from the Payer’s account. `{Amount}` must be expressed in the form of the data type `Amount`.
         *
         *     - `currency={Currency}`, where `{Currency}` is the transaction currency for the amount that will be withdrawn from the Payer’s account. The `{Currency}` value must be expressed in the form of the enumeration `CurrencyCode`.
         *
         *     The following is an example URI containing all the required key-value pairs in the query string*:*
         *
         *     `GET /authorization/3d492671-b7af-4f3f-88de-76169b1bdf88?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD`
         */
        get: operations["AuthorizationsByIDGet"];
        /**
         * Return authorization result
         * @description The callback `PUT /authorizations/{ID}` is used to inform the client of the result of a previously-requested authorization. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /authorizations/{ID}` request.
         */
        put: operations["AuthorizationsByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return authorization error
         * @description If the server is unable to find the transaction request, or another processing error occurs, the error callback `PUT /authorizations/{ID}/error` is used. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /authorizations/{ID}`.
         */
        put: operations["AuthorizationsByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform transfer
         * @description The HTTP request `POST /transfers` is used to request the creation of a transfer for the next ledger, and a financial transaction for the Payee FSP.
         */
        post: operations["transfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve transfer information
         * @description The HTTP request `GET /transfers/{ID}` is used to get information regarding a transfer created or requested earlier. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer.
         */
        get: operations["TransfersByIDGet"];
        /**
         * Return transfer information
         * @description The callback `PUT /transfers/{ID}` is used to inform the client of a requested or created transfer. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}` request.
         */
        put: operations["TransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Return transfer information
         * @description The HTTP request PATCH /transfers/<ID> is used by a Switch to update the state of a previously reserved transfer, if the Payee FSP has requested a commit notification when the Switch has completed processing of the transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer. Please note that this request does not generate a callback.
         */
        patch: operations["TransfersByIDPatch"];
        trace?: never;
    };
    "/transfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return transfer information error
         * @description If the server is unable to find or create a transfer, or another processing error occurs, the error callback `PUT /transfers/{ID}/error` is used. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}`.
         */
        put: operations["TransfersByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve transaction information
         * @description The HTTP request `GET /transactions/{ID}` is used to get transaction information regarding a financial transaction created earlier. The `{ID}` in the URI should contain the `transactionId` that was used for the creation of the quote, as the transaction is created as part of another process (the transfer process).
         */
        get: operations["TransactionsByID"];
        /**
         * Return transaction information
         * @description The callback `PUT /transactions/{ID}` is used to inform the client of a requested transaction. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /transactions/{ID}` request.
         */
        put: operations["TransactionsByID1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return transaction information error
         * @description If the server is unable to find or create a transaction, or another processing error occurs, the error callback `PUT /transactions/{ID}/error` is used. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /transactions/{ID}` request.
         */
        put: operations["TransactionsErrorByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkQuotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate bulk quote
         * @description The HTTP request `POST /bulkQuotes` is used to request the creation of a bulk quote for the provided financial transactions in the server.
         */
        post: operations["BulkQuotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkQuotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve bulk quote information
         * @description The HTTP request `GET /bulkQuotes/{ID}` is used to get information regarding a bulk quote created or requested earlier. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote.
         */
        get: operations["BulkQuotesByID"];
        /**
         * Return bulk quote information
         * @description The callback `PUT /bulkQuotes/{ID}` is used to inform the client of a requested or created bulk quote. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote, or the `{ID}` that was used in the `GET /bulkQuotes/{ID}` request.
         */
        put: operations["BulkQuotesByID1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkQuotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return bulk quote information error
         * @description If the server is unable to find or create a bulk quote, or another processing error occurs, the error callback `PUT /bulkQuotes/{ID}/error` is used. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote, or the `{ID}` that was used in the `GET /bulkQuotes/{ID}` request.
         */
        put: operations["BulkQuotesErrorByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkTransfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform bulk transfer
         * @description The HTTP request `POST /bulkTransfers` is used to request the creation of a bulk transfer in the server.
         */
        post: operations["BulkTransfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkTransfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve bulk transfer information
         * @description The HTTP request `GET /bulkTransfers/{ID}` is used to get information regarding a bulk transfer created or requested earlier. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer.
         */
        get: operations["BulkTransferByID"];
        /**
         * Return bulk transfer information
         * @description The callback `PUT /bulkTransfers/{ID}` is used to inform the client of a requested or created bulk transfer. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer (`POST /bulkTransfers`), or the `{ID}` that was used in the `GET /bulkTransfers/{ID}` request.
         */
        put: operations["BulkTransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkTransfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return bulk transfer information error
         * @description If the server is unable to find or create a bulk transfer, or another processing error occurs, the error callback `PUT /bulkTransfers/{ID}/error` is used. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer (`POST /bulkTransfers`), or the `{ID}` that was used in the `GET /bulkTransfers/{ID}` request.
         */
        put: operations["BulkTransfersErrorByID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate FX quote
         * @description The HTTP request `POST /fxQuotes` is used to ask an FXP to provide a quotation for a currency conversion.
         */
        post: operations["FxQuotesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve FX quote information
         * @description The HTTP request `GET /fxQuotes/{ID}` is used to request information regarding a request for quotation for a  currency conversion which the sender has previously issued. The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the quote.
         */
        get: operations["FxQuotesByIDGet"];
        /**
         * Return FX quote information
         * @description The callback `PUT /fxQuotes/{ID}` is used to inform the requester about the  outcome of a request for quotation for a currency conversion.  The `{ID}` in the URI should contain the `conversionRequestId` that was used for the  creation of the FX quote, or the `{ID}` that was used in the `GET /fxQuotes/{ID}` request.
         */
        put: operations["FxQuotesByIdPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return FX quote information error
         * @description If the FXP is unable to find or create a FX quote, or some other processing error occurs, the error callback `PUT /fxQuotes/{ID}/error` is used. The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the FX quote, or the `{ID}` that was used in the `GET /fxQuotes/{ID}` request.
         */
        put: operations["FxQuotesByIDAndErrorPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxTransfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform FX transfer
         * @description The HTTP request `POST /fxTransfers` is used to ask an FXP to confirm the execution of an agreed currency conversion.
         */
        post: operations["FxTransfersPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxTransfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve FX transfer information
         * @description The HTTP request `GET /fxTransfers/{ID}` s used to request information regarding a request for confirmation of a currency conversion which the sender has previously issued. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer.
         */
        get: operations["FxTransfersByIDGet"];
        /**
         * Return FX transfer information
         * @description The callback `PUT /fxTransfers/{ID}` is used to inform the requester about the outcome of a request for execution of a currency conversion. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer, or the `{ID}` that was used in the `GET /fxTransfers/{ID}` request.
         */
        put: operations["FxTransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Return FX transfer information
         * @description The HTTP request PATCH /fxTransfers/<ID> is used to inform the requester about the final determination by the switch of the transfer a request for execution of a currency conversion. The <ID> in the URI should contain the commitRequestId that was used for the creation of the FX transfer. Please note that this request does not generate a callback.
         */
        patch: operations["FxTransfersByIDPatch"];
        trace?: never;
    };
    "/fxTransfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return FX transfer information error
         * @description If the switch or FXP is unable to find or create a FX transfer, or another processing error occurs, the error callback `PUT /fxTransfers/{ID}/error` is used. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer, or the `{ID}` that was used in the `GET /fxTransfers/{ID}`.
         */
        put: operations["FxTransfersByIDAndErrorPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/services/FXP": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /**
         * Obtain a list of the DFSPs in the scheme who provide FXP service
         * @description The HTTP request `GET /services/FXP` is used to request information about the participants in a scheme who offer currency conversion services.
         */
        get: operations["ServicesFXPGet"];
        /** @description The callback `PUT /services/FXP` is used to inform the requester about participants in a scheme who offer currency conversion services. If no participants offer these services, the return object will be blank. */
        put: operations["ServicesFXPPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/services/FXP/{SourceCurrency}/{TargetCurrency}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description ISO 4217 currency code for the source currency. */
                SourceCurrency: components["parameters"]["SourceCurrency"];
                /** @description ISO 4217 currency code for the target currency. */
                TargetCurrency: components["parameters"]["TargetCurrency"];
            };
            cookie?: never;
        };
        /**
         * Obtain a list of the DFSPs in the scheme who provide FXP service
         * @description The HTTP request `GET /services/FXP/{SourceCurrency}/{TargetCurrency}` is used to request information about the participants in a scheme who offer currency conversion services in a particular currency corridor. The required corridor is specified by giving the ISO 4217 currency code for the SourceCurrency and the TargetCurrency.
         */
        get: operations["ServicesFXPSourceCurrencyTargetCurrencyGet"];
        /** @description The callback `PUT /services/FXP/{SourceCurrency}/{TargetCurrency}` is used to inform the requester about participants in a scheme who offer currency conversion services. If no participants offer these services, the return object will be blank. The required corridor is specified by giving the ISO 4217 currency code for the SourceCurrency and the TargetCurrency. */
        put: operations["ServicesFXPSourceCurrencyTargetCurrencyPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        Amount: string;
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         *     - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         *     - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        AmountType: "SEND" | "RECEIVE";
        /**
         * AuthenticationInfo
         * @description Data model for the complex type AuthenticationInfo.
         */
        AuthenticationInfo: {
            authentication: components["schemas"]["AuthenticationType"];
            authenticationValue: components["schemas"]["AuthenticationValue"];
        };
        /**
         * AuthenticationType
         * @description Below are the allowed values for the enumeration AuthenticationType.
         *     - OTP - One-time password generated by the Payer FSP.
         *     - QRCODE - QR code used as One Time Password.
         *     - U2F - U2F is a new addition isolated to Thirdparty stream.
         * @example OTP
         * @enum {string}
         */
        AuthenticationType: "OTP" | "QRCODE" | "U2F";
        /**
         * AuthenticationValue
         * @description Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.
         */
        AuthenticationValue: components["schemas"]["OtpValue"] | components["schemas"]["QRCODE"] | components["schemas"]["U2FPinValue"];
        /**
         * AuthorizationResponse
         * @description Below are the allowed values for the enumeration.
         *     - ENTERED - Consumer entered the authentication value.
         *     - REJECTED - Consumer rejected the transaction.
         *     - RESEND - Consumer requested to resend the authentication value.
         * @example ENTERED
         * @enum {string}
         */
        AuthorizationResponse: "ENTERED" | "REJECTED" | "RESEND";
        /**
         * AuthorizationsIDPutResponse
         * @description The object sent in the PUT /authorizations/{ID} callback.
         */
        AuthorizationsIDPutResponse: {
            authenticationInfo?: components["schemas"]["AuthenticationInfo"];
            responseType: components["schemas"]["AuthorizationResponse"];
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        BalanceOfPayments: string;
        /** @description The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters. */
        BinaryString: string;
        /** @description The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed. */
        BinaryString32: string;
        /**
         * BulkQuotesIDPutResponse
         * @description The object sent in the PUT /bulkQuotes/{ID} callback.
         */
        BulkQuotesIDPutResponse: {
            /** @description Fees for each individual transaction, if any of them are charged per transaction. */
            individualQuoteResults?: components["schemas"]["IndividualQuoteResult"][];
            expiration: components["schemas"]["DateTime"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * BulkQuotesPostRequest
         * @description The object sent in the POST /bulkQuotes request.
         */
        BulkQuotesPostRequest: {
            bulkQuoteId: components["schemas"]["CorrelationId"];
            payer: components["schemas"]["Party"];
            geoCode?: components["schemas"]["GeoCode"];
            expiration?: components["schemas"]["DateTime"];
            /** @description List of quotes elements. */
            individualQuotes: components["schemas"]["IndividualQuote"][];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * BulkTransactionState
         * @description Below are the allowed values for the enumeration.
         *     - RECEIVED - Payee FSP has received the bulk transfer from the Payer FSP.
         *     - PENDING - Payee FSP has validated the bulk transfer.
         *     - ACCEPTED - Payee FSP has accepted to process the bulk transfer.
         *     - PROCESSING - Payee FSP has started to transfer fund to the Payees.
         *     - COMPLETED - Payee FSP has completed transfer of funds to the Payees.
         *     - REJECTED - Payee FSP has rejected to process the bulk transfer.
         * @example RECEIVED
         * @enum {string}
         */
        BulkTransferState: "RECEIVED" | "PENDING" | "ACCEPTED" | "PROCESSING" | "COMPLETED" | "REJECTED";
        /**
         * BulkTransfersIDPutResponse
         * @description The object sent in the PUT /bulkTransfers/{ID} callback.
         */
        BulkTransfersIDPutResponse: {
            completedTimestamp?: components["schemas"]["DateTime"];
            /** @description List of IndividualTransferResult elements. */
            individualTransferResults?: components["schemas"]["IndividualTransferResult"][];
            bulkTransferState: components["schemas"]["BulkTransferState"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * BulkTransfersPostRequest
         * @description The object sent in the POST /bulkTransfers request.
         */
        BulkTransfersPostRequest: {
            bulkTransferId: components["schemas"]["CorrelationId"];
            bulkQuoteId: components["schemas"]["CorrelationId"];
            payerFsp: components["schemas"]["FspId"];
            payeeFsp: components["schemas"]["FspId"];
            /** @description List of IndividualTransfer elements. */
            individualTransfers: components["schemas"]["IndividualTransfer"][];
            expiration: components["schemas"]["DateTime"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * Code
         * @description Any code/token returned by the Payee FSP (TokenCode Type).
         * @example Test-Code
         */
        Code: string;
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        CorrelationId: string;
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        Currency: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHF" | "CLP" | "CNY" | "COP" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GGP" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IMP" | "INR" | "IQD" | "IRR" | "ISK" | "JEP" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRO" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SLL" | "SOS" | "SPL" | "SRD" | "STD" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TVD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XTS" | "XXX" | "YER" | "ZAR" | "ZMW" | "ZWD";
        /**
         * CurrencyConverter
         * @description Below are the allowed values for the enumeration CurrencyConverter. - PAYER - Currency conversion should be performed by the payer. - PAYEE - Currency conversion should be performed by the payee.
         * @enum {string}
         */
        CurrencyConverter: "PAYER" | "PAYEE";
        /**
         * Date
         * @description The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. This format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples are "1982-05-23", "1987-08-05”.
         */
        Date: string;
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        DateOfBirth: string;
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        DateTime: string;
        /**
         * ErrorCode
         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         * @example 5100
         */
        ErrorCode: string;
        /**
         * ErrorDescription
         * @description Error description string.
         */
        ErrorDescription: string;
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        ErrorInformation: {
            errorCode: components["schemas"]["ErrorCode"];
            errorDescription: components["schemas"]["ErrorDescription"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ErrorInformationObject
         * @description Data model for the complex type object that contains ErrorInformation.
         */
        ErrorInformationObject: {
            errorInformation: components["schemas"]["ErrorInformation"];
        };
        /**
         * ErrorInformationResponse
         * @description Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
         */
        ErrorInformationResponse: {
            errorInformation?: components["schemas"]["ErrorInformation"];
        };
        /**
         * Extension
         * @description Data model for the complex type Extension.
         */
        Extension: {
            key: components["schemas"]["ExtensionKey"];
            value: components["schemas"]["ExtensionValue"];
        };
        /**
         * ExtensionKey
         * @description Extension key.
         */
        ExtensionKey: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        ExtensionList: {
            /** @description Number of Extension elements. */
            extension: components["schemas"]["Extension"][];
        };
        /**
         * ExtensionValue
         * @description Extension value.
         */
        ExtensionValue: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        FirstName: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        FspId: string;
        /**
         * FxCharge
         * @description An FXP will be able to specify a charge which it proposes to levy on the currency conversion operation using a FxCharge object.
         */
        FxCharge: {
            /** @description A description of the charge which is being levied. */
            chargeType: string;
            sourceAmount?: components["schemas"]["Money"] & unknown;
            targetAmount?: components["schemas"]["Money"] & unknown;
        };
        /**
         * FxConversion
         * @description A DFSP will be able to request a currency conversion, and an FX provider will be able to describe its involvement in a proposed transfer, using a FxConversion object.
         */
        FxConversion: {
            conversionId: components["schemas"]["CorrelationId"] & unknown;
            determiningTransferId?: components["schemas"]["CorrelationId"] & unknown;
            initiatingFsp: components["schemas"]["FspId"] & unknown;
            counterPartyFsp: components["schemas"]["FspId"] & unknown;
            amountType: components["schemas"]["AmountType"] & unknown;
            sourceAmount: components["schemas"]["FxMoney"] & unknown;
            targetAmount: components["schemas"]["FxMoney"] & unknown;
            expiration: components["schemas"]["DateTime"] & unknown;
            /** @description One or more charges which the FXP intends to levy as part of the currency conversion, or which the payee DFSP intends to add to the amount transferred. */
            charges?: components["schemas"]["FxCharge"][];
            extensionList?: components["schemas"]["ExtensionList"] & unknown;
        };
        /**
         * FxMoney
         * @description Data model for the complex type FxMoney; This is based on the type Money but allows the amount to be optional to support FX quotations.
         */
        FxMoney: {
            currency: components["schemas"]["Currency"];
            amount?: components["schemas"]["Amount"];
        };
        /**
         * FxQuotesIDPutResponse
         * @description The object sent in the PUT /fxQuotes/{ID} callback.
         */
        FxQuotesIDPutResponse: {
            condition?: components["schemas"]["IlpCondition"] & unknown;
            conversionTerms: components["schemas"]["FxConversion"] & unknown;
        };
        /**
         * FxQuotesPostRequest
         * @description The object sent in the POST /fxQuotes request.
         */
        FxQuotesPostRequest: {
            conversionRequestId: components["schemas"]["CorrelationId"] & unknown;
            conversionTerms: components["schemas"]["FxConversion"] & unknown;
        };
        /**
         * FxRate
         * @description The FxRate object contains information about a currency conversion in the transfer. It can be used by parties to the transfer to exchange information with each other about the exchange rate for the transfer, to ensure that the best rate can be agreed on.
         */
        FxRate: {
            sourceAmount: components["schemas"]["Money"] & unknown;
            targetAmount: components["schemas"]["Money"] & unknown;
        };
        /**
         * FxTransfersIDPatchResponse
         * @description PATCH /fxTransfers/{ID} object
         */
        FxTransfersIDPatchResponse: {
            completedTimestamp?: components["schemas"]["DateTime"] & unknown;
            conversionState: components["schemas"]["TransferState"] & unknown;
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * FxTransfersIDPutResponse
         * @description The object sent in the PUT /fxTransfers/{ID} callback.
         */
        FxTransfersIDPutResponse: {
            fulfilment?: components["schemas"]["IlpFulfilment"] & unknown;
            completedTimestamp?: components["schemas"]["DateTime"] & unknown;
            conversionState: components["schemas"]["TransferState"] & unknown;
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * FxTransfersPostRequest
         * @description The object sent in the POST /fxTransfers request.
         */
        FxTransfersPostRequest: {
            commitRequestId: components["schemas"]["CorrelationId"] & unknown;
            determiningTransferId?: components["schemas"]["CorrelationId"] & unknown;
            initiatingFsp: components["schemas"]["FspId"] & unknown;
            counterPartyFsp: components["schemas"]["FspId"] & unknown;
            sourceAmount: components["schemas"]["Money"] & unknown;
            targetAmount: components["schemas"]["Money"] & unknown;
            condition: components["schemas"]["IlpCondition"] & unknown;
            expiration?: components["schemas"]["DateTime"];
        };
        /**
         * GeoCode
         * @description Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
         */
        GeoCode: {
            latitude: components["schemas"]["Latitude"];
            longitude: components["schemas"]["Longitude"];
        };
        /**
         * IlpCondition
         * @description Condition that must be attached to the transfer by the Payer.
         */
        IlpCondition: string;
        /**
         * IlpFulfilment
         * @description Fulfilment that must be attached to the transfer by the Payee.
         * @example WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
         */
        IlpFulfilment: string;
        /**
         * IlpPacket
         * @description Information for recipient (transport layer information).
         * @example AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
         */
        IlpPacket: string;
        /**
         * IndividualQuote
         * @description Data model for the complex type IndividualQuote.
         */
        IndividualQuote: {
            quoteId: components["schemas"]["CorrelationId"];
            transactionId: components["schemas"]["CorrelationId"];
            payee: components["schemas"]["Party"];
            amountType: components["schemas"]["AmountType"];
            amount: components["schemas"]["Money"];
            fees?: components["schemas"]["Money"];
            transactionType: components["schemas"]["TransactionType"];
            note?: components["schemas"]["Note"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * IndividualQuoteResult
         * @description Data model for the complex type IndividualQuoteResult.
         */
        IndividualQuoteResult: {
            quoteId: components["schemas"]["CorrelationId"];
            payee?: components["schemas"]["Party"];
            transferAmount?: components["schemas"]["Money"];
            payeeReceiveAmount?: components["schemas"]["Money"];
            payeeFspFee?: components["schemas"]["Money"];
            payeeFspCommission?: components["schemas"]["Money"];
            ilpPacket?: components["schemas"]["IlpPacket"];
            condition?: components["schemas"]["IlpCondition"];
            errorInformation?: components["schemas"]["ErrorInformation"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * IndividualTransfer
         * @description Data model for the complex type IndividualTransfer.
         */
        IndividualTransfer: {
            transferId: components["schemas"]["CorrelationId"];
            transferAmount: components["schemas"]["Money"];
            ilpPacket: components["schemas"]["IlpPacket"];
            condition: components["schemas"]["IlpCondition"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * IndividualTransferResult
         * @description Data model for the complex type IndividualTransferResult.
         */
        IndividualTransferResult: {
            transferId: components["schemas"]["CorrelationId"];
            fulfilment?: components["schemas"]["IlpFulfilment"];
            errorInformation?: components["schemas"]["ErrorInformation"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * Integer
         * @description The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
         */
        Integer: string;
        /**
         * KYCInformation
         * @description KYC information for the party in a form mandated by an individual scheme.
         * @example {
         *         "metadata": {
         *             "format": "JSON",
         *             "version": "1.0",
         *             "description": "Data containing KYC Information"
         *         },
         *         "data": {
         *             "name": "John Doe",
         *             "dob": "1980-05-15",
         *             "gender": "Male",
         *             "address": "123 Main Street, Anytown, USA",
         *             "email": "johndoe@example.com",
         *             "phone": "+1 555-123-4567",
         *             "nationality": "US",
         *             "passport_number": "AB1234567",
         *             "issue_date": "2010-02-20",
         *             "expiry_date": "2025-02-20",
         *             "bank_account_number": "1234567890",
         *             "bank_name": "Example Bank",
         *             "employer": "ABC Company",
         *             "occupation": "Software Engineer",
         *             "income": "$80,000 per year",
         *             "marital_status": "Single",
         *             "dependents": 0,
         *             "risk_level": "Low"
         *         }
         *     }
         */
        KYCInformation: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        LastName: string;
        /**
         * Latitude
         * @description The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +45.4215
         */
        Latitude: string;
        /**
         * Longitude
         * @description The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
         * @example +75.6972
         */
        Longitude: string;
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        MerchantClassificationCode: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        MiddleName: string;
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        Money: {
            currency: components["schemas"]["Currency"];
            amount: components["schemas"]["Amount"];
        };
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         *     Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         *     **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        Name: string;
        /**
         * Note
         * @description Memo assigned to transaction.
         * @example Note sent to Payee.
         */
        Note: string;
        /**
         * OtpValue
         * @description The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.
         */
        OtpValue: string;
        /**
         * ParticipantsIDPutResponse
         * @description The object sent in the PUT /participants/{ID} callback.
         */
        ParticipantsIDPutResponse: {
            /** @description List of PartyResult elements that were either created or failed to be created. */
            partyList: components["schemas"]["PartyResult"][];
            currency?: components["schemas"]["Currency"];
        };
        /**
         * ParticipantsPostRequest
         * @description The object sent in the POST /participants request.
         */
        ParticipantsPostRequest: {
            requestId: components["schemas"]["CorrelationId"];
            /** @description List of PartyIdInfo elements that the client would like to update or create FSP information about. */
            partyList: components["schemas"]["PartyIdInfo"][];
            currency?: components["schemas"]["Currency"];
        };
        /**
         * ParticipantsTypeIDPutResponse
         * @description The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks.
         */
        ParticipantsTypeIDPutResponse: {
            fspId?: components["schemas"]["FspId"];
        };
        /**
         * ParticipantsTypeIDSubIDPostRequest
         * @description The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests. An additional optional ExtensionList element has been added as part of v1.1 changes.
         */
        ParticipantsTypeIDSubIDPostRequest: {
            fspId: components["schemas"]["FspId"];
            currency?: components["schemas"]["Currency"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * PartiesTypeIDPutResponse
         * @description The object sent in the PUT /parties/{Type}/{ID} callback.
         */
        PartiesTypeIDPutResponse: {
            party: components["schemas"]["Party"];
        };
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        Party: {
            partyIdInfo: components["schemas"]["PartyIdInfo"];
            merchantClassificationCode?: components["schemas"]["MerchantClassificationCode"];
            name?: components["schemas"]["PartyName"];
            personalInfo?: components["schemas"]["PartyPersonalInfo"];
            /** @description Currencies in which the party can receive funds. */
            supportedCurrencies?: components["schemas"]["Currency"][];
        };
        /**
         * PartyComplexName
         * @description Data model for the complex type PartyComplexName.
         */
        PartyComplexName: {
            firstName?: components["schemas"]["FirstName"];
            middleName?: components["schemas"]["MiddleName"];
            lastName?: components["schemas"]["LastName"];
        };
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
         */
        PartyIdInfo: {
            partyIdType: components["schemas"]["PartyIdType"];
            partyIdentifier: components["schemas"]["PartyIdentifier"];
            partySubIdOrType?: components["schemas"]["PartySubIdOrType"];
            fspId?: components["schemas"]["FspId"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         *     - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
         *     - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
         *     - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
         *     - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
         *     - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
         *     - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
         *     - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
         *     - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
         * @enum {string}
         */
        PartyIdType: "MSISDN" | "EMAIL" | "PERSONAL_ID" | "BUSINESS" | "DEVICE" | "ACCOUNT_ID" | "IBAN" | "ALIAS";
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        PartyIdentifier: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        PartyName: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        PartyPersonalInfo: {
            complexName?: components["schemas"]["PartyComplexName"];
            dateOfBirth?: components["schemas"]["DateOfBirth"];
            kycInformation?: components["schemas"]["KYCInformation"];
        };
        /**
         * PartyResult
         * @description Data model for the complex type PartyResult.
         */
        PartyResult: {
            partyId: components["schemas"]["PartyIdInfo"];
            errorInformation?: components["schemas"]["ErrorInformation"];
        };
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        PartySubIdOrType: string;
        /**
         * PersonalIdentifierType
         * @description Below are the allowed values for the enumeration.
         *     - PASSPORT - A passport number is used as reference to a Party.
         *     - NATIONAL_REGISTRATION - A national registration number is used as reference to a Party.
         *     - DRIVING_LICENSE - A driving license is used as reference to a Party.
         *     - ALIEN_REGISTRATION - An alien registration number is used as reference to a Party.
         *     - NATIONAL_ID_CARD - A national ID card number is used as reference to a Party.
         *     - EMPLOYER_ID - A tax identification number is used as reference to a Party.
         *     - TAX_ID_NUMBER - A tax identification number is used as reference to a Party.
         *     - SENIOR_CITIZENS_CARD - A senior citizens card number is used as reference to a Party.
         *     - MARRIAGE_CERTIFICATE - A marriage certificate number is used as reference to a Party.
         *     - HEALTH_CARD - A health card number is used as reference to a Party.
         *     - VOTERS_ID - A voter’s identification number is used as reference to a Party.
         *     - UNITED_NATIONS - An UN (United Nations) number is used as reference to a Party.
         *     - OTHER_ID - Any other type of identification type number is used as reference to a Party.
         * @enum {string}
         */
        PersonalIdentifierType: "PASSPORT" | "NATIONAL_REGISTRATION" | "DRIVING_LICENSE" | "ALIEN_REGISTRATION" | "NATIONAL_ID_CARD" | "EMPLOYER_ID" | "TAX_ID_NUMBER" | "SENIOR_CITIZENS_CARD" | "MARRIAGE_CERTIFICATE" | "HEALTH_CARD" | "VOTERS_ID" | "UNITED_NATIONS" | "OTHER_ID";
        /**
         * QRCODE
         * @description QR code used as a One Time Password.
         */
        QRCODE: string;
        /**
         * QuotesIDPutResponse
         * @description The object sent in the PUT /quotes/{ID} callback.
         */
        QuotesIDPutResponse: {
            transferAmount: components["schemas"]["Money"];
            payeeReceiveAmount?: components["schemas"]["Money"];
            payeeFspFee?: components["schemas"]["Money"];
            payeeFspCommission?: components["schemas"]["Money"];
            expiration: components["schemas"]["DateTime"];
            geoCode?: components["schemas"]["GeoCode"];
            ilpPacket: components["schemas"]["IlpPacket"];
            condition: components["schemas"]["IlpCondition"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * QuotesPostRequest
         * @description The object sent in the POST /quotes request.
         */
        QuotesPostRequest: {
            quoteId: components["schemas"]["CorrelationId"];
            transactionId: components["schemas"]["CorrelationId"];
            transactionRequestId?: components["schemas"]["CorrelationId"];
            payee: components["schemas"]["Party"];
            payer: components["schemas"]["Party"];
            amountType: components["schemas"]["AmountType"];
            amount: components["schemas"]["Money"];
            fees?: components["schemas"]["Money"];
            transactionType: components["schemas"]["TransactionType"];
            converter?: components["schemas"]["CurrencyConverter"] & unknown;
            currencyConversion?: components["schemas"]["FxRate"] & unknown;
            geoCode?: components["schemas"]["GeoCode"];
            note?: components["schemas"]["Note"];
            expiration?: components["schemas"]["DateTime"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        Refund: {
            originalTransactionId: components["schemas"]["CorrelationId"];
            refundReason?: components["schemas"]["RefundReason"];
        };
        /**
         * RefundReason
         * @description Reason for the refund.
         * @example Free text indicating reason for the refund.
         */
        RefundReason: string;
        /**
         * ServicesFXPPutResponse
         * @description The object sent in the PUT /services/FXP callback.
         */
        ServicesFXPPutResponse: {
            /** @description The FSP Id(s) of the participant(s) who offer currency conversion services. */
            providers: components["schemas"]["FspId"][];
        };
        /**
         * ServicesFXPSourceCurrencyTargetCurrencyPutResponse
         * @description The object sent in the PUT /services/FXP/{SourceCurrency}/{TargetCurrency} callback.
         */
        ServicesFXPSourceCurrencyTargetCurrencyPutResponse: {
            /** @description The FSP Id(s) of the participant(s) who offer currency conversion services. */
            providers: components["schemas"]["FspId"][];
        };
        /**
         * TokenCode
         * @description The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper- or lowercase characters from a to z.
         */
        TokenCode: string;
        /**
         * Transaction
         * @description Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes request.
         */
        Transaction: {
            transactionId: components["schemas"]["CorrelationId"];
            quoteId: components["schemas"]["CorrelationId"];
            payee: components["schemas"]["Party"];
            payer: components["schemas"]["Party"];
            amount: components["schemas"]["Money"];
            payeeReceiveAmount?: components["schemas"]["Money"] & unknown;
            converter?: components["schemas"]["CurrencyConverter"] & unknown;
            currencyConversion?: components["schemas"]["FxRate"] & unknown;
            transactionType: components["schemas"]["TransactionType"];
            note?: components["schemas"]["Note"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         *     - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         *     - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        TransactionInitiator: "PAYER" | "PAYEE";
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         *     - CONSUMER - Consumer is the initiator of the transaction.
         *     - AGENT - Agent is the initiator of the transaction.
         *     - BUSINESS - Business is the initiator of the transaction.
         *     - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        TransactionInitiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
        /**
         * TransactionRequestState
         * @description Below are the allowed values for the enumeration.
         *     - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
         *     - PENDING - Payer FSP has sent the transaction request to the Payer.
         *     - ACCEPTED - Payer has approved the transaction.
         *     - REJECTED - Payer has rejected the transaction.
         * @example RECEIVED
         * @enum {string}
         */
        TransactionRequestState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
        /**
         * TransactionRequestsIDPutResponse
         * @description The object sent in the PUT /transactionRequests/{ID} callback.
         */
        TransactionRequestsIDPutResponse: {
            transactionId?: components["schemas"]["CorrelationId"];
            transactionRequestState: components["schemas"]["TransactionRequestState"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransactionRequestsPostRequest
         * @description The object sent in the POST /transactionRequests request.
         */
        TransactionRequestsPostRequest: {
            transactionRequestId: components["schemas"]["CorrelationId"];
            payee: components["schemas"]["Party"];
            payer: components["schemas"]["PartyIdInfo"];
            amount: components["schemas"]["Money"];
            transactionType: components["schemas"]["TransactionType"];
            note?: components["schemas"]["Note"];
            geoCode?: components["schemas"]["GeoCode"];
            authenticationType?: components["schemas"]["AuthenticationType"];
            expiration?: components["schemas"]["DateTime"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         *     - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         *     - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         *     - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         *     - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         *     - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        TransactionScenario: "DEPOSIT" | "WITHDRAWAL" | "TRANSFER" | "PAYMENT" | "REFUND";
        /**
         * TransactionState
         * @description Below are the allowed values for the enumeration.
         *     - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
         *     - PENDING - Payee FSP has validated the transaction.
         *     - COMPLETED - Payee FSP has successfully performed the transaction.
         *     - REJECTED - Payee FSP has failed to perform the transaction.
         * @example RECEIVED
         * @enum {string}
         */
        TransactionState: "RECEIVED" | "PENDING" | "COMPLETED" | "REJECTED";
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        TransactionSubScenario: string;
        /**
         * TransactionType
         * @description Data model for the complex type TransactionType.
         */
        TransactionType: {
            scenario: components["schemas"]["TransactionScenario"];
            subScenario?: components["schemas"]["TransactionSubScenario"];
            initiator: components["schemas"]["TransactionInitiator"];
            initiatorType: components["schemas"]["TransactionInitiatorType"];
            refundInfo?: components["schemas"]["Refund"];
            balanceOfPayments?: components["schemas"]["BalanceOfPayments"];
        };
        /**
         * TransactionsIDPutResponse
         * @description The object sent in the PUT /transactions/{ID} callback.
         */
        TransactionsIDPutResponse: {
            completedTimestamp?: components["schemas"]["DateTime"];
            transactionState: components["schemas"]["TransactionState"];
            code?: components["schemas"]["Code"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransferState
         * @description Below are the allowed values for the enumeration.
         *     - RECEIVED - Next ledger has received the transfer.
         *     - RESERVED - Next ledger has reserved the transfer.
         *     - COMMITTED - Next ledger has successfully performed the transfer.
         *     - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
         * @example RESERVED
         * @enum {string}
         */
        TransferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
        /**
         * TransfersIDPatchResponse
         * @description PATCH /transfers/{ID} object
         */
        TransfersIDPatchResponse: {
            completedTimestamp: components["schemas"]["DateTime"];
            transferState: components["schemas"]["TransferState"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransfersIDPutResponse
         * @description The object sent in the PUT /transfers/{ID} callback.
         */
        TransfersIDPutResponse: {
            fulfilment?: components["schemas"]["IlpFulfilment"];
            completedTimestamp?: components["schemas"]["DateTime"];
            transferState: components["schemas"]["TransferState"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * TransfersPostRequest
         * @description The object sent in the POST /transfers request.
         */
        TransfersPostRequest: {
            transferId: components["schemas"]["CorrelationId"];
            payeeFsp: components["schemas"]["FspId"];
            payerFsp: components["schemas"]["FspId"];
            amount: components["schemas"]["Money"];
            ilpPacket: components["schemas"]["IlpPacket"];
            condition: components["schemas"]["IlpCondition"];
            expiration: components["schemas"]["DateTime"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * U2FPIN
         * @description U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
         *
         */
        U2FPIN: string;
        /**
         * U2FPinValue
         * @description U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
         *
         */
        U2FPinValue: {
            /** @description U2F challenge-response. */
            pinValue: components["schemas"]["U2FPIN"];
            /** @description Sequential counter used for cloning detection. Present only for U2F authentication. */
            counter: components["schemas"]["Integer"];
        };
        /**
         * UndefinedEnum
         * @description The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_).
         */
        UndefinedEnum: string;
    };
    responses: {
        /** @description OK */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Accepted */
        202: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Bad Request */
        400: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Method Not Allowed */
        405: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Acceptable */
        406: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Implemented */
        501: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Service Unavailable */
        503: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
    };
    parameters: {
        /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: string;
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
        /** @description The `Date` header field indicates the date when the request was sent. */
        Date: string;
        /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination": string;
        /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption": string;
        /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method": string;
        /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature": string;
        /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": string;
        /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-URI": string;
        /** @description The identifier value. */
        ID: string;
        /** @description ISO 4217 currency code for the source currency. */
        SourceCurrency: string;
        /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
        SubId: string;
        /** @description ISO 4217 currency code for the target currency. */
        TargetCurrency: string;
        /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
        "X-Forwarded-For": string;
    };
    requestBodies: never;
    headers: {
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ParticipantsByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsByTypeAndID3: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Participant information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantsTypeIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsByIDAndType: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Participant information to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantsTypeIDSubIDPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsByTypeAndID2: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsSubIdByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsSubIdByTypeAndID3: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Participant information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantsTypeIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsSubIdByTypeAndIDPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Participant information to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantsTypeIDSubIDPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsSubIdByTypeAndID2: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsSubIdErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    Participants1: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Participant information to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantsPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    putParticipantsByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Participant information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantsIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ParticipantsByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesByTypeAndID2: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Party information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartiesTypeIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdByTypeAndIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Party information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartiesTypeIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionRequests: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Transaction request to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionRequestsPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionRequestsByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionRequestsByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transaction request information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionRequestsIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionRequestsErrorByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    Quotes: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuotesPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByID1: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuotesIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    AuthorizationsByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    AuthorizationsByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Authorization result returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthorizationsIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    AuthorizationsByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    transfers: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransfersPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransfersIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDPatch: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer notification upon completion. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransfersIDPatchResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionsByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionsByID1: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transaction information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TransactionsIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransactionsErrorByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkQuotes: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the bulk quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkQuotesPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkQuotesByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkQuotesByID1: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Bulk quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkQuotesIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkQuotesErrorByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkTransfers: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the bulk transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkTransfersPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkTransferByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkTransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Bulk transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkTransfersIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    BulkTransfersErrorByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the FX quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxQuotesPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIdPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description FX Quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxQuotesIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIDAndErrorPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the FX transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxTransfersPostRequest"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxTransfersIDPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDPatch: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer notification upon completion. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxTransfersIDPatchResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDAndErrorPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ErrorInformationObject"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ServicesFXPGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ServicesFXPPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description The list of participant(s) who offer currency conversion services. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServicesFXPPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ServicesFXPSourceCurrencyTargetCurrencyGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description ISO 4217 currency code for the source currency. */
                SourceCurrency: components["parameters"]["SourceCurrency"];
                /** @description ISO 4217 currency code for the target currency. */
                TargetCurrency: components["parameters"]["TargetCurrency"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    ServicesFXPSourceCurrencyTargetCurrencyPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description ISO 4217 currency code for the source currency. */
                SourceCurrency: components["parameters"]["SourceCurrency"];
                /** @description ISO 4217 currency code for the target currency. */
                TargetCurrency: components["parameters"]["TargetCurrency"];
            };
            cookie?: never;
        };
        /** @description The list of participant(s) who offer currency conversion services. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServicesFXPSourceCurrencyTargetCurrencyPutResponse"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
}
