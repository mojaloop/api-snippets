/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/interface": {
    post: operations["test"];
  };
  "/participants/{Type}/{ID}": {
    post: operations["ParticipantsByIDAndType"];
    get: operations["ParticipantsByTypeAndID"];
    put: operations["ParticipantsByTypeAndID3"];
    delete: operations["ParticipantsByTypeAndID2"];
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/participants/{Type}/{ID}/error": {
    put: operations["ParticipantsErrorByTypeAndID"];
  };
  "/participants/{Type}/{ID}/{SubId}": {
    post: operations["ParticipantsSubIdByTypeAndIDPost"];
    get: operations["ParticipantsSubIdByTypeAndID"];
    put: operations["ParticipantsSubIdByTypeAndID3"];
    delete: operations["ParticipantsSubIdByTypeAndID2"];
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
        SubId: components["parameters"]["SubId"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/participants/{Type}/{ID}/{SubId}/error": {
    put: operations["ParticipantsSubIdErrorByTypeAndID"];
  };
  "/participants": {
    post: operations["Participants1"];
  };
  "/participants/{ID}": {
    put: operations["putParticipantsByID"];
  };
  "/participants/{ID}/error": {
    put: operations["ParticipantsByIDAndError"];
  };
  "/parties/{Type}/{ID}": {
    get: operations["PartiesByTypeAndID"];
    put: operations["PartiesByTypeAndID2"];
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/parties/{Type}/{ID}/error": {
    put: operations["PartiesErrorByTypeAndID"];
  };
  "/parties/{Type}/{ID}/{SubId}": {
    get: operations["PartiesSubIdByTypeAndID"];
    put: operations["PartiesSubIdByTypeAndIDPut"];
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
        SubId: components["parameters"]["SubId"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/parties/{Type}/{ID}/{SubId}/error": {
    put: operations["PartiesSubIdErrorByTypeAndID"];
  };
  "/transactionRequests": {
    post: operations["TransactionRequests"];
  };
  "/transactionRequests/{ID}": {
    get: operations["TransactionRequestsByID"];
    put: operations["TransactionRequestsByIDPut"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/transactionRequests/{ID}/error": {
    put: operations["TransactionRequestsErrorByID"];
  };
  "/quotes": {
    post: operations["Quotes"];
  };
  "/quotes/{ID}": {
    get: operations["QuotesByID"];
    put: operations["QuotesByID1"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/quotes/{ID}/error": {
    put: operations["QuotesByIDAndError"];
  };
  "/authorizations/{ID}": {
    get: operations["AuthorizationsByIDGet"];
    put: operations["AuthorizationsByIDPut"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/authorizations/{ID}/error": {
    put: operations["AuthorizationsByIDAndError"];
  };
  "/transfers": {
    post: operations["transfers"];
  };
  "/transfers/{ID}": {
    get: operations["TransfersByIDGet"];
    patch: operations["TransfersByIDPatch"];
    put: operations["TransfersByIDPut"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/transfers/{ID}/error": {
    put: operations["TransfersByIDAndError"];
  };
  "/transactions/{ID}": {
    get: operations["TransactionsByID"];
    put: operations["TransactionsByID1"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/transactions/{ID}/error": {
    put: operations["TransactionsErrorByID"];
  };
  "/bulkQuotes": {
    post: operations["BulkQuotes"];
  };
  "/bulkQuotes/{ID}": {
    get: operations["BulkQuotesByID"];
    put: operations["BulkQuotesByID1"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/bulkQuotes/{ID}/error": {
    put: operations["BulkQuotesErrorByID"];
  };
  "/bulkTransfers": {
    post: operations["BulkTransfers"];
  };
  "/bulkTransfers/{ID}": {
    get: operations["BulkTransferByID"];
    put: operations["BulkTransfersByIDPut"];
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/bulkTransfers/{ID}/error": {
    put: operations["BulkTransfersErrorByID"];
  };
}

export interface operations {
  /**
   * Essential path to include schema definitions that are not used so that these definitions get included into the openapi-cli bundle api definition so that they get converted into typescript definitions.
   */
  test: {
    requestBody: {
      "application/json":
        | components["schemas"]["BinaryString"]
        | components["schemas"]["BinaryString32"]
        | components["schemas"]["Date"]
        | components["schemas"]["Integer"]
        | components["schemas"]["Name"]
        | components["schemas"]["PersonalIdentifierType"]
        | components["schemas"]["TokenCode"]
        | components["schemas"]["Transaction"]
        | components["schemas"]["UndefinedEnum"];
    };
    responses: {
      /**
       * Ok
       */
      "200": unknown;
    };
  };
  /**
   * The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1
   */
  ParticipantsByIDAndType: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ParticipantsTypeIDSubIDPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
   */
  ParticipantsByTypeAndID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.
   */
  ParticipantsByTypeAndID3: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ParticipantsTypeIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
   *
   * **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
   */
  ParticipantsByTypeAndID2: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.
   */
  ParticipantsErrorByTypeAndID: {
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1
   */
  ParticipantsSubIdByTypeAndIDPost: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ParticipantsTypeIDSubIDPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
   */
  ParticipantsSubIdByTypeAndID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party.
   */
  ParticipantsSubIdByTypeAndID3: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ParticipantsTypeIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
   *
   * **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
   */
  ParticipantsSubIdByTypeAndID2: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.
   */
  ParticipantsSubIdErrorByTypeAndID: {
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
        SubId: components["parameters"]["SubId"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /participants` is used to create information in the server regarding the provided list of identities. This request should be used for bulk creation of FSP information for more than one Party. The optional currency parameter should indicate that each provided Party supports the currency.
   */
  Participants1: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ParticipantsPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /participants/{ID}` is used to inform the client of the result of the creation of the provided list of identities.
   */
  putParticipantsByID: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ParticipantsIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If there is an error during FSP information creation in the server, the error callback `PUT /participants/{ID}/error` is used. The `{ID}` in the URI should contain the requestId that was used for the creation of the participant information.
   */
  ParticipantsByIDAndError: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
   */
  PartiesByTypeAndID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
   */
  PartiesByTypeAndID2: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["PartiesTypeIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubI}/error`) is used.
   */
  PartiesErrorByTypeAndID: {
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
   */
  PartiesSubIdByTypeAndID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
   */
  PartiesSubIdByTypeAndIDPut: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["PartiesTypeIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubId}/error`) is used.
   */
  PartiesSubIdErrorByTypeAndID: {
    parameters: {
      path: {
        Type: components["parameters"]["Type"];
        ID: components["parameters"]["ID"];
        SubId: components["parameters"]["SubId"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /transactionRequests` is used to request the creation of a transaction request for the provided financial transaction in the server.
   */
  TransactionRequests: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["TransactionRequestsPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /transactionRequests/{ID}` is used to get information regarding a transaction request created or requested earlier. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request.
   */
  TransactionRequestsByID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /transactionRequests/{ID}` is used to inform the client of a requested or created transaction request. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request, or the `{ID}` that was used in the `GET /transactionRequests/{ID}`.
   */
  TransactionRequestsByIDPut: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["TransactionRequestsIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find or create a transaction request, or another processing error occurs, the error callback `PUT /transactionRequests/{ID}/error` is used. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request, or the `{ID}` that was used in the `GET /transactionRequests/{ID}`.
   */
  TransactionRequestsErrorByID: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /quotes` is used to request the creation of a quote for the provided financial transaction in the server.
   */
  Quotes: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["QuotesPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /quotes/{ID}` is used to get information regarding a quote created or requested earlier. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote.
   */
  QuotesByID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /quotes/{ID}` is used to inform the client of a requested or created quote. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
   */
  QuotesByID1: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["QuotesIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find or create a quote, or some other processing error occurs, the error callback `PUT /quotes/{ID}/error` is used. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
   */
  QuotesByIDAndError: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /authorizations/{ID}` is used to request the Payer to enter the applicable credentials in the Payee FSP system. The `{ID}` in the URI should contain the `transactionRequestID`, received from the `POST /transactionRequests` service earlier in the process. This request requires a query string to be included in the URI, with the following key-value pairs*:*
   *
   * - `authenticationType={Type}`, where `{Type}` value is a valid authentication type from the enumeration `AuthenticationType`.
   *
   * - `retriesLeft=={NrOfRetries}`, where `{NrOfRetries}` is the number of retries left before the financial transaction is rejected. `{NrOfRetries}` must be expressed in the form of the data type `Integer`. `retriesLeft=1` means that this is the last retry before the financial transaction is rejected.
   *
   * - `amount={Amount}`, where `{Amount}` is the transaction amount that will be withdrawn from the Payer’s account. `{Amount}` must be expressed in the form of the data type `Amount`.
   *
   * - `currency={Currency}`, where `{Currency}` is the transaction currency for the amount that will be withdrawn from the Payer’s account. The `{Currency}` value must be expressed in the form of the enumeration `CurrencyCode`.
   *
   * The following is an example URI containing all the required key-value pairs in the query string*:*
   *
   * `GET /authorization/3d492671-b7af-4f3f-88de-76169b1bdf88?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD`
   */
  AuthorizationsByIDGet: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /authorizations/{ID}` is used to inform the client of the result of a previously-requested authorization. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /authorizations/{ID}` request.
   */
  AuthorizationsByIDPut: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["AuthorizationsIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find the transaction request, or another processing error occurs, the error callback `PUT /authorizations/{ID}/error` is used. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /authorizations/{ID}`.
   */
  AuthorizationsByIDAndError: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /transfers` is used to request the creation of a transfer for the next ledger, and a financial transaction for the Payee FSP.
   */
  transfers: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["TransfersPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /transfers/{ID}` is used to get information regarding a transfer created or requested earlier. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer.
   */
  TransfersByIDGet: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request PATCH /transfers/<ID> is used by a Switch to update the state of a previously reserved transfer, if the Payee FSP has requested a commit notification when the Switch has completed processing of the transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer. Please note that this request does not generate a callback.
   */
  TransfersByIDPatch: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["TransfersIDPatchResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /transfers/{ID}` is used to inform the client of a requested or created transfer. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}` request.
   */
  TransfersByIDPut: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["TransfersIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find or create a transfer, or another processing error occurs, the error callback `PUT /transfers/{ID}/error` is used. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}`.
   */
  TransfersByIDAndError: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /transactions/{ID}` is used to get transaction information regarding a financial transaction created earlier. The `{ID}` in the URI should contain the `transactionId` that was used for the creation of the quote, as the transaction is created as part of another process (the transfer process).
   */
  TransactionsByID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /transactions/{ID}` is used to inform the client of a requested transaction. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /transactions/{ID}` request.
   */
  TransactionsByID1: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["TransactionsIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find or create a transaction, or another processing error occurs, the error callback `PUT /transactions/{ID}/error` is used. The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /transactions/{ID}` request.
   */
  TransactionsErrorByID: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /bulkQuotes` is used to request the creation of a bulk quote for the provided financial transactions in the server.
   */
  BulkQuotes: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["BulkQuotesPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /bulkQuotes/{ID}` is used to get information regarding a bulk quote created or requested earlier. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote.
   */
  BulkQuotesByID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /bulkQuotes/{ID}` is used to inform the client of a requested or created bulk quote. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote, or the `{ID}` that was used in the `GET /bulkQuotes/{ID}` request.
   */
  BulkQuotesByID1: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["BulkQuotesIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find or create a bulk quote, or another processing error occurs, the error callback `PUT /bulkQuotes/{ID}/error` is used. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the creation of the bulk quote, or the `{ID}` that was used in the `GET /bulkQuotes/{ID}` request.
   */
  BulkQuotesErrorByID: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `POST /bulkTransfers` is used to request the creation of a bulk transfer in the server.
   */
  BulkTransfers: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["BulkTransfersPostRequest"];
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The HTTP request `GET /bulkTransfers/{ID}` is used to get information regarding a bulk transfer created or requested earlier. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer.
   */
  BulkTransferByID: {
    parameters: {
      header: {
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      "202": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * The callback `PUT /bulkTransfers/{ID}` is used to inform the client of a requested or created bulk transfer. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer (`POST /bulkTransfers`), or the `{ID}` that was used in the `GET /bulkTransfers/{ID}` request.
   */
  BulkTransfersByIDPut: {
    parameters: {
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["BulkTransfersIDPutResponse"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
  /**
   * If the server is unable to find or create a bulk transfer, or another processing error occurs, the error callback `PUT /bulkTransfers/{ID}/error` is used. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the creation of the bulk transfer (`POST /bulkTransfers`), or the `{ID}` that was used in the `GET /bulkTransfers/{ID}` request.
   */
  BulkTransfersErrorByID: {
    parameters: {
      path: {
        ID: components["parameters"]["ID"];
      };
      header: {
        "Content-Length"?: components["parameters"]["Content-Length"];
        "Content-Type": components["parameters"]["Content-Type"];
        Date: components["parameters"]["Date"];
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    requestBody: {
      "application/json": components["schemas"]["ErrorInformationObject"];
    };
    responses: {
      "200": unknown;
      "400": unknown;
      "401": unknown;
      "403": unknown;
      "404": unknown;
      "405": unknown;
      "406": unknown;
      "501": unknown;
      "503": unknown;
    };
  };
}

export interface components {
  parameters: {
    /**
     * The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.
     */
    Type: string;
    /**
     * The identifier value.
     */
    ID: string;
    /**
     * The `Content-Type` header indicates the specific version of the API used to send the payload body.
     */
    "Content-Type": string;
    /**
     * The `Date` header field indicates the date when the request was sent.
     */
    Date: string;
    /**
     * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
     *
     * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
     */
    "X-Forwarded-For": string;
    /**
     * The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`).
     */
    "FSPIOP-Source": string;
    /**
     * The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty.
     */
    "FSPIOP-Destination": string;
    /**
     * The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.
     */
    "FSPIOP-Encryption": string;
    /**
     * The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.
     */
    "FSPIOP-Signature": string;
    /**
     * The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
     */
    "FSPIOP-URI": string;
    /**
     * The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
     */
    "FSPIOP-HTTP-Method": string;
    /**
     * The `Accept` header field indicates the version of the API the client would like the server to use.
     */
    Accept: string;
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    "Content-Length": number;
    /**
     * A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`.
     */
    SubId: string;
  };
  schemas: {
    /**
     * The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters.
     */
    BinaryString: string;
    /**
     * The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed.
     */
    BinaryString32: string;
    /**
     * The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. This format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples are "1982-05-23", "1987-08-05”.
     */
    Date: string;
    /**
     * The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.
     */
    Integer: string;
    /**
     * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
     *
     * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
     *
     * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
     */
    Name: string;
    /**
     * Below are the allowed values for the enumeration.
     * - PASSPORT - A passport number is used as reference to a Party.
     * - NATIONAL_REGISTRATION - A national registration number is used as reference to a Party.
     * - DRIVING_LICENSE - A driving license is used as reference to a Party.
     * - ALIEN_REGISTRATION - An alien registration number is used as reference to a Party.
     * - NATIONAL_ID_CARD - A national ID card number is used as reference to a Party.
     * - EMPLOYER_ID - A tax identification number is used as reference to a Party.
     * - TAX_ID_NUMBER - A tax identification number is used as reference to a Party.
     * - SENIOR_CITIZENS_CARD - A senior citizens card number is used as reference to a Party.
     * - MARRIAGE_CERTIFICATE - A marriage certificate number is used as reference to a Party.
     * - HEALTH_CARD - A health card number is used as reference to a Party.
     * - VOTERS_ID - A voter’s identification number is used as reference to a Party.
     * - UNITED_NATIONS - An UN (United Nations) number is used as reference to a Party.
     * - OTHER_ID - Any other type of identification type number is used as reference to a Party.
     */
    PersonalIdentifierType:
      | "PASSPORT"
      | "NATIONAL_REGISTRATION"
      | "DRIVING_LICENSE"
      | "ALIEN_REGISTRATION"
      | "NATIONAL_ID_CARD"
      | "EMPLOYER_ID"
      | "TAX_ID_NUMBER"
      | "SENIOR_CITIZENS_CARD"
      | "MARRIAGE_CERTIFICATE"
      | "HEALTH_CARD"
      | "VOTERS_ID"
      | "UNITED_NATIONS"
      | "OTHER_ID";
    /**
     * The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper- or lowercase characters from a to z.
     */
    TokenCode: string;
    /**
     * Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
     */
    CorrelationId: string;
    /**
     * Below are the allowed values for the enumeration.
     * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.
     * - EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).
     * - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.
     * - BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.
     * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.
     * - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.
     * - IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.
     * - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.
     */
    PartyIdType:
      | "MSISDN"
      | "EMAIL"
      | "PERSONAL_ID"
      | "BUSINESS"
      | "DEVICE"
      | "ACCOUNT_ID"
      | "IBAN"
      | "ALIAS";
    /**
     * Identifier of the Party.
     */
    PartyIdentifier: string;
    /**
     * Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
     */
    PartySubIdOrType: string;
    /**
     * FSP identifier.
     */
    FspId: string;
    /**
     * Extension key.
     */
    ExtensionKey: string;
    /**
     * Extension value.
     */
    ExtensionValue: string;
    /**
     * Data model for the complex type Extension.
     */
    Extension: {
      key: components["schemas"]["ExtensionKey"];
      value: components["schemas"]["ExtensionValue"];
    };
    /**
     * Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
     */
    ExtensionList: {
      /**
       * Number of Extension elements.
       */
      extension: components["schemas"]["Extension"][];
    };
    /**
     * Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
     */
    PartyIdInfo: {
      partyIdType: components["schemas"]["PartyIdType"];
      partyIdentifier: components["schemas"]["PartyIdentifier"];
      partySubIdOrType?: components["schemas"]["PartySubIdOrType"];
      fspId?: components["schemas"]["FspId"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
     */
    MerchantClassificationCode: string;
    /**
     * Name of the Party. Could be a real name or a nickname.
     */
    PartyName: string;
    /**
     * First name of the Party (Name Type).
     */
    FirstName: string;
    /**
     * Middle name of the Party (Name Type).
     */
    MiddleName: string;
    /**
     * Last name of the Party (Name Type).
     */
    LastName: string;
    /**
     * Data model for the complex type PartyComplexName.
     */
    PartyComplexName: {
      firstName?: components["schemas"]["FirstName"];
      middleName?: components["schemas"]["MiddleName"];
      lastName?: components["schemas"]["LastName"];
    };
    /**
     * Date of Birth of the Party.
     */
    DateOfBirth: string;
    /**
     * Data model for the complex type PartyPersonalInfo.
     */
    PartyPersonalInfo: {
      complexName?: components["schemas"]["PartyComplexName"];
      dateOfBirth?: components["schemas"]["DateOfBirth"];
    };
    /**
     * Data model for the complex type Party.
     */
    Party: {
      partyIdInfo: components["schemas"]["PartyIdInfo"];
      merchantClassificationCode?: components["schemas"]["MerchantClassificationCode"];
      name?: components["schemas"]["PartyName"];
      personalInfo?: components["schemas"]["PartyPersonalInfo"];
    };
    /**
     * The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
     */
    Currency:
      | "AED"
      | "AFN"
      | "ALL"
      | "AMD"
      | "ANG"
      | "AOA"
      | "ARS"
      | "AUD"
      | "AWG"
      | "AZN"
      | "BAM"
      | "BBD"
      | "BDT"
      | "BGN"
      | "BHD"
      | "BIF"
      | "BMD"
      | "BND"
      | "BOB"
      | "BRL"
      | "BSD"
      | "BTN"
      | "BWP"
      | "BYN"
      | "BZD"
      | "CAD"
      | "CDF"
      | "CHF"
      | "CLP"
      | "CNY"
      | "COP"
      | "CRC"
      | "CUC"
      | "CUP"
      | "CVE"
      | "CZK"
      | "DJF"
      | "DKK"
      | "DOP"
      | "DZD"
      | "EGP"
      | "ERN"
      | "ETB"
      | "EUR"
      | "FJD"
      | "FKP"
      | "GBP"
      | "GEL"
      | "GGP"
      | "GHS"
      | "GIP"
      | "GMD"
      | "GNF"
      | "GTQ"
      | "GYD"
      | "HKD"
      | "HNL"
      | "HRK"
      | "HTG"
      | "HUF"
      | "IDR"
      | "ILS"
      | "IMP"
      | "INR"
      | "IQD"
      | "IRR"
      | "ISK"
      | "JEP"
      | "JMD"
      | "JOD"
      | "JPY"
      | "KES"
      | "KGS"
      | "KHR"
      | "KMF"
      | "KPW"
      | "KRW"
      | "KWD"
      | "KYD"
      | "KZT"
      | "LAK"
      | "LBP"
      | "LKR"
      | "LRD"
      | "LSL"
      | "LYD"
      | "MAD"
      | "MDL"
      | "MGA"
      | "MKD"
      | "MMK"
      | "MNT"
      | "MOP"
      | "MRO"
      | "MUR"
      | "MVR"
      | "MWK"
      | "MXN"
      | "MYR"
      | "MZN"
      | "NAD"
      | "NGN"
      | "NIO"
      | "NOK"
      | "NPR"
      | "NZD"
      | "OMR"
      | "PAB"
      | "PEN"
      | "PGK"
      | "PHP"
      | "PKR"
      | "PLN"
      | "PYG"
      | "QAR"
      | "RON"
      | "RSD"
      | "RUB"
      | "RWF"
      | "SAR"
      | "SBD"
      | "SCR"
      | "SDG"
      | "SEK"
      | "SGD"
      | "SHP"
      | "SLL"
      | "SOS"
      | "SPL"
      | "SRD"
      | "STD"
      | "SVC"
      | "SYP"
      | "SZL"
      | "THB"
      | "TJS"
      | "TMT"
      | "TND"
      | "TOP"
      | "TRY"
      | "TTD"
      | "TVD"
      | "TWD"
      | "TZS"
      | "UAH"
      | "UGX"
      | "USD"
      | "UYU"
      | "UZS"
      | "VEF"
      | "VND"
      | "VUV"
      | "WST"
      | "XAF"
      | "XCD"
      | "XDR"
      | "XOF"
      | "XPF"
      | "YER"
      | "ZAR"
      | "ZMW"
      | "ZWD";
    /**
     * The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
     */
    Amount: string;
    /**
     * Data model for the complex type Money.
     */
    Money: {
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
     * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
     * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
     * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
     * - REFUND - Used for performing a refund of transaction.
     */
    TransactionScenario:
      | "DEPOSIT"
      | "WITHDRAWAL"
      | "TRANSFER"
      | "PAYMENT"
      | "REFUND";
    /**
     * Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
     */
    TransactionSubScenario: string;
    /**
     * Below are the allowed values for the enumeration.
     * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
     * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
     */
    TransactionInitiator: "PAYER" | "PAYEE";
    /**
     * Below are the allowed values for the enumeration.
     * - CONSUMER - Consumer is the initiator of the transaction.
     * - AGENT - Agent is the initiator of the transaction.
     * - BUSINESS - Business is the initiator of the transaction.
     * - DEVICE - Device is the initiator of the transaction.
     */
    TransactionInitiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
    /**
     * Reason for the refund.
     */
    RefundReason: string;
    /**
     * Data model for the complex type Refund.
     */
    Refund: {
      originalTransactionId: components["schemas"]["CorrelationId"];
      refundReason?: components["schemas"]["RefundReason"];
    };
    /**
     * (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
     */
    BalanceOfPayments: string;
    /**
     * Data model for the complex type TransactionType.
     */
    TransactionType: {
      scenario: components["schemas"]["TransactionScenario"];
      subScenario?: components["schemas"]["TransactionSubScenario"];
      initiator: components["schemas"]["TransactionInitiator"];
      initiatorType: components["schemas"]["TransactionInitiatorType"];
      refundInfo?: components["schemas"]["Refund"];
      balanceOfPayments?: components["schemas"]["BalanceOfPayments"];
    };
    /**
     * Memo assigned to transaction.
     */
    Note: string;
    /**
     * Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes request.
     */
    Transaction: {
      transactionId: components["schemas"]["CorrelationId"];
      quoteId: components["schemas"]["CorrelationId"];
      payee: components["schemas"]["Party"];
      payer: components["schemas"]["Party"];
      amount: components["schemas"]["Money"];
      transactionType: components["schemas"]["TransactionType"];
      note?: components["schemas"]["Note"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_).
     */
    UndefinedEnum: string;
    /**
     * The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
     */
    ErrorCode: string;
    /**
     * Error description string.
     */
    ErrorDescription: string;
    /**
     * Data model for the complex type ErrorInformation.
     */
    ErrorInformation: {
      errorCode: components["schemas"]["ErrorCode"];
      errorDescription: components["schemas"]["ErrorDescription"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
     */
    ErrorInformationResponse: {
      errorInformation?: components["schemas"]["ErrorInformation"];
    };
    /**
     * The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks.
     */
    ParticipantsTypeIDPutResponse: { fspId?: components["schemas"]["FspId"] };
    /**
     * The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests. An additional optional ExtensionList element has been added as part of v1.1 changes.
     */
    ParticipantsTypeIDSubIDPostRequest: {
      fspId: components["schemas"]["FspId"];
      currency?: components["schemas"]["Currency"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Data model for the complex type object that contains ErrorInformation.
     */
    ErrorInformationObject: {
      errorInformation: components["schemas"]["ErrorInformation"];
    };
    /**
     * The object sent in the POST /participants request.
     */
    ParticipantsPostRequest: {
      requestId: components["schemas"]["CorrelationId"];
      /**
       * List of PartyIdInfo elements that the client would like to update or create FSP information about.
       */
      partyList: components["schemas"]["PartyIdInfo"][];
      currency?: components["schemas"]["Currency"];
    };
    /**
     * Data model for the complex type PartyResult.
     */
    PartyResult: {
      partyId: components["schemas"]["PartyIdInfo"];
      errorInformation?: components["schemas"]["ErrorInformation"];
    };
    /**
     * The object sent in the PUT /participants/{ID} callback.
     */
    ParticipantsIDPutResponse: {
      /**
       * List of PartyResult elements that were either created or failed to be created.
       */
      partyList: components["schemas"]["PartyResult"][];
      currency?: components["schemas"]["Currency"];
    };
    /**
     * The object sent in the PUT /parties/{Type}/{ID} callback.
     */
    PartiesTypeIDPutResponse: { party: components["schemas"]["Party"] };
    /**
     * The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
     */
    Latitude: string;
    /**
     * The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.
     */
    Longitude: string;
    /**
     * Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
     */
    GeoCode: {
      latitude: components["schemas"]["Latitude"];
      longitude: components["schemas"]["Longitude"];
    };
    /**
     * Below are the allowed values for the enumeration AuthenticationType.
     * - OTP - One-time password generated by the Payer FSP.
     * - QRCODE - QR code used as One Time Password.
     * - U2F - U2F is a new addition isolated to Thirdparty stream.
     */
    AuthenticationType: "OTP" | "QRCODE" | "U2F";
    /**
     * The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
     */
    DateTime: string;
    /**
     * The object sent in the POST /transactionRequests request.
     */
    TransactionRequestsPostRequest: {
      transactionRequestId: components["schemas"]["CorrelationId"];
      payee: components["schemas"]["Party"];
      payer: components["schemas"]["PartyIdInfo"];
      amount: components["schemas"]["Money"];
      transactionType: components["schemas"]["TransactionType"];
      note?: components["schemas"]["Note"];
      geoCode?: components["schemas"]["GeoCode"];
      authenticationType?: components["schemas"]["AuthenticationType"];
      expiration?: components["schemas"]["DateTime"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
     * - PENDING - Payer FSP has sent the transaction request to the Payer.
     * - ACCEPTED - Payer has approved the transaction.
     * - REJECTED - Payer has rejected the transaction.
     */
    TransactionRequestState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
    /**
     * The object sent in the PUT /transactionRequests/{ID} callback.
     */
    TransactionRequestsIDPutResponse: {
      transactionId?: components["schemas"]["CorrelationId"];
      transactionRequestState: components["schemas"]["TransactionRequestState"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Below are the allowed values for the enumeration AmountType.
     * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
     * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
     */
    AmountType: "SEND" | "RECEIVE";
    /**
     * The object sent in the POST /quotes request.
     */
    QuotesPostRequest: {
      quoteId: components["schemas"]["CorrelationId"];
      transactionId: components["schemas"]["CorrelationId"];
      transactionRequestId?: components["schemas"]["CorrelationId"];
      payee: components["schemas"]["Party"];
      payer: components["schemas"]["Party"];
      amountType: components["schemas"]["AmountType"];
      amount: components["schemas"]["Money"];
      fees?: components["schemas"]["Money"];
      transactionType: components["schemas"]["TransactionType"];
      geoCode?: components["schemas"]["GeoCode"];
      note?: components["schemas"]["Note"];
      expiration?: components["schemas"]["DateTime"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Information for recipient (transport layer information).
     */
    IlpPacket: string;
    /**
     * Condition that must be attached to the transfer by the Payer.
     */
    IlpCondition: string;
    /**
     * The object sent in the PUT /quotes/{ID} callback.
     */
    QuotesIDPutResponse: {
      transferAmount: components["schemas"]["Money"];
      payeeReceiveAmount?: components["schemas"]["Money"];
      payeeFspFee?: components["schemas"]["Money"];
      payeeFspCommission?: components["schemas"]["Money"];
      expiration: components["schemas"]["DateTime"];
      geoCode?: components["schemas"]["GeoCode"];
      ilpPacket: components["schemas"]["IlpPacket"];
      condition: components["schemas"]["IlpCondition"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.
     */
    OtpValue: string;
    /**
     * QR code used as a One Time Password.
     */
    QRCODE: string;
    /**
     * U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
     */
    U2FPIN: string;
    /**
     * U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.
     */
    U2FPinValue: {
      /**
       * U2F challenge-response.
       */
      pinValue: components["schemas"]["U2FPIN"];
      /**
       * Sequential counter used for cloning detection. Present only for U2F authentication.
       */
      counter: components["schemas"]["Integer"];
    };
    /**
     * Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.
     */
    AuthenticationValue: Partial<components["schemas"]["OtpValue"]> &
      Partial<components["schemas"]["QRCODE"]> &
      Partial<components["schemas"]["U2FPinValue"]>;
    /**
     * Data model for the complex type AuthenticationInfo.
     */
    AuthenticationInfo: {
      authentication: components["schemas"]["AuthenticationType"];
      authenticationValue: components["schemas"]["AuthenticationValue"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - ENTERED - Consumer entered the authentication value.
     * - REJECTED - Consumer rejected the transaction.
     * - RESEND - Consumer requested to resend the authentication value.
     */
    AuthorizationResponse: "ENTERED" | "REJECTED" | "RESEND";
    /**
     * The object sent in the PUT /authorizations/{ID} callback.
     */
    AuthorizationsIDPutResponse: {
      authenticationInfo?: components["schemas"]["AuthenticationInfo"];
      responseType: components["schemas"]["AuthorizationResponse"];
    };
    /**
     * The object sent in the POST /transfers request.
     */
    TransfersPostRequest: {
      transferId: components["schemas"]["CorrelationId"];
      payeeFsp: components["schemas"]["FspId"];
      payerFsp: components["schemas"]["FspId"];
      amount: components["schemas"]["Money"];
      ilpPacket: components["schemas"]["IlpPacket"];
      condition: components["schemas"]["IlpCondition"];
      expiration: components["schemas"]["DateTime"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Fulfilment that must be attached to the transfer by the Payee.
     */
    IlpFulfilment: string;
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Next ledger has received the transfer.
     * - RESERVED - Next ledger has reserved the transfer.
     * - COMMITTED - Next ledger has successfully performed the transfer.
     * - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer.
     */
    TransferState: "RECEIVED" | "RESERVED" | "COMMITTED" | "ABORTED";
    /**
     * The object sent in the PUT /transfers/{ID} callback.
     */
    TransfersIDPutResponse: {
      fulfilment?: components["schemas"]["IlpFulfilment"];
      completedTimestamp?: components["schemas"]["DateTime"];
      transferState: components["schemas"]["TransferState"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * PATCH /transfers/{ID} object
     */
    TransfersIDPatchResponse: {
      completedTimestamp: components["schemas"]["DateTime"];
      transferState: components["schemas"]["TransferState"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
     * - PENDING - Payee FSP has validated the transaction.
     * - COMPLETED - Payee FSP has successfully performed the transaction.
     * - REJECTED - Payee FSP has failed to perform the transaction.
     */
    TransactionState: "RECEIVED" | "PENDING" | "COMPLETED" | "REJECTED";
    /**
     * Any code/token returned by the Payee FSP (TokenCode Type).
     */
    Code: string;
    /**
     * The object sent in the PUT /transactions/{ID} callback.
     */
    TransactionsIDPutResponse: {
      completedTimestamp?: components["schemas"]["DateTime"];
      transactionState: components["schemas"]["TransactionState"];
      code?: components["schemas"]["Code"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Data model for the complex type IndividualQuote.
     */
    IndividualQuote: {
      quoteId: components["schemas"]["CorrelationId"];
      transactionId: components["schemas"]["CorrelationId"];
      payee: components["schemas"]["Party"];
      amountType: components["schemas"]["AmountType"];
      amount: components["schemas"]["Money"];
      fees?: components["schemas"]["Money"];
      transactionType: components["schemas"]["TransactionType"];
      note?: components["schemas"]["Note"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * The object sent in the POST /bulkQuotes request.
     */
    BulkQuotesPostRequest: {
      bulkQuoteId: components["schemas"]["CorrelationId"];
      payer: components["schemas"]["Party"];
      geoCode?: components["schemas"]["GeoCode"];
      expiration?: components["schemas"]["DateTime"];
      /**
       * List of quotes elements.
       */
      individualQuotes: components["schemas"]["IndividualQuote"][];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Data model for the complex type IndividualQuoteResult.
     */
    IndividualQuoteResult: {
      quoteId: components["schemas"]["CorrelationId"];
      payee?: components["schemas"]["Party"];
      transferAmount?: components["schemas"]["Money"];
      payeeReceiveAmount?: components["schemas"]["Money"];
      payeeFspFee?: components["schemas"]["Money"];
      payeeFspCommission?: components["schemas"]["Money"];
      ilpPacket?: components["schemas"]["IlpPacket"];
      condition?: components["schemas"]["IlpCondition"];
      errorInformation?: components["schemas"]["ErrorInformation"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * The object sent in the PUT /bulkQuotes/{ID} callback.
     */
    BulkQuotesIDPutResponse: {
      /**
       * Fees for each individual transaction, if any of them are charged per transaction.
       */
      individualQuoteResults?: components["schemas"]["IndividualQuoteResult"][];
      expiration: components["schemas"]["DateTime"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Data model for the complex type IndividualTransfer.
     */
    IndividualTransfer: {
      transferId: components["schemas"]["CorrelationId"];
      transferAmount: components["schemas"]["Money"];
      ilpPacket: components["schemas"]["IlpPacket"];
      condition: components["schemas"]["IlpCondition"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * The object sent in the POST /bulkTransfers request.
     */
    BulkTransfersPostRequest: {
      bulkTransferId: components["schemas"]["CorrelationId"];
      bulkQuoteId: components["schemas"]["CorrelationId"];
      payerFsp: components["schemas"]["FspId"];
      payeeFsp: components["schemas"]["FspId"];
      /**
       * List of IndividualTransfer elements.
       */
      individualTransfers: components["schemas"]["IndividualTransfer"][];
      expiration: components["schemas"]["DateTime"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Data model for the complex type IndividualTransferResult.
     */
    IndividualTransferResult: {
      transferId: components["schemas"]["CorrelationId"];
      fulfilment?: components["schemas"]["IlpFulfilment"];
      errorInformation?: components["schemas"]["ErrorInformation"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payee FSP has received the bulk transfer from the Payer FSP.
     * - PENDING - Payee FSP has validated the bulk transfer.
     * - ACCEPTED - Payee FSP has accepted to process the bulk transfer.
     * - PROCESSING - Payee FSP has started to transfer fund to the Payees.
     * - COMPLETED - Payee FSP has completed transfer of funds to the Payees.
     * - REJECTED - Payee FSP has rejected to process the bulk transfer.
     */
    BulkTransferState:
      | "RECEIVED"
      | "PENDING"
      | "ACCEPTED"
      | "PROCESSING"
      | "COMPLETED"
      | "REJECTED";
    /**
     * The object sent in the PUT /bulkTransfers/{ID} callback.
     */
    BulkTransfersIDPutResponse: {
      completedTimestamp?: components["schemas"]["DateTime"];
      /**
       * List of IndividualTransferResult elements.
       */
      individualTransferResults?: components["schemas"]["IndividualTransferResult"][];
      bulkTransferState: components["schemas"]["BulkTransferState"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
  };
  responses: {
    /**
     * OK
     */
    "200": { [key: string]: any };
    /**
     * Accepted
     */
    "202": { [key: string]: any };
    /**
     * Bad Request
     */
    "400": { [key: string]: any };
    /**
     * Unauthorized
     */
    "401": { [key: string]: any };
    /**
     * Forbidden
     */
    "403": { [key: string]: any };
    /**
     * Not Found
     */
    "404": { [key: string]: any };
    /**
     * Method Not Allowed
     */
    "405": { [key: string]: any };
    /**
     * Not Acceptable
     */
    "406": { [key: string]: any };
    /**
     * Not Implemented
     */
    "501": { [key: string]: any };
    /**
     * Service Unavailable
     */
    "503": { [key: string]: any };
  };
}
