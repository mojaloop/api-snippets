/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/parties/{Type}/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Look up party information
         * @description The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
         */
        get: operations["PartiesByTypeAndID"];
        /**
         * Return party information
         * @description The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
         */
        put: operations["PartiesByTypeAndID2"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return party information error
         * @description If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubI}/error`) is used.
         */
        put: operations["PartiesErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/{SubId}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /**
         * Look up party information
         * @description The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
         */
        get: operations["PartiesSubIdByTypeAndID"];
        /**
         * Return party information
         * @description The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
         */
        put: operations["PartiesSubIdByTypeAndIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/{SubId}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return party information error
         * @description If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubId}/error`) is used.
         */
        put: operations["PartiesSubIdErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate quote
         * @description The HTTP request `POST /quotes` is used to request the creation of a quote for the provided financial transaction in the server.
         */
        post: operations["Quotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve quote information
         * @description The HTTP request `GET /quotes/{ID}` is used to get information regarding a quote created or requested earlier. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote.
         */
        get: operations["QuotesByID"];
        /**
         * Return quote information
         * @description The callback `PUT /quotes/{ID}` is used to inform the client of a requested or created quote. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
         */
        put: operations["QuotesByID1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return quote information error
         * @description If the server is unable to find or create a quote, or some other processing error occurs, the error callback `PUT /quotes/{ID}/error` is used. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
         */
        put: operations["QuotesByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform transfer
         * @description The HTTP request `POST /transfers` is used to request the creation of a transfer for the next ledger, and a financial transaction for the Payee FSP.
         */
        post: operations["transfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve transfer information
         * @description The HTTP request `GET /transfers/{ID}` is used to get information regarding a transfer created or requested earlier. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer.
         */
        get: operations["TransfersByIDGet"];
        /**
         * Return transfer information
         * @description The callback `PUT /transfers/{ID}` is used to inform the client of a requested or created transfer. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}` request.
         */
        put: operations["TransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Return transfer information
         * @description The HTTP request PATCH /transfers/<ID> is used by a Switch to update the state of a previously reserved transfer, if the Payee FSP has requested a commit notification when the Switch has completed processing of the transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer. Please note that this request does not generate a callback.
         */
        patch: operations["TransfersByIDPatch"];
        trace?: never;
    };
    "/transfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return transfer information error
         * @description If the server is unable to find or create a transfer, or another processing error occurs, the error callback `PUT /transfers/{ID}/error` is used. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}`.
         */
        put: operations["TransfersByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate FX quote
         * @description The HTTP request `POST /fxQuotes` is used to ask an FXP to provide a quotation for a currency conversion.
         */
        post: operations["FxQuotesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve FX quote information
         * @description The HTTP request `GET /fxQuotes/{ID}` is used to request information regarding a request for quotation for a  currency conversion which the sender has previously issued. The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the quote.
         */
        get: operations["FxQuotesByIDGet"];
        /**
         * Return FX quote information
         * @description The callback `PUT /fxQuotes/{ID}` is used to inform the requester about the outcome of a request for quotation for a currency conversion.  The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the FX quote, or the `{ID}` that was used in the `GET /fxQuotes/{ID}` request.
         */
        put: operations["FxQuotesByIdPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return FX quote information error
         * @description If the FXP is unable to find or create a FX quote, or some other processing error occurs, the error callback `PUT /fxQuotes/{ID}/error` is used. The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the FX quote, or the `{ID}` that was used in the `GET /fxQuotes/{ID}` request.
         */
        put: operations["FxQuotesByIDAndErrorPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxTransfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform FX transfer
         * @description The HTTP request `POST /fxTransfers` is used to ask an FXP to confirm the execution of an agreed currency conversion.
         */
        post: operations["FxTransfersPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxTransfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve FX transfer information
         * @description The HTTP request `GET /fxTransfers/{ID}` s used to request information regarding a request for confirmation of a currency conversion which the sender has previously issued. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer.
         */
        get: operations["FxTransfersByIDGet"];
        /**
         * Return FX transfer information
         * @description The callback `PUT /fxTransfers/{ID}` is used to inform the requester about the outcome of a request for execution of a currency conversion. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer, or the `{ID}` that was used in the `GET /fxTransfers/{ID}` request.
         */
        put: operations["FxTransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Return FX transfer information
         * @description The HTTP request PATCH /fxTransfers/<ID> is used to inform the requester about the final determination by the switch of the transfer a request for execution of a currency conversion. The <ID> in the URI should contain the commitRequestId that was used for the creation of the FX transfer. Please note that this request does not generate a callback.
         */
        patch: operations["FxTransfersByIDPatch"];
        trace?: never;
    };
    "/fxTransfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return FX transfer information error
         * @description If the switch or FXP is unable to find or create a FX transfer, or another processing error occurs, the error callback `PUT /fxTransfers/{ID}/error` is used. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer, or the `{ID}` that was used in the `GET /fxTransfers/{ID}`.
         */
        put: operations["FxTransfersByIDAndErrorPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AccountIdentification4Choice
         * @description Specifies the unique identification of an account as assigned by the account servicer.
         *
         * @example {
         *       "IBAN": "BE71096123456769"
         *     }
         */
        AccountIdentification4Choice: {
            IBAN?: components["schemas"]["IBAN2007Identifier"];
            Othr?: components["schemas"]["GenericAccountIdentification1"];
        } & (unknown | unknown);
        /**
         * AccountSchemeName1Choice
         * @description Sets of elements to identify a name of the identification scheme.
         *
         * @example {
         *       "Cd": 1111
         *     }
         */
        AccountSchemeName1Choice: {
            Cd?: components["schemas"]["ExternalAccountIdentification1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * ActiveCurrencyAndAmount
         * @description A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
         *
         * @example {
         *       "ActiveCurrencyAndAmount": 123.45,
         *       "Ccy": "USD"
         *     }
         */
        ActiveCurrencyAndAmount: {
            ActiveCurrencyAndAmount: components["schemas"]["ActiveCurrencyAndAmount_SimpleType"];
            Ccy: components["schemas"]["ActiveCurrencyCode"];
        };
        /**
         * ActiveCurrencyAndAmount_SimpleType
         * @description NOTE: This regex doesn't seem correct given it's xsd definition.
         *     <xs:simpleType name="ActiveCurrencyAndAmount_SimpleType">
         *       <xs:restriction base="xs:decimal">
         *         <xs:fractionDigits value="5"/>
         *         <xs:totalDigits value="18"/>
         *         <xs:minInclusive value="0"/>
         *       </xs:restriction>
         *     </xs:simpleType>
         *
         * @example 123.45
         */
        ActiveCurrencyAndAmount_SimpleType: string;
        /**
         * ActiveCurrencyCode
         * @description A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
         * @example USD
         */
        ActiveCurrencyCode: string;
        /**
         * ActiveOrHistoricCurrencyAndAmount
         * @description A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
         *
         * @example {
         *       "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *       "Ccy": "USD"
         *     }
         */
        ActiveOrHistoricCurrencyAndAmount: {
            ActiveOrHistoricCurrencyAndAmount: components["schemas"]["ActiveOrHistoricCurrencyAndAmount_SimpleType"];
            Ccy: components["schemas"]["ActiveOrHistoricCurrencyCode"];
        };
        /**
         * ActiveOrHistoricCurrencyAndAmount_SimpleType
         * @example 123.45
         */
        ActiveOrHistoricCurrencyAndAmount_SimpleType: string;
        /**
         * ActiveOrHistoricCurrencyCode
         * @description A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
         *
         * @example USD
         */
        ActiveOrHistoricCurrencyCode: string;
        /**
         * @description AddressType2Code
         *     Specifies the type of address.
         *
         * @example ADDR
         * @enum {string}
         */
        AddressType2Code: "ADDR" | "PBOX" | "HOME" | "BIZZ" | "MLTO" | "DLVY";
        /**
         * AddressType3Choice
         * @description Choice of formats for the type of address.
         *
         * @example {
         *       "Cd": "ADDR"
         *     }
         */
        AddressType3Choice: {
            Cd?: components["schemas"]["AddressType2Code"];
            Prtry?: components["schemas"]["GenericIdentification30"];
        } & (unknown | unknown);
        /**
         * AnyBICDec2014Identifier
         * @description AnyBICDec2014Identifier
         *     Code allocated to a financial or non-financial institution by the
         *     ISO 9362 Registration Authority, as described in ISO 9362: 2014
         *     - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
         *
         * @example J5BMVH7D
         */
        AnyBICDec2014Identifier: string;
        /**
         * BICFIDec2014Identifier
         * @description Code allocated to a financial institution by the ISO 9362 Registration
         *
         *     Authority as described in ISO 9362: 2014
         *
         *     - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
         *
         * @example J5BMVH7D
         */
        BICFIDec2014Identifier: string;
        /**
         * BaseOneRate
         * @description Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
         *
         * @example 0.7
         */
        BaseOneRate: string;
        /**
         * BranchAndFinancialInstitutionIdentification6
         * @description Unique and unambiguous identification of a financial institution or a branch of a financial institution.
         *
         * @example {
         *       "FinInstnId": {
         *         "BICFI": "J5BMVH7D"
         *       },
         *       "BrnchId": {
         *         "Id": 123,
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Department",
         *           "SubDept": "Sub department",
         *           "StrtNm": "Street name",
         *           "BldgNb": "Building number",
         *           "PstCd": "Post code",
         *           "TwnNm": "Town name",
         *           "CtrySubDvsn": "Country subdivision",
         *           "Ctry": "Country",
         *           "AdrLine": "Address line"
         *         }
         *       }
         *     }
         */
        BranchAndFinancialInstitutionIdentification6: {
            FinInstnId: components["schemas"]["FinancialInstitutionIdentification18"];
            BrnchId?: components["schemas"]["BranchData3"];
        };
        /**
         * BranchAndFinancialInstitutionIdentification8
         * @description Unique and unambiguous identification of a financial institution or a branch of a financial institution.
         *
         * @example {
         *       "FinInstnId": {
         *         "BICFI": "BUKBGB22"
         *       },
         *       "BrnchId": {
         *         "Id": 12345,
         *         "Nm": "Oxford Street Branch",
         *         "PstlAdr": {
         *           "Ctry": "GB",
         *           "AdrLine": [
         *             "1 Oxford Street",
         *             "London",
         *             "UK"
         *           ]
         *         }
         *       }
         *     }
         */
        BranchAndFinancialInstitutionIdentification8: {
            FinInstnId: components["schemas"]["FinancialInstitutionIdentification23"];
            BrnchId?: components["schemas"]["BranchData5"];
        };
        /**
         * BranchData3
         * @description Information that locates and identifies a specific branch of a financial institution.
         *
         * @example {
         *       "Id": 123,
         *       "Nm": "Name",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Department",
         *         "SubDept": "Sub department",
         *         "StrtNm": "Street name",
         *         "BldgNb": "Building number",
         *         "PstCd": "Post code",
         *         "TwnNm": "Town name",
         *         "CtrySubDvsn": "Country subdivision",
         *         "Ctry": "Country",
         *         "AdrLine": "Address line"
         *       }
         *     }
         */
        BranchData3: {
            Id?: components["schemas"]["Max35Text"];
            LEI?: components["schemas"]["LEIIdentifier"];
            Nm?: components["schemas"]["Max140Text"];
            PstlAdr?: components["schemas"]["PostalAddress24"];
        };
        /**
         * BranchData5
         * @description Information that locates and identifies a specific branch of a financial institution.
         *
         * @example {
         *       "Id": 123,
         *       "Nm": "Oxford Street Branch",
         *       "PstlAdr": {
         *         "Ctry": "GB",
         *         "AdrLine": [
         *           "1 Oxford Street",
         *           "London",
         *           "UK"
         *         ]
         *       }
         *     }
         */
        BranchData5: {
            Id?: components["schemas"]["Max35Text"];
            LEI?: components["schemas"]["LEIIdentifier"];
            Nm?: components["schemas"]["Max140Text"];
            PstlAdr?: components["schemas"]["PostalAddress27"];
        };
        /**
         * CashAccount40
         * @description Provides the details to identify an account.
         *
         * @example {
         *       "Id": {
         *         "IBAN": "BE71096123456769"
         *       },
         *       "Tp": {
         *         "Cd": "CACC"
         *       },
         *       "Ccy": "EUR",
         *       "Nm": "My account",
         *       "Prxy": {
         *         "Id": 12345
         *       }
         *     }
         */
        CashAccount40: {
            Id?: components["schemas"]["AccountIdentification4Choice"];
            Tp?: components["schemas"]["CashAccountType2Choice"];
            Ccy?: components["schemas"]["ActiveOrHistoricCurrencyCode"];
            Nm?: components["schemas"]["Max70Text"];
            Prxy?: components["schemas"]["ProxyAccountIdentification1"];
        };
        /**
         * CashAccountType2Choice
         * @description Specifies the nature, or use of the account.
         *
         * @example {
         *       "Cd": "CACC"
         *     }
         */
        CashAccountType2Choice: {
            Cd?: components["schemas"]["ExternalCashAccountType1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * CategoryPurpose1Choice
         * @description Contains details about high level purpose of the mandate based on a set of pre-defined categories.
         *
         * @example {
         *       "Cd": "CASH"
         *     }
         */
        CategoryPurpose1Choice: {
            Cd?: components["schemas"]["ExternalCategoryPurpose1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * ChargeBearerType1Code
         * @description Specifies which party(ies) will pay charges due for processing of the instruction.
         *     DEBT BorneByDebtor All transaction charges are to be borne by the debtor.
         *     CRED BorneByCreditor All transaction charges are to be borne by the creditor.
         *     SHAR Shared In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver
         *     SLEV FollowingServiceLevel Charges are to be applied following the rules agreed in the service level.
         *
         * @example DEBT
         * @enum {string}
         */
        ChargeBearerType1Code: "DEBT" | "CRED" | "SHAR" | "SLEV";
        /**
         * ChargeType3Choice
         * @description ChargeType3Choice Specifies the type of charge.
         * @example {
         *       "Cd": "CASH"
         *     }
         */
        ChargeType3Choice: {
            Cd?: components["schemas"]["ExternalChargeType1Code"];
            Prtry?: components["schemas"]["GenericIdentification3"];
        } & (unknown | unknown);
        /**
         * Charges16
         * @description NOTE: Unsure on description.
         *
         * @example {
         *       "Amt": {
         *         "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *         "Ccy": "USD"
         *       },
         *       "Agt": {
         *         "BrnchId": {
         *           "Id": "BRANCHID"
         *         },
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "Tp": {
         *         "Cd": "SHAR"
         *       }
         *     }
         */
        Charges16: {
            Amt: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            Agt: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            Tp?: components["schemas"]["ChargeType3Choice"];
        };
        /**
         * ClearingChannel2Code
         * @description Specifies the clearing channel for the routing of the transaction, as part of the payment type identification.
         *     RTGS RealTimeGrossSettlementSystem Clearing channel is a real-time gross settlement system.
         *     RTNS RealTimeNetSettlementSystem Clearing channel is a real-time net settlement system.
         *     MPNS MassPaymentNetSystem Clearing channel is a mass payment  net settlement system.
         *     BOOK BookTransfer Payment through internal book transfer.
         *
         * @example RTGS
         * @enum {string}
         */
        ClearingChannel2Code: "RTGS" | "RTNS" | "MPNS" | "BOOK";
        /**
         * ClearingSystemIdentification2Choice
         * @description Choice of a clearing system identifier.
         *
         * @example {
         *       "Cd": "CHQB"
         *     }
         */
        ClearingSystemIdentification2Choice: {
            Cd?: components["schemas"]["ExternalClearingSystemIdentification1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * ClearingSystemMemberIdentification2
         * @description Unique identification, as assigned by a clearing system, to unambiguously identify a member of the clearing system.
         *
         * @example {
         *       "ClrSysId": {
         *         "Cd": "CHQB"
         *       },
         *       "MmbId": 123456789
         *     }
         */
        ClearingSystemMemberIdentification2: {
            ClrSysId?: components["schemas"]["ClearingSystemIdentification2Choice"];
            MmbId: components["schemas"]["Max35Text"];
        };
        /**
         * Contact13
         * @description Specifies the details of the contact person.
         *
         * @example {
         *       "NmPrfx": "Mr",
         *       "Nm": "John Doe",
         *       "PhneNb": "+123-123-321",
         *       "MobNb": "+123-123-321",
         *       "FaxNb": "+123-123-321",
         *       "URLAdr": "http://www.example.com",
         *       "EmailAdr": "example@example.com"
         *     }
         */
        Contact13: {
            NmPrfx?: components["schemas"]["NamePrefix2Code"];
            Nm?: components["schemas"]["Max140Text"];
            PhneNb?: components["schemas"]["PhoneNumber"];
            MobNb?: components["schemas"]["PhoneNumber"];
            FaxNb?: components["schemas"]["PhoneNumber"];
            URLAdr?: components["schemas"]["Max2048Text"];
            EmailAdr?: components["schemas"]["Max256Text"];
            EmailPurp?: components["schemas"]["Max35Text"];
            JobTitl?: components["schemas"]["Max35Text"];
            Rspnsblty?: components["schemas"]["Max35Text"];
            Dept?: components["schemas"]["Max70Text"];
            Othr?: components["schemas"]["OtherContact1"];
            PrefrdMtd?: components["schemas"]["PreferredContactMethod2Code"];
        };
        /**
         * Contact4
         * @description Specifies the details of the contact person.
         *
         * @example {
         *       "NmPrfx": "Mr",
         *       "Nm": "John Doe",
         *       "PhneNb": "+123-123-321",
         *       "MobNb": "+123-123-321",
         *       "FaxNb": "+123-123-321",
         *       "EmailAdr": "example@example.com"
         *     }
         */
        Contact4: {
            NmPrfx?: components["schemas"]["NamePrefix2Code"];
            Nm?: components["schemas"]["Max140Text"];
            PhneNb?: components["schemas"]["PhoneNumber"];
            MobNb?: components["schemas"]["PhoneNumber"];
            FaxNb?: components["schemas"]["PhoneNumber"];
            EmailAdr?: components["schemas"]["Max2048Text"];
            EmailPurp?: components["schemas"]["Max35Text"];
            JobTitl?: components["schemas"]["Max35Text"];
            Rspnsblty?: components["schemas"]["Max35Text"];
            Dept?: components["schemas"]["Max70Text"];
            Othr?: components["schemas"]["OtherContact1"];
            PrefrdMtd?: components["schemas"]["PreferredContactMethod1Code"];
        };
        /**
         * CountryCode
         * @example US
         */
        CountryCode: string;
        /**
         * CreditTransferTransaction67
         * @description Provides further details specific to the individual transaction(s) included in the message.
         *
         * @example {
         *       "PmtId": {
         *         "InstrId": "INSTRID",
         *         "EndToEndId": "ENDTOENDID"
         *       },
         *       "PmtTpInf": {
         *         "LclInstrm": {
         *           "Cd": "CHQB",
         *           "Prtry": "PROPRIETARY"
         *         },
         *         "SeqTp": "SEQTP"
         *       },
         *       "IntrBkSttlmAmt": {
         *         "ActiveCurrencyAndAmount": 123.45,
         *         "Ccy": "USD"
         *       },
         *       "InstdAmt": {
         *         "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *         "Ccy": "USD"
         *       },
         *       "XchgRate": 123.45,
         *       "ChrgBr": "SHAR",
         *       "ChrgsInf": {
         *         "Amt": {
         *           "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *           "Ccy": "USD"
         *         },
         *         "Agt": {
         *           "BrnchId": {
         *             "Id": "BRANCHID"
         *           },
         *           "FinInstnId": {
         *             "BICFI": "BICFI"
         *           }
         *         },
         *         "Tp": {
         *           "Cd": "SHAR"
         *         }
         *       },
         *       "Dbtr": {
         *         "Nm": "NAME",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "BldgNb": "BLDGNB",
         *           "Ctry": "CTRY",
         *           "TwnNm": "TWNNM",
         *           "PstCd": "PSTCD",
         *           "StrtNm": "STRTNM"
         *         }
         *       },
         *       "DbtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "DbtrAgt": {
         *         "BrnchId": {
         *           "Id": "BRANCHID"
         *         },
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "CdtrAgt": {
         *         "BrnchId": {
         *           "Id": "BRANCHID"
         *         },
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "Cdtr": {
         *         "Nm": "NAME",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "BldgNb": "BLDGNB",
         *           "Ctry": "CTRY",
         *           "TwnNm": "TWNNM",
         *           "PstCd": "PSTCD",
         *           "StrtNm": "STRTNM"
         *         }
         *       },
         *       "CdtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "InstrForCdtrAgt": {
         *         "Cd": "CODE"
         *       },
         *       "InstrForNxtAgt": {
         *         "Cd": "CODE"
         *       },
         *       "Purp": {
         *         "Cd": "CASH"
         *       },
         *       "RgltryRptg": {
         *         "Dbtr": true,
         *         "Cdtr": true
         *       },
         *       "Tax": "Cdtr"
         *     }
         */
        CreditTransferTransaction67: {
            PmtId: components["schemas"]["PaymentIdentification13"];
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
            IntrBkSttlmAmt: components["schemas"]["ActiveCurrencyAndAmount"];
            InstdAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            XchgRate?: components["schemas"]["BaseOneRate"];
            ChrgBr: components["schemas"]["ChargeBearerType1Code"];
            ChrgsInf?: components["schemas"]["Charges16"];
            Dbtr: components["schemas"]["PartyIdentification272"];
            DbtrAcct?: components["schemas"]["CashAccount40"];
            DbtrAgt: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            CdtrAgt: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            Cdtr: components["schemas"]["PartyIdentification272"];
            CdtrAcct?: components["schemas"]["CashAccount40"];
            InstrForCdtrAgt?: components["schemas"]["InstructionForCreditorAgent3"];
            InstrForNxtAgt?: components["schemas"]["InstructionForNextAgent1"];
            Purp?: components["schemas"]["Purpose2Choice"];
            RgltryRptg?: components["schemas"]["RegulatoryReporting3"];
            Tax?: components["schemas"]["TaxData1"];
            VrfctnOfTerms?: components["schemas"]["CryptographicLockChoice"];
        };
        /**
         * CreditTransferTransaction68
         * @description Provides further details specific to the individual transaction(s) included in the message.
         *
         * @example {
         *       "PmtId": {
         *         "InstrId": "INSTRID",
         *         "EndToEndId": "ENDTOENDID"
         *       },
         *       "PmtTpInf": {
         *         "LclInstrm": {
         *           "Cd": "CHQB",
         *           "Prtry": "PROPRIETARY"
         *         }
         *       },
         *       "IntrBkSttlmAmt": {
         *         "Amount": 123.45,
         *         "Ccy": "EUR"
         *       },
         *       "Dbtr": {
         *         "Nm": "Debtor Name"
         *       },
         *       "DbtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "DbtrAgt": {
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "CdtrAgt": {
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "Cdtr": {
         *         "Nm": "Creditor Name"
         *       },
         *       "CdtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "InstrForCdtrAgt": {
         *         "Cd": "INSTRUCTION"
         *       },
         *       "Purp": {
         *         "Cd": "CHAR"
         *       },
         *       "VrfctnOfTerms": {
         *         "Cntt": "CONTENT",
         *         "CnttTp": "PROPRIETARY"
         *       }
         *     }
         */
        CreditTransferTransaction68: {
            PmtId: components["schemas"]["PaymentIdentification13"];
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
            IntrBkSttlmAmt: components["schemas"]["ActiveCurrencyAndAmount"];
            Dbtr: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            DbtrAcct?: components["schemas"]["CashAccount40"];
            DbtrAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            CdtrAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            Cdtr: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            CdtrAcct?: components["schemas"]["CashAccount40"];
            InstrForCdtrAgt?: components["schemas"]["InstructionForCreditorAgent3"];
            Purp?: components["schemas"]["Purpose2Choice"];
            VrfctnOfTerms?: components["schemas"]["CryptographicLockChoice"];
        };
        /**
         * CryptographicLockChoice
         * @description NOTE: Unsure on description.
         *
         * @example {
         *       "IlpV4PrepPacket": "1234567890ABCDEF"
         *     }
         */
        CryptographicLockChoice: {
            IlpV4PrepPacket?: components["schemas"]["hexBinary"];
            Sh256Sgntr?: components["schemas"]["Exact32HexBinaryText"];
        } & (unknown | unknown);
        /**
         * DateAndPlaceOfBirth1
         * @description Details about date and place of birth of a person.
         *
         * @example {
         *       "BirthDt": "1970-01-01",
         *       "PrvcOfBirth": "ON",
         *       "CityOfBirth": "Ottawa",
         *       "CtryOfBirth": "CA"
         *     }
         */
        DateAndPlaceOfBirth1: {
            BirthDt: components["schemas"]["ISODate"];
            PrvcOfBirth?: components["schemas"]["Max35Text"];
            CityOfBirth: components["schemas"]["Max35Text"];
            CtryOfBirth: components["schemas"]["CountryCode"];
        };
        /**
         * DatePeriod2
         * @description Range of time defined by a start date and an end date.
         *
         * @example {
         *       "FrDt": "2020-01-01",
         *       "ToDt": "2020-12-31"
         *     }
         */
        DatePeriod2: {
            FrDt: components["schemas"]["ISODate"];
            ToDt: components["schemas"]["ISODate"];
        };
        /**
         * ErrorCode
         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         * @example 5100
         */
        ErrorCode: string;
        /**
         * ErrorDescription
         * @description Error description string.
         */
        ErrorDescription: string;
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        ErrorInformation: {
            errorCode: components["schemas"]["ErrorCode"];
            errorDescription: components["schemas"]["ErrorDescription"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ErrorInformationResponse
         * @description Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
         *
         */
        ErrorInformationResponse: {
            errorInformation?: components["schemas"]["ErrorInformation"];
        };
        /**
         * Exact32HexBinaryText
         * @description Specifies a hexadecimal string with a length of 32 characters.
         *
         * @example 1234567890ABCDEF1234567890ABCDEF
         */
        Exact32HexBinaryText: string;
        /**
         * Exact4AlphaNumericText
         * @description Specifies an alphanumeric string with a length of 4 characters.
         *
         * @example 1234
         */
        Exact4AlphaNumericText: string;
        /**
         * Execute_FIToFICustomerCreditTransferV13
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123456789,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": 91
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 123456789,
         *           "EndToEndId": 123456789
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM",
         *           "CtgyPurp": {
         *             "Cd": "SUPP"
         *           }
         *         },
         *         "InstrForCdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "AAAAAAAA"
         *           }
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "AAAAAAAA"
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "Creditor Name",
         *           "PstlAdr": {
         *             "AdrLine": [
         *               "Creditor Address Line 1",
         *               "Creditor Address Line 2",
         *               "Creditor Address Line 3",
         *               "Creditor Address Line 4",
         *               "Creditor Address Line 5"
         *             ]
         *           },
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": 91
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "DE87123456781234567890"
         *           }
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Remittance Information"
         *         }
         *       }
         *     }
         */
        Execute_FIToFICustomerCreditTransferV13: {
            GrpHdr: components["schemas"]["GroupHeader129"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction67"];
        };
        /**
         * Extension
         * @description Data model for the complex type Extension.
         */
        Extension: {
            key: components["schemas"]["ExtensionKey"];
            value: components["schemas"]["ExtensionValue"];
        };
        /**
         * ExtensionKey
         * @description Extension key.
         */
        ExtensionKey: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         *
         */
        ExtensionList: {
            /** @description Number of Extension elements. */
            extension: components["schemas"]["Extension"][];
        };
        /**
         * ExtensionValue
         * @description Extension value.
         */
        ExtensionValue: string;
        /**
         * ExternalAccountIdentification1Code
         * @description Specifies the external account identification scheme name code in the format of character string with a maximum length of 4 characters.
         *
         * @example 1234
         */
        ExternalAccountIdentification1Code: string;
        /**
         * ExternalCashAccountType1Code
         * @description Specifies the nature, or use, of the cash account in the format of character string with a maximum length of 4 characters.
         *
         * @example 1234
         */
        ExternalCashAccountType1Code: string;
        /**
         * @description Specifies the category purpose, as published in an external category purpose code list.
         *     External code sets can be downloaded from www.iso20022.org.
         *
         * @example 1234
         */
        ExternalCategoryPurpose1Code: string;
        /**
         * ExternalChargeType1Code
         * @example 1234
         */
        ExternalChargeType1Code: string;
        /**
         * ExternalClearingSystemIdentification1Code
         * @example 12345
         */
        ExternalClearingSystemIdentification1Code: string;
        /**
         * ExternalCreditorAgentInstruction1Code
         * @example 1234
         */
        ExternalCreditorAgentInstruction1Code: string;
        /**
         * ExternalFinancialInstitutionIdentification1Code
         * @example 1234
         */
        ExternalFinancialInstitutionIdentification1Code: string;
        /**
         * ExternalLocalInstrument1Code
         * @example 12345
         */
        ExternalLocalInstrument1Code: string;
        /**
         * ExternalOrganisationIdentification1Code
         * @example 1234
         */
        ExternalOrganisationIdentification1Code: string;
        /**
         * ExternalPaymentTransactionStatus1Code
         * @example 1234
         */
        ExternalPaymentTransactionStatus1Code: string;
        /**
         * ExternalPersonIdentification1Code
         * @example 1234
         */
        ExternalPersonIdentification1Code: string;
        /**
         * ExternalProxyAccountType1Code
         * @example 1234
         */
        ExternalProxyAccountType1Code: string;
        /**
         * ExternalPurpose1Code
         * @example 1234
         */
        ExternalPurpose1Code: string;
        /**
         * ExternalServiceLevel1Code
         * @example 1234
         */
        ExternalServiceLevel1Code: string;
        /**
         * ExternalStatusReason1Code
         * @example 1234
         */
        ExternalStatusReason1Code: string;
        /**
         * ExternalVerificationReason1Code
         * @example 1234
         */
        ExternalVerificationReason1Code: string;
        /**
         * FinancialIdentificationSchemeName1Choice
         * @example {
         *       "Cd": "BIC"
         *     }
         */
        FinancialIdentificationSchemeName1Choice: {
            Cd?: components["schemas"]["ExternalFinancialInstitutionIdentification1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * FinancialInstitutionIdentification18
         * @example {
         *       "BICFI": "BUKBGB22",
         *       "Nm": "Barclays Bank Plc",
         *       "PstlAdr": {
         *         "Ctry": "GB",
         *         "AdrLine": [
         *           "1 Churchill Place",
         *           "London",
         *           "UK"
         *         ]
         *       }
         *     }
         */
        FinancialInstitutionIdentification18: {
            BICFI?: components["schemas"]["BICFIDec2014Identifier"];
            ClrSysMmbId?: components["schemas"]["ClearingSystemMemberIdentification2"];
            LEI?: components["schemas"]["LEIIdentifier"];
            Nm?: components["schemas"]["Max140Text"];
            PstlAdr?: components["schemas"]["PostalAddress24"];
            Othr?: components["schemas"]["GenericFinancialIdentification1"];
        };
        /**
         * FinancialInstitutionIdentification23
         * @example {
         *       "BICFI": "BUKBGB22",
         *       "Nm": "Barclays Bank Plc",
         *       "PstlAdr": {
         *         "Ctry": "GB",
         *         "AdrLine": [
         *           "1 Churchill Place",
         *           "London",
         *           "UK"
         *         ]
         *       }
         *     }
         */
        FinancialInstitutionIdentification23: {
            BICFI?: components["schemas"]["BICFIDec2014Identifier"];
            ClrSysMmbId?: components["schemas"]["ClearingSystemMemberIdentification2"];
            LEI?: components["schemas"]["LEIIdentifier"];
            Nm?: components["schemas"]["Max140Text"];
            PstlAdr?: components["schemas"]["PostalAddress27"];
            Othr?: components["schemas"]["GenericFinancialIdentification1"];
        };
        /**
         * FxRequest_FICreditTransferProposal
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123456789,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BIC"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFID0"
         *           }
         *         },
         *         "Dbtr": {
         *           "Nm": "Debtor Name",
         *           "PstlAdr": {
         *             "AdrLine": [
         *               "Debtor Address Line 1",
         *               "Debtor Address Line 2"
         *             ]
         *           },
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BIC"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "DbtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           }
         *         },
         *         "DbtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFID0"
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "Creditor Name",
         *           "PstlAdr": {
         *             "AdrLine": [
         *               "Creditor Address Line 1",
         *               "Creditor Address Line 2"
         *             ]
         *           },
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BIC"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           }
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFID0"
         *           }
         *         },
         *         "CdtTrfTxInf": [
         *           {
         *             "PmtId": {
         *               "InstrId": 123456789,
         *               "EndToEndId": 123456789
         *             },
         *             "Amt": {
         *               "InstdAmt": {
         *                 "Ccy": "EUR",
         *                 "Amt": 100
         *               }
         *             },
         *             "CdtrAgt": {
         *               "FinInstnId": {
         *                 "BICFI": "BICFID0"
         *               }
         *             },
         *             "Cdtr": {
         *               "Nm": "Creditor Name",
         *               "PstlAdr": {
         *                 "AdrLine": [
         *                   "Creditor Address Line 1",
         *                   "Creditor Address Line 2"
         *                 ]
         *               },
         *               "Id": {
         *                 "OrgId": {
         *                   "Othr": [
         *                     {
         *                       "Id": 123456789,
         *                       "SchmeNm": {
         *                         "Cd": "BIC"
         *                       }
         *                     }
         *                   ]
         *                 }
         *               }
         *             }
         *           }
         *         ]
         *       }
         *     }
         */
        FxRequest_FICreditTransferProposal: {
            GrpHdr: components["schemas"]["GroupHeader113"];
        };
        /**
         * FxResponse_FICreditTransferConfirmation
         * @example {
         *       "GrpHdr": {
         *         "MsgId": "20191122-123456",
         *         "CreDtTm": "2019-11-22T12:34:56",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name"
         *         },
         *         "MsgRcpt": {
         *           "Nm": "Message Recipient Name"
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": "20191122-123456",
         *           "EndToEndId": "20191122-123456"
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM",
         *           "CtgyPurp": "SUPP"
         *         },
         *         "IntrBkSttlmAmt": {
         *           "Amt": 100,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "Cdtr": {
         *           "Nm": "Creditor Name"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BNBABEBB"
         *           }
         *         },
         *         "CdtrAgtAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "Dbtr": {
         *           "Nm": "Debtor Name"
         *         },
         *         "DbtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "DbtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BNBABEBB"
         *           }
         *         },
         *         "DbtrAgtAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Remittance Information"
         *         },
         *         "RgltryRptg": {
         *           "Dbtr": {
         *             "Nm": "Debtor Name"
         *           },
         *           "DbtrAcct": {
         *             "Id": {
         *               "IBAN": "BE71096123456769"
         *             },
         *             "Tp": {
         *               "Cd": "CACC"
         *             },
         *             "Ccy": "EUR",
         *             "Nm": "My account"
         *           }
         *         }
         *       }
         *     }
         */
        FxResponse_FICreditTransferConfirmation: {
            GrpHdr: components["schemas"]["GroupHeader113"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction68"];
        };
        /**
         * Fxecute_FinancialInstitutionCreditTransferV12
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 20191113001,
         *         "CreDtTm": "2019-11-13T10:00:00",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 1000,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": {
         *                 "Id": 123456789,
         *                 "SchmeNm": {
         *                   "Cd": "BBA"
         *                 }
         *               }
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         },
         *         "DbtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "AAAAAAAA"
         *           }
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "CCCCCCCC"
         *           }
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 20191113001,
         *           "EndToEndId": 20191113001
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM",
         *           "CtgyPurp": {
         *             "Cd": "SUPP"
         *           }
         *         },
         *         "InstrForCdtrAgt": {
         *           "Cd": "/ACC/123456789"
         *         },
         *         "IntrBkSttlmAmt": {
         *           "Amt": 1000,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "CCCCCCCC"
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "Creditor Name"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           }
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Payment for invoice 12345"
         *         }
         *       }
         *     }
         */
        Fxecute_FinancialInstitutionCreditTransferV12: {
            GrpHdr: components["schemas"]["GroupHeader129"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction68"];
        };
        /**
         * GenericAccountIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "IBAN"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericAccountIdentification1: {
            Id: components["schemas"]["Max34Text"];
            SchmeNm?: components["schemas"]["AccountSchemeName1Choice"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericFinancialIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "IBAN"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericFinancialIdentification1: {
            Id: components["schemas"]["Max35Text"];
            SchmeNm?: components["schemas"]["FinancialIdentificationSchemeName1Choice"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericIdentification3
         * @example {
         *       "Id": 123,
         *       "Issr": "BIC"
         *     }
         */
        GenericIdentification3: {
            Id: components["schemas"]["Max35Text"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericIdentification30
         * @example {
         *       "Id": 1234,
         *       "Issr": "BIC",
         *       "SchmeNm": "BICFI"
         *     }
         */
        GenericIdentification30: {
            Id: components["schemas"]["Exact4AlphaNumericText"];
            Issr: components["schemas"]["Max35Text"];
            SchmeNm?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericOrganisationIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "BIC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericOrganisationIdentification1: {
            Id: components["schemas"]["Max35Text"];
            SchmeNm?: components["schemas"]["OrganisationIdentificationSchemeName1Choice"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericOrganisationIdentification3
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "BIC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericOrganisationIdentification3: {
            Id: components["schemas"]["Max256Text"];
            SchmeNm?: components["schemas"]["OrganisationIdentificationSchemeName1Choice"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericPersonIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "DRLC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericPersonIdentification1: {
            Id: components["schemas"]["Max35Text"];
            SchmeNm?: components["schemas"]["PersonIdentificationSchemeName1Choice"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericPersonIdentification2
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "DRLC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericPersonIdentification2: {
            Id: components["schemas"]["Max256Text"];
            SchmeNm?: components["schemas"]["PersonIdentificationSchemeName1Choice"];
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GetPartiesError_IdentificationVerificationReportV03
         * @example {
         *       "Assgnmt": {
         *         "Id": 123,
         *         "CreDtTm": "2013-03-07T16:30:00",
         *         "Assgnr": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "Assgne": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       },
         *       "Rpt": {
         *         "Id": 123,
         *         "CreDtTm": "2013-03-07T16:30:00",
         *         "RptgPty": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "RptdPty": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "RptdDoc": {
         *           "Nb": 123,
         *           "RltdDt": "2013-03-07",
         *           "RltdDtTp": {
         *             "Cd": 123
         *           }
         *         },
         *         "Rsn": {
         *           "Cd": 123,
         *           "Prtry": 123
         *         }
         *       },
         *       "SplmtryData": {
         *         "PlcAndNm": 123,
         *         "Envlp": 123,
         *         "RltdDt": "2013-03-07",
         *         "RltdDtTp": {
         *           "Cd": 123
         *         }
         *       }
         *     }
         */
        GetPartiesError_IdentificationVerificationReportV03: {
            Assgnmt: components["schemas"]["IdentificationAssignment3"];
            Rpt: components["schemas"]["VerificationReport4"];
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * GetParties_IdentificationVerificationReportV03
         * @example {
         *       "Assgnmt": {
         *         "Id": 123,
         *         "CreDtTm": "2013-03-07T16:30:00",
         *         "Assgnr": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "Assgne": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       },
         *       "Rpt": {
         *         "Id": 123,
         *         "CreDtTm": "2013-03-07T16:30:00",
         *         "RptgPty": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "RptdPty": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "RptdDoc": {
         *           "Nb": 123,
         *           "RltdDt": "2013-03-07",
         *           "RltdDtTp": {
         *             "Cd": 123
         *           }
         *         },
         *         "Rsn": {
         *           "Cd": 123,
         *           "Prtry": 123
         *         }
         *       },
         *       "SplmtryData": {
         *         "PlcAndNm": 123,
         *         "Envlp": 123,
         *         "RltdDt": "2013-03-07",
         *         "RltdDtTp": {
         *           "Cd": 123
         *         }
         *       }
         *     }
         */
        GetParties_IdentificationVerificationReportV03: {
            Assgnmt: components["schemas"]["IdentificationAssignment3"];
            Rpt: components["schemas"]["VerificationReport4"];
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * GroupHeader113
         * @description Set of characteristics shared by all individual transactions included in the message.
         *
         * @example {
         *       "MsgId": 12345,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "NbOfTxs": 1,
         *       "TtlIntrBkSttlmAmt": {
         *         "Ccy": "EUR",
         *         "Value": 100
         *       },
         *       "SttlmInf": {
         *         "SttlmMtd": "INDA",
         *         "SttlmAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Ccy": "EUR"
         *         },
         *         "SttlmAcctOwnr": {
         *           "Nm": "Name"
         *         },
         *         "SttlmAcctSvcr": {
         *           "Nm": "Name"
         *         },
         *         "SttlmAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BIC"
         *           }
         *         }
         *       },
         *       "PmtTpInf": {
         *         "InstrPrty": "NORM",
         *         "CtgyPurp": "CASH"
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 12345,
         *           "EndToEndId": 12345
         *         },
         *         "Amt": {
         *           "InstdAmt": {
         *             "Ccy": "EUR",
         *             "Value": 100
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "Name"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Ccy": "EUR"
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BIC"
         *           }
         *         },
         *         "CdtrAgtAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Ccy": "EUR"
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Test"
         *         }
         *       }
         *     }
         */
        GroupHeader113: {
            MsgId: components["schemas"]["Max35Text"];
            CreDtTm: components["schemas"]["ISODateTime"];
            NbOfTxs: components["schemas"]["Max15NumericText"];
            TtlIntrBkSttlmAmt?: components["schemas"]["ActiveCurrencyAndAmount"];
            SttlmInf: components["schemas"]["SettlementInstruction15"];
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction68"];
        };
        /**
         * GroupHeader120
         * @description Set of characteristics shared by all individual transactions included in the message.
         *
         * @example {
         *       "MsgId": 12345,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "TxInfAndSts": {
         *         "StsId": 12345,
         *         "OrgnlInstrId": 12345,
         *         "OrgnlEndToEndId": 12345,
         *         "OrgnlTxId": 12345,
         *         "OrgnlUETR": "123e4567-e89b-12d3-a456-426614174000",
         *         "TxSts": "RJCT",
         *         "StsRsnInf": {
         *           "Rsn": "RSN",
         *           "AddtlInf": "ADDITIONAL"
         *         },
         *         "AccptncDtTm": "2020-01-01T00:00:00Z",
         *         "AcctSvcrRef": "ACCTSVCRREF",
         *         "ClrSysRef": "CLRSYSREF",
         *         "ExctnConf": "1234567890ABCDEF",
         *         "SplmtryData": {
         *           "PlcAndNm": "PLACE",
         *           "Envlp": "ENVELOPE"
         *         }
         *       }
         *     }
         */
        GroupHeader120: {
            MsgId: components["schemas"]["Max35Text"];
            CreDtTm: components["schemas"]["ISODateTime"];
            TxInfAndSts?: components["schemas"]["PaymentTransaction163"];
        };
        /**
         * GroupHeader129
         * @description Set of characteristics shared by all individual transactions included in the message.
         *
         * @example {
         *       "MsgId": 12345,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "PmtInstrXpryDtTm": "2020-01-01T00:00:00Z",
         *       "NbOfTxs": 1,
         *       "SttlmInf": {
         *         "SttlmMtd": "INDA",
         *         "SttlmAcct": {
         *           "Id": {
         *             "IBAN": 123
         *           }
         *         },
         *         "SttlmAcctOwnr": {
         *           "Nm": "John Doe"
         *         },
         *         "SttlmAcctSvcr": {
         *           "BICFI": 123
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 123,
         *           "EndToEndId": 123
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM"
         *         },
         *         "InstdAmt": {
         *           "Amt": 123,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": 123
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "John Doe"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": 123
         *           }
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Test"
         *         }
         *       }
         *     }
         */
        GroupHeader129: {
            MsgId: components["schemas"]["Max35Text"];
            CreDtTm: components["schemas"]["ISODateTime"];
            PmtInstrXpryDtTm?: components["schemas"]["ISODateTime"];
            NbOfTxs: components["schemas"]["Max15NumericText"];
            SttlmInf: components["schemas"]["SettlementInstruction15"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction67"];
        };
        /**
         * IBAN2007Identifier
         * @description The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution as described in the 2007 edition of the ISO 13616 standard "Banking and related financial services -
         *     International Bank Account Number (IBAN)" and replaced by the more recent edition of the standard.
         *
         * @example FR1420041010050500013M02606
         */
        IBAN2007Identifier: string;
        /**
         * ISODate
         * Format: date
         * @description A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
         *
         * @example 2013-03-07
         */
        ISODate: string;
        /**
         * ISODateTime
         * Format: datetime
         * @description A particular point in the progression of time defined by a mandatory
         *     date and a mandatory time component, expressed in either UTC time
         *     format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format
         *     (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format
         *     (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in
         *     "XML Schema Part 2: Datatypes Second Edition -
         *     W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
         *
         *     Note on the time format:
         *     1) beginning / end of calendar day
         *     00:00:00 = the beginning of a calendar day
         *     24:00:00 = the end of a calendar day
         *
         *     2) fractions of second in time format
         *     Decimal fractions of seconds may be included. In this case, the
         *     involved parties shall agree on the maximum number of digits that are allowed.
         *
         * @example 2013-03-07T14:44:30.000Z
         */
        ISODateTime: string;
        /**
         * ISOYear
         * @description Year represented by YYYY (ISO 8601).
         *
         * @example 2019
         */
        ISOYear: string;
        /**
         * IdentificationAssignment3
         * @example {
         *       "MsgId": 123,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "Assgnr": {
         *         "OrgId": {
         *           "Othr": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "BIC"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       },
         *       "Assgne": {
         *         "OrgId": {
         *           "Othr": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "BIC"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       }
         *     }
         */
        IdentificationAssignment3: {
            MsgId: components["schemas"]["Max35Text"];
            CreDtTm: components["schemas"]["ISODateTime"];
            Assgnr: components["schemas"]["Party40Choice"];
            Assgne: components["schemas"]["Party40Choice"];
        };
        /**
         * IdentificationInformation4
         * @example {
         *       "Pty": {
         *         "Id": {
         *           "OrgId": {
         *             "AnyBIC": {
         *               "BICFI": "BICFI"
         *             }
         *           }
         *         },
         *         "CtryOfRes": "FI"
         *       },
         *       "Acct": {
         *         "Id": {
         *           "IBAN": "FI2112345600000785"
         *         }
         *       },
         *       "Agt": {
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       }
         *     }
         */
        IdentificationInformation4: {
            Pty?: components["schemas"]["PartyIdentification135"];
            Acct?: components["schemas"]["CashAccount40"];
            Agt?: components["schemas"]["BranchAndFinancialInstitutionIdentification6"];
        };
        /**
         * IdentificationVerificationIndicator
         * @example true
         */
        IdentificationVerificationIndicator: boolean;
        /**
         * Instruction4Code
         * @description Specifies further instructions concerning the processing of a payment instruction, provided by the sending clearing agent to the next agent(s).
         *     PHOA PhoneNextAgent Please advise/contact next agent by phone.
         *     TELA TelecomNextAgent Please advise/contact next agent by the most efficient means of telecommunication.
         *
         * @example PHOA
         * @enum {string}
         */
        Instruction4Code: "PHOA" | "TELA";
        /**
         * InstructionForCreditorAgent3
         * @description Further information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor agent.
         *
         * @example {
         *       "Cd": "PHOA",
         *       "InstrInf": "Please advise/contact next agent by phone."
         *     }
         */
        InstructionForCreditorAgent3: {
            Cd?: components["schemas"]["ExternalCreditorAgentInstruction1Code"];
            InstrInf?: components["schemas"]["Max140Text"];
        };
        /**
         * InstructionForNextAgent1
         * @description Further information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor agent.
         *
         * @example {
         *       "Cd": "PHOA",
         *       "InstrInf": "Please advise/contact next agent by phone"
         *     }
         */
        InstructionForNextAgent1: {
            Cd?: components["schemas"]["Instruction4Code"];
            InstrInf?: components["schemas"]["Max140Text"];
        };
        /**
         * LEIIdentifier
         * @description Legal Entity Identifier is a code allocated to a party as described in ISO 17442 "Financial Services - Legal Entity Identifier (LEI)". ^([0-9A-Z]{18,18}[0-9]{2,2})$
         *
         * @example 529900T8BM49AURSDO55
         */
        LEIIdentifier: string;
        /**
         * LocalInstrument2Choice
         * @example {
         *       "Cd": "CH03"
         *     }
         */
        LocalInstrument2Choice: {
            Cd?: components["schemas"]["ExternalLocalInstrument1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * Max105Text
         * @description Specifies a character string with a maximum length of 105 characters.
         *
         * @example 12345
         */
        Max105Text: string;
        /**
         * Max10Text
         * @description Specifies a character string with a maximum length of 10 characters.
         *
         * @example 1234567890
         */
        Max10Text: string;
        /**
         * Max128Text
         * @description Specifies a character string with a maximum length of 128 characters.
         *
         * @example 12345
         */
        Max128Text: string;
        /**
         * Max140Text
         * @description Specifies a character string with a maximum length of 140 characters.
         *
         * @example 12345
         */
        Max140Text: string;
        /**
         * Max15NumericText
         * @description Specifies a numeric string with a maximum length of 15 digits.
         *
         * @example 123456789012345
         */
        Max15NumericText: string;
        /**
         * Max16Text
         * @description Specifies a character string with a maximum length of 16 characters.
         *
         * @example 1234567890123456
         */
        Max16Text: string;
        /**
         * Max2048Text
         * @description Specifies a character string with a maximum length of 2048 characters.
         *
         * @example 2048
         */
        Max2048Text: string;
        /**
         * Max256Text
         * @description Specifies a character string with a maximum length of 256 characters.
         *
         * @example 256
         */
        Max256Text: string;
        /**
         * Max34Text
         * @description Specifies a character string with a maximum length of 34 characters.
         *
         * @example 1.2345678901234568e+33
         */
        Max34Text: string;
        /**
         * Max350Text
         * @description Specifies a character string with a maximum length of 350 characters.
         *
         * @example 350
         */
        Max350Text: string;
        /**
         * Max35Text
         * @description Specifies a character string with a maximum length of 35 characters.
         *
         * @example 1.234567890123457e+34
         */
        Max35Text: string;
        /**
         * Max4Text
         * @description Specifies a character string with a maximum length of 4 characters.
         *
         * @example 1234
         */
        Max4Text: string;
        /**
         * Max70Text
         * @description Specifies a character string with a maximum length of 70 characters.
         *
         * @example 1.2345678901234567e+99
         */
        Max70Text: string;
        /**
         * @description Specifies the terms used to formally address a person.
         *
         * @example DOCT
         * @enum {string}
         */
        NamePrefix2Code: "DOCT" | "MADM" | "MISS" | "MIST" | "MIKS";
        /**
         * Number
         * @example 256
         */
        Number: string;
        /**
         * OrganisationIdentification29
         * @description Unique and unambiguous way to identify an organisation.
         *
         * @example {
         *       "AnyBIC": "BICFI",
         *       "LEI": "529900T8BM49AURSDO55",
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "BIC"
         *         },
         *         "Issr": "BIC"
         *       }
         *     }
         */
        OrganisationIdentification29: {
            AnyBIC?: components["schemas"]["AnyBICDec2014Identifier"];
            LEI?: components["schemas"]["LEIIdentifier"];
            Othr?: components["schemas"]["GenericOrganisationIdentification1"];
        };
        /**
         * OrganisationIdentification39
         * @description Unique and unambiguous way to identify an organisation.
         *
         * @example {
         *       "AnyBIC": "BICFI",
         *       "LEI": "529900T8BM49AURSDO55",
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "BIC"
         *         },
         *         "Issr": "BIC"
         *       }
         *     }
         */
        OrganisationIdentification39: {
            AnyBIC?: components["schemas"]["AnyBICDec2014Identifier"];
            LEI?: components["schemas"]["LEIIdentifier"];
            Othr?: components["schemas"]["GenericOrganisationIdentification3"];
        };
        /**
         * OrganisationIdentificationSchemeName1Choice
         * @description Choice of format for the organisation identification.
         *
         * @example {
         *       "Cd": "BIC"
         *     }
         */
        OrganisationIdentificationSchemeName1Choice: {
            Cd?: components["schemas"]["ExternalOrganisationIdentification1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * OtherContact1
         * @description Communication device number or electronic address used for communication.
         *
         * @example {
         *       "ChanlTp": "PHON",
         *       "Id": 1234567890
         *     }
         */
        OtherContact1: {
            ChanlTp: components["schemas"]["Max4Text"];
            Id?: components["schemas"]["Max128Text"];
        };
        /**
         * PacsError_FIToFIPaymentStatusReportV15
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 12345,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "SttlmInf": {
         *           "SttlmMtd": "INDA",
         *           "SttlmDt": "2020-01-01"
         *         },
         *         "InstgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFI"
         *           }
         *         },
         *         "InstdAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFI"
         *           }
         *         }
         *       },
         *       "TxInfAndSts": {
         *         "OrgnlInstrId": 12345,
         *         "OrgnlEndToEndId": 12345,
         *         "TxSts": "RJCT",
         *         "StsRsnInf": {
         *           "Rsn": "RSN",
         *           "AddtlInf": "ADDITIONAL"
         *         }
         *       },
         *       "SplmtryData": {
         *         "PlcAndNm": "PLACE",
         *         "Envlp": "ENVELOPE"
         *       }
         *     }
         */
        PacsError_FIToFIPaymentStatusReportV15: {
            GrpHdr: components["schemas"]["GroupHeader120"];
            TxInfAndSts?: components["schemas"]["PaymentTransaction163"];
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * PacsStatus_FIToFIPaymentStatusReportV15
         * @description Unsure on description.
         *
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "SttlmInf": {
         *           "SttlmMtd": "INDA",
         *           "SttlmDt": "2020-01-01",
         *           "SttlmTmIndctn": "RTGS",
         *           "SttlmTmReq": "2020-01-01T00:00:00Z",
         *           "SttlmAcct": {
         *             "Id": {
         *               "Othr": {
         *                 "Id": 123,
         *                 "SchmeNm": {
         *                   "Cd": "IBAN"
         *                 },
         *                 "Issr": "BIC"
         *               }
         *             }
         *           },
         *           "ClrSys": {
         *             "Prtry": 123
         *           },
         *           "InstgAgt": {
         *             "FinInstnId": {
         *               "BICFI": 123
         *             }
         *           },
         *           "InstdAgt": {
         *             "FinInstnId": {
         *               "BICFI": 123
         *             }
         *           }
         *         },
         *         "InstgAgt": {
         *           "FinInstnId": {
         *             "BICFI": 123
         *           }
         *         },
         *         "InstdAgt": {
         *           "FinInstnId": {
         *             "BICFI": 123
         *           }
         *         },
         *         "IntrBkSttlmAmt": {
         *           "Amt": 123,
         *           "Ccy": "EUR"
         *         },
         *         "IntrBkSttlmDt": "2020-01-01",
         *         "TxSts": "ACCP",
         *         "StsRsnInf": {
         *           "Orgtr": {
         *             "Id": {
         *               "Othr": {
         *                 "Id": 123,
         *                 "SchmeNm": {
         *                   "Cd": "IBAN"
         *                 },
         *                 "Issr": "BIC"
         *               }
         *             }
         *           },
         *           "Rsn": {
         *             "Cd": 123,
         *             "Prtry": 123
         *           }
         *         },
         *         "TxInfAndSts": {
         *           "OrgnlInstrId": 123,
         *           "OrgnlEndToEndId": 123,
         *           "TxSts": "ACCP",
         *           "StsRsnInf": {
         *             "Orgtr": {
         *               "Id": {
         *                 "Othr": {
         *                   "Id": 123,
         *                   "SchmeNm": {
         *                     "Cd": "IBAN"
         *                   },
         *                   "Issr": "BIC"
         *                 }
         *               }
         *             },
         *             "Rsn": {
         *               "Cd": 123,
         *               "Prtry": 123
         *             }
         *           },
         *           "ChrgsInf": {
         *             "Amt": 123,
         *             "Ccy": "EUR"
         *           },
         *           "IntrBkSttlmAmt": {
         *             "Amt": 123,
         *             "Ccy": "EUR"
         *           },
         *           "IntrBkSttlmDt": "2020-01-01",
         *           "SttlmTmIndctn": "RTGS"
         *         }
         *       }
         *     }
         */
        PacsStatus_FIToFIPaymentStatusReportV15: {
            GrpHdr: components["schemas"]["GroupHeader120"];
        };
        /**
         * Party38Choice
         * @description Nature or use of the account.
         *
         * @example {
         *       "OrgId": {
         *         "AnyBIC": "BIC"
         *       },
         *       "PrvtId": {
         *         "DtAndPlcOfBirth": {
         *           "Dt": "2018-01-01",
         *           "CityOfBirth": "City"
         *         }
         *       }
         *     }
         */
        Party38Choice: {
            OrgId?: components["schemas"]["OrganisationIdentification29"];
            PrvtId?: components["schemas"]["PersonIdentification13"];
        } & (unknown | unknown);
        /**
         * Party40Choice
         * @description Nature or use of the account.
         *
         * @example {
         *       "Pty": {
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "Ctry": "US",
         *           "AdrLine": [
         *             "Line1",
         *             "Line2"
         *           ]
         *         },
         *         "Id": {
         *           "OrgId": {
         *             "AnyBIC": "BIC"
         *           }
         *         }
         *       },
         *       "Agt": {
         *         "FinInstnId": {
         *           "BICFI": "BUKBGB22"
         *         },
         *         "BrnchId": {
         *           "Id": 12345,
         *           "Nm": "Oxford Street Branch",
         *           "PstlAdr": {
         *             "Ctry": "GB",
         *             "AdrLine": [
         *               "1 Oxford Street",
         *               "London",
         *               "UK"
         *             ]
         *           }
         *         }
         *       }
         *     }
         */
        Party40Choice: {
            Pty?: components["schemas"]["PartyIdentification135"];
            Agt?: components["schemas"]["BranchAndFinancialInstitutionIdentification6"];
        } & (unknown | unknown);
        /**
         * Party52Choice
         * @description Nature or use of the account.
         *
         * @example {
         *       "OrgId": {
         *         "AnyBIC": "BIC"
         *       },
         *       "PrvtId": {
         *         "DtAndPlcOfBirth": {
         *           "Dt": "2018-01-01",
         *           "CityOfBirth": "City"
         *         }
         *       }
         *     }
         */
        Party52Choice: {
            OrgId?: components["schemas"]["OrganisationIdentification39"];
            PrvtId?: components["schemas"]["PersonIdentification18"];
        } & (unknown | unknown);
        /**
         * PartyIdentification135
         * @description Specifies the identification of a person or an organisation.
         *
         * @example {
         *       "Nm": "John Doe",
         *       "PstlAdr": {
         *         "Ctry": "BE",
         *         "AdrLine": [
         *           "Rue du Marché 45",
         *           "Brussels",
         *           "BE"
         *         ]
         *       },
         *       "Id": {
         *         "OrgId": {
         *           "AnyBIC": "CCCCUS33"
         *         }
         *       },
         *       "CtryOfRes": "BE",
         *       "CtctDtls": {
         *         "NmPrfx": "Mr",
         *         "Nm": "John Doe",
         *         "PhneNb": "+123-123-321",
         *         "MobNb": "+123-123-321",
         *         "FaxNb": "+123-123-321",
         *         "EmailAdr": null
         *       }
         *     }
         */
        PartyIdentification135: {
            Nm?: components["schemas"]["Max140Text"];
            PstlAdr?: components["schemas"]["PostalAddress24"];
            Id?: components["schemas"]["Party38Choice"];
            CtryOfRes?: components["schemas"]["CountryCode"];
            CtctDtls?: components["schemas"]["Contact4"];
        };
        /**
         * PartyIdentification272
         * @description Specifies the identification of a person or an organisation.
         *
         * @example {
         *       "Nm": "John Doe",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Dept",
         *         "SubDept": "SubDept",
         *         "StrtNm": "StrtNm",
         *         "BldgNb": "BldgNb",
         *         "PstCd": "PstCd",
         *         "TwnNm": "TwnNm",
         *         "CtrySubDvsn": "CtrySubDvsn",
         *         "Ctry": "Ctry"
         *       },
         *       "Id": {
         *         "OrgId": {
         *           "AnyBIC": "BIC"
         *         },
         *         "PrvtId": {
         *           "DtAndPlcOfBirth": {
         *             "Dt": "2018-01-01",
         *             "CityOfBirth": "City"
         *           }
         *         }
         *       },
         *       "CtryOfRes": "BE",
         *       "CtctDtls": {
         *         "NmPrfx": "Mr",
         *         "Nm": "John Doe",
         *         "PhneNb": "+123-123-321",
         *         "MobNb": "+123-123-321",
         *         "FaxNb": "+123-123-321",
         *         "EmailAdr": null
         *       }
         *     }
         */
        PartyIdentification272: {
            Nm?: components["schemas"]["Max140Text"];
            PstlAdr?: components["schemas"]["PostalAddress27"];
            Id?: components["schemas"]["Party52Choice"];
            CtryOfRes?: components["schemas"]["CountryCode"];
            CtctDtls?: components["schemas"]["Contact13"];
        };
        /**
         * PaymentIdentification13
         * @description Provides further means of referencing a payment transaction.
         *
         * @example {
         *       "InstrId": "INSTRUCTIONID",
         *       "EndToEndId": "ENDTOENDID",
         *       "TxId": "TRANSACTIONID",
         *       "UETR": "123e4567-e89b-12d3-a456-426614174000",
         *       "ClrSysRef": "CLRSYSREF"
         *     }
         */
        PaymentIdentification13: {
            InstrId?: components["schemas"]["Max35Text"];
            EndToEndId: components["schemas"]["Max35Text"];
            TxId?: components["schemas"]["Max35Text"];
            UETR?: components["schemas"]["UUIDv4Identifier"];
            ClrSysRef?: components["schemas"]["Max35Text"];
        };
        /**
         * PaymentTransaction163
         * @description Provides further details on the original transactions, to which the status report message refers.
         *
         * @example {
         *       "StsId": 12345,
         *       "OrgnlInstrId": 12345,
         *       "OrgnlEndToEndId": 12345,
         *       "OrgnlTxId": 12345,
         *       "OrgnlUETR": "123e4567-e89b-12d3-a456-426614174000",
         *       "TxSts": "RJCT",
         *       "StsRsnInf": {
         *         "Rsn": "RSN",
         *         "AddtlInf": "ADDITIONAL"
         *       },
         *       "AccptncDtTm": "2020-01-01T00:00:00Z",
         *       "AcctSvcrRef": "ACCTSVCRREF",
         *       "ClrSysRef": "CLRSYSREF",
         *       "ExctnConf": "1234567890ABCDEF",
         *       "SplmtryData": {
         *         "PlcAndNm": "PLACE",
         *         "Envlp": "ENVELOPE"
         *       }
         *     }
         */
        PaymentTransaction163: {
            StsId?: components["schemas"]["Max35Text"];
            OrgnlInstrId?: components["schemas"]["Max35Text"];
            OrgnlEndToEndId?: components["schemas"]["Max35Text"];
            OrgnlTxId?: components["schemas"]["Max35Text"];
            OrgnlUETR?: components["schemas"]["UUIDv4Identifier"];
            TxSts?: components["schemas"]["ExternalPaymentTransactionStatus1Code"];
            StsRsnInf?: components["schemas"]["StatusReasonInformation14"];
            AccptncDtTm?: components["schemas"]["ISODateTime"];
            AcctSvcrRef?: components["schemas"]["Max35Text"];
            ClrSysRef?: components["schemas"]["Max35Text"];
            ExctnConf?: components["schemas"]["Exact32HexBinaryText"];
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * PaymentTypeInformation28
         * @description Provides further details of the type of payment.
         *
         * @example {
         *       "InstrPrty": "NORM",
         *       "ClrChanl": "RTGS",
         *       "SvcLvl": {
         *         "Cd": "SEPA"
         *       },
         *       "LclInstrm": {
         *         "Cd": "CORE"
         *       },
         *       "CtgyPurp": {
         *         "Cd": "CASH"
         *       }
         *     }
         */
        PaymentTypeInformation28: {
            InstrPrty?: components["schemas"]["Priority2Code"];
            ClrChanl?: components["schemas"]["ClearingChannel2Code"];
            SvcLvl?: components["schemas"]["ServiceLevel8Choice"];
            LclInstrm?: components["schemas"]["LocalInstrument2Choice"];
            CtgyPurp?: components["schemas"]["CategoryPurpose1Choice"];
        };
        /**
         * PercentageRate
         * @example 1234
         */
        PercentageRate: string;
        /**
         * PersonIdentification13
         * @description Unique and unambiguous way to identify a person.
         *
         * @example {
         *       "DtAndPlcOfBirth": {
         *         "Dt": "2018-01-01",
         *         "CityOfBirth": "City"
         *       },
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "CUST",
         *           "Prtry": 1
         *         }
         *       }
         *     }
         */
        PersonIdentification13: {
            DtAndPlcOfBirth?: components["schemas"]["DateAndPlaceOfBirth1"];
            Othr?: components["schemas"]["GenericPersonIdentification1"];
        };
        /**
         * PersonIdentification18
         * @description Unique and unambiguous way to identify a person.
         *
         * @example {
         *       "DtAndPlcOfBirth": {
         *         "Dt": "2018-01-01",
         *         "CityOfBirth": "City"
         *       },
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "CUST",
         *           "Prtry": 1
         *         }
         *       }
         *     }
         */
        PersonIdentification18: {
            DtAndPlcOfBirth?: components["schemas"]["DateAndPlaceOfBirth1"];
            Othr?: components["schemas"]["GenericPersonIdentification2"];
        };
        /**
         * PersonIdentificationSchemeName1Choice
         * @description Sets of elements to identify a name of the identification scheme.
         *
         * @example {
         *       "Cd": "CCPT"
         *     }
         */
        PersonIdentificationSchemeName1Choice: {
            Cd?: components["schemas"]["ExternalPersonIdentification1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * PhoneNumber
         * @description Double check this regex.
         *
         */
        PhoneNumber: string;
        /**
         * PostalAddress24
         * @description Information that locates and identifies a specific address, as defined by postal services.
         *
         * @example {
         *       "AdrTp": "ADDR",
         *       "Dept": "Dept",
         *       "SubDept": "SubDept",
         *       "StrtNm": "StrtNm",
         *       "BldgNb": "BldgNb",
         *       "BldgNm": "BldgNm",
         *       "Flr": "Flr",
         *       "PstBx": "PstBx",
         *       "Room": "Room",
         *       "PstCd": "PstCd",
         *       "TwnNm": "TwnNm",
         *       "TwnLctnNm": "TwnLctnNm",
         *       "DstrctNm": "DstrctNm",
         *       "CtrySubDvsn": "CtrySubDvsn",
         *       "Ctry": "Ctry",
         *       "AdrLine": "AdrLine"
         *     }
         */
        PostalAddress24: {
            AdrTp?: components["schemas"]["AddressType3Choice"];
            Dept?: components["schemas"]["Max70Text"];
            SubDept?: components["schemas"]["Max70Text"];
            StrtNm?: components["schemas"]["Max70Text"];
            BldgNb?: components["schemas"]["Max16Text"];
            BldgNm?: components["schemas"]["Max35Text"];
            Flr?: components["schemas"]["Max70Text"];
            PstBx?: components["schemas"]["Max16Text"];
            Room?: components["schemas"]["Max70Text"];
            PstCd?: components["schemas"]["Max16Text"];
            TwnNm?: components["schemas"]["Max35Text"];
            TwnLctnNm?: components["schemas"]["Max35Text"];
            DstrctNm?: components["schemas"]["Max35Text"];
            CtrySubDvsn?: components["schemas"]["Max35Text"];
            Ctry?: components["schemas"]["CountryCode"];
            AdrLine?: components["schemas"]["Max70Text"];
        };
        /**
         * PostalAddress27
         * @description Information that locates and identifies a specific address, as defined by postal services.
         *
         * @example {
         *       "AdrTp": "ADDR",
         *       "CareOf": "CareOf",
         *       "Dept": "Dept",
         *       "SubDept": "SubDept",
         *       "StrtNm": "StrtNm",
         *       "BldgNb": "BldgNb",
         *       "BldgNm": "BldgNm",
         *       "Flr": "Flr",
         *       "UnitNb": "UnitNb",
         *       "PstBx": "PstBx",
         *       "Room": "Room",
         *       "PstCd": "PstCd",
         *       "TwnNm": "TwnNm",
         *       "TwnLctnNm": "TwnLctnNm",
         *       "DstrctNm": "DstrctNm",
         *       "CtrySubDvsn": "CtrySubDvsn",
         *       "Ctry": "Ctry",
         *       "AdrLine": "AdrLine"
         *     }
         */
        PostalAddress27: {
            AdrTp?: components["schemas"]["AddressType3Choice"];
            CareOf?: components["schemas"]["Max140Text"];
            Dept?: components["schemas"]["Max70Text"];
            SubDept?: components["schemas"]["Max70Text"];
            StrtNm?: components["schemas"]["Max140Text"];
            BldgNb?: components["schemas"]["Max16Text"];
            BldgNm?: components["schemas"]["Max140Text"];
            Flr?: components["schemas"]["Max70Text"];
            UnitNb?: components["schemas"]["Max16Text"];
            PstBx?: components["schemas"]["Max16Text"];
            Room?: components["schemas"]["Max70Text"];
            PstCd?: components["schemas"]["Max16Text"];
            TwnNm?: components["schemas"]["Max140Text"];
            TwnLctnNm?: components["schemas"]["Max140Text"];
            DstrctNm?: components["schemas"]["Max140Text"];
            CtrySubDvsn?: components["schemas"]["Max35Text"];
            Ctry?: components["schemas"]["CountryCode"];
            AdrLine?: components["schemas"]["Max70Text"];
        };
        /**
         * PreferredContactMethod1Code
         * @description Preferred method used to reach the individual contact within an organisation.
         *
         * @example CELL
         * @enum {string}
         */
        PreferredContactMethod1Code: "LETT" | "MAIL" | "PHON" | "FAXX" | "CELL";
        /**
         * PreferredContactMethod2Code
         * @description Preferred method used to reach the individual contact within an organisation.
         *
         * @example MAIL
         * @enum {string}
         */
        PreferredContactMethod2Code: "LETT" | "MAIL" | "PHON" | "FAXX" | "CELL";
        /**
         * Priority2Code
         * @description Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
         *
         * @example HIGH
         * @enum {string}
         */
        Priority2Code: "HIGH" | "NORM";
        /**
         * ProxyAccountIdentification1
         * @description Information related to a proxy identification of the account.
         *
         * @example {
         *       "Tp": {
         *         "Cd": "IBAN"
         *       },
         *       "Id": 123
         *     }
         */
        ProxyAccountIdentification1: {
            Tp?: components["schemas"]["ProxyAccountType1Choice"];
            Id: components["schemas"]["Max2048Text"];
        };
        /**
         * ProxyAccountType1Choice
         * @description NOTE: Unsure on description.
         *
         * @example {
         *       "Cd": "CH03"
         *     }
         */
        ProxyAccountType1Choice: {
            Cd?: components["schemas"]["ExternalProxyAccountType1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * Purpose2Choice
         * @description Specifies the underlying reason for the payment transaction.
         *     Usage: Purpose is used by the end-customers, that is initiating party, (ultimate) debtor, (ultimate) creditor to provide information concerning the nature of the payment. Purpose is a content element, which is not used for processing by any of the agents involved in the payment chain.
         *
         * @example {
         *       "Cd": "CH03"
         *     }
         */
        Purpose2Choice: {
            Cd?: components["schemas"]["ExternalPurpose1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * RegulatoryAuthority2
         * @description Information about an entity requiring the regulatory reporting information.
         *
         * @example {
         *       "Nm": "Swiss National Bank",
         *       "Ctry": "CH"
         *     }
         */
        RegulatoryAuthority2: {
            Nm?: components["schemas"]["Max140Text"];
            Ctry?: components["schemas"]["CountryCode"];
        };
        /**
         * RegulatoryReporting3
         * @description Information needed due to regulatory and/or statutory requirements.
         *
         * @example {
         *       "DbtCdtRptgInd": "CRED",
         *       "Authrty": {
         *         "Nm": "Swiss National Bank",
         *         "Ctry": "CH"
         *       },
         *       "Dtls": {
         *         "Cd": "A1",
         *         "Inf": "Mandatory regulatory information"
         *       }
         *     }
         */
        RegulatoryReporting3: {
            DbtCdtRptgInd?: components["schemas"]["RegulatoryReportingType1Code"];
            Authrty?: components["schemas"]["RegulatoryAuthority2"];
            Dtls?: components["schemas"]["StructuredRegulatoryReporting3"];
        };
        /**
         * RegulatoryReportingType1Code
         * @description Identifies whether the regulatory reporting information applies to the debit side, to the credit side or to both debit and credit sides of the transaction.
         *
         * @example BOTH
         * @enum {string}
         */
        RegulatoryReportingType1Code: "CRED" | "DEBT" | "BOTH";
        /**
         * ServiceLevel8Choice
         * @description Details about a service level.
         *
         * @example {
         *       "Cd": "SEPA"
         *     }
         */
        ServiceLevel8Choice: {
            Cd?: components["schemas"]["ExternalServiceLevel1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * SettlementInstruction15
         * @description NOTE: Unsure on description.
         *
         * @example {
         *       "SttlmMtd": "INDA",
         *       "PmtTpInf": {
         *         "InstrPrty": "NORM",
         *         "SvcLvl": {
         *           "Cd": "SEPA"
         *         },
         *         "LclInstrm": {
         *           "Cd": "CH03"
         *         },
         *         "CtgyPurp": {
         *           "Cd": "SUPP"
         *         },
         *         "Cdtr": {
         *           "Nm": "Name",
         *           "PstlAdr": {
         *             "AdrTp": "ADDR",
         *             "AdrLine": "Address",
         *             "Ctry": "CH"
         *           },
         *           "Id": {
         *             "OrgId": {
         *               "AnyBIC": "BIC",
         *               "Othr": {
         *                 "Id": 123,
         *                 "SchmeNm": {
         *                   "Cd": "IBAN",
         *                   "Issr": "BIC"
         *                 }
         *               }
         *             }
         *           },
         *           "CtryOfRes": "CH",
         *           "CtctDtls": {
         *             "Nm": "Name",
         *             "PhneNb": 123,
         *             "EmailAdr": null
         *           }
         *         }
         *       }
         *     }
         */
        SettlementInstruction15: {
            SttlmMtd: components["schemas"]["SettlementMethod1Code"];
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
        };
        /**
         * SettlementMethod1Code
         * @description Specifies the method used to settle the credit transfer instruction.
         *
         * @example CLRG
         * @enum {string}
         */
        SettlementMethod1Code: "INDA" | "INGA" | "COVE" | "CLRG";
        /**
         * StatusReason6Choice
         * @description Unsure on description.
         *
         * @example {
         *       "Cd": "AGNT"
         *     }
         */
        StatusReason6Choice: {
            Cd?: components["schemas"]["ExternalStatusReason1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * StatusReasonInformation14
         * @description Unsure on description.
         *
         * @example {
         *       "Orgtr": {
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Department",
         *           "SubDept": "SubDepartment",
         *           "StrtNm": "StreetName",
         *           "BldgNb": "BuildingNumber",
         *           "PstCd": "PostCode",
         *           "TwnNm": "TownName",
         *           "CtrySubDvsn": "CountrySubDivision",
         *           "Ctry": "Country"
         *         }
         *       },
         *       "Rsn": {
         *         "Cd": "AGNT"
         *       },
         *       "AddtlInf": "AdditionalInformation"
         *     }
         */
        StatusReasonInformation14: {
            Orgtr?: components["schemas"]["PartyIdentification272"];
            Rsn?: components["schemas"]["StatusReason6Choice"];
            AddtlInf?: components["schemas"]["Max105Text"];
        };
        /**
         * StructuredRegulatoryReporting3
         * @description Unsure on description.
         *
         * @example {
         *       "Tp": "T1",
         *       "Dt": "2018-01-01",
         *       "Ctry": "CH",
         *       "Cd": "CHF",
         *       "Amt": {
         *         "Ccy": "CHF",
         *         "Amt": 1000
         *       },
         *       "Inf": 12345
         *     }
         */
        StructuredRegulatoryReporting3: {
            Tp?: components["schemas"]["Max35Text"];
            Dt?: components["schemas"]["ISODate"];
            Ctry?: components["schemas"]["CountryCode"];
            Cd?: components["schemas"]["Max10Text"];
            Amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            Inf?: components["schemas"]["Max35Text"];
        };
        /**
         * SupplementaryData1
         * @description Additional information that can not be captured in the structured fields and/or any other specific block.
         *
         * @example {
         *       "PlcAndNm": "Additional information",
         *       "Envlp": {
         *         "Cd": "CH03",
         *         "Prtry": "Additional information"
         *       }
         *     }
         */
        SupplementaryData1: {
            PlcAndNm?: components["schemas"]["Max350Text"];
            Envlp: components["schemas"]["SupplementaryDataEnvelope1"];
        };
        /**
         * SupplementaryDataEnvelope1
         * @description Unsure on description.
         *
         */
        SupplementaryDataEnvelope1: Record<string, never>;
        /**
         * TaxAmount3
         * @description Information on the amount of the tax record.
         *
         * @example {
         *       "Rate": 0,
         *       "TaxblBaseAmt": {
         *         "Ccy": "EUR",
         *         "Amt": 0
         *       },
         *       "TtlAmt": {
         *         "Ccy": "EUR",
         *         "Amt": 0
         *       },
         *       "Dtls": {
         *         "Tp": "T1",
         *         "Ctry": "CH",
         *         "Cd": "CHF",
         *         "Amt": {
         *           "Ccy": "CHF",
         *           "Amt": 1000
         *         },
         *         "Inf": 12345
         *       }
         *     }
         */
        TaxAmount3: {
            Rate?: components["schemas"]["PercentageRate"];
            TaxblBaseAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            TtlAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            Dtls?: components["schemas"]["TaxRecordDetails3"];
        };
        /**
         * TaxAuthorisation1
         * @description Details of an authorised tax paying party.
         *
         * @example {
         *       "Titl": "Mr",
         *       "Nm": "John Doe"
         *     }
         */
        TaxAuthorisation1: {
            Titl?: components["schemas"]["Max35Text"];
            Nm?: components["schemas"]["Max140Text"];
        };
        /**
         * TaxData1
         * @description Details about tax paid, or to be paid, to the government in accordance with the law, including pre-defined parameters such as thresholds and type of account.
         *
         * @example {
         *       "Cdtr": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       },
         *       "Dbtr": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       },
         *       "UltmtDbtr": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       },
         *       "AdmstnZone": "CH",
         *       "RefNb": 12345,
         *       "Mtd": "A",
         *       "TtlTaxblBaseAmt": {
         *         "Ccy": "CHF",
         *         "Amt": 1000
         *       },
         *       "TtlTaxAmt": {
         *         "Ccy": "CHF",
         *         "Amt": 100
         *       },
         *       "Dt": "2018-01-01",
         *       "SeqNb": 1,
         *       "Rcrd": {
         *         "Tp": "T1",
         *         "Ctry": "CH",
         *         "Cd": "CHF",
         *         "Amt": {
         *           "Ccy": "CHF",
         *           "Amt": 1000
         *         },
         *         "Inf": 12345
         *       }
         *     }
         */
        TaxData1: {
            Cdtr?: components["schemas"]["TaxParty1"];
            Dbtr?: components["schemas"]["TaxParty2"];
            UltmtDbtr?: components["schemas"]["TaxParty2"];
            AdmstnZone?: components["schemas"]["Max35Text"];
            RefNb?: components["schemas"]["Max140Text"];
            Mtd?: components["schemas"]["Max35Text"];
            TtlTaxblBaseAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            TtlTaxAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            Dt?: components["schemas"]["ISODate"];
            SeqNb?: components["schemas"]["Number"];
            Rcrd?: components["schemas"]["TaxRecord3"];
        };
        /**
         * TaxParty1
         * @description Details about the entity involved in the tax paid or to be paid.
         *
         * @example {
         *       "TaxId": 123456789,
         *       "RegnId": 123456789,
         *       "TaxTp": "VAT"
         *     }
         */
        TaxParty1: {
            TaxId?: components["schemas"]["Max35Text"];
            RegnId?: components["schemas"]["Max35Text"];
            TaxTp?: components["schemas"]["Max35Text"];
        };
        /**
         * TaxParty2
         * @description Details about the entity involved in the tax paid or to be paid.
         *
         * @example {
         *       "TaxId": 123456789,
         *       "RegnId": 123456789,
         *       "TaxTp": "VAT",
         *       "Authstn": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       }
         *     }
         */
        TaxParty2: {
            TaxId?: components["schemas"]["Max35Text"];
            RegnId?: components["schemas"]["Max35Text"];
            TaxTp?: components["schemas"]["Max35Text"];
            Authstn?: components["schemas"]["TaxAuthorisation1"];
        };
        /**
         * TaxPeriod3
         * @description Period of time details related to the tax payment.
         *
         * @example {
         *       "Yr": 2020,
         *       "Tp": "MM01",
         *       "FrToDt": {
         *         "FrDt": "2020-01-01",
         *         "ToDt": "2020-01-31"
         *       }
         *     }
         */
        TaxPeriod3: {
            Yr?: components["schemas"]["ISOYear"];
            Tp?: components["schemas"]["TaxRecordPeriod1Code"];
            FrToDt?: components["schemas"]["DatePeriod2"];
        };
        /**
         * TaxRecord3
         * @description Set of elements used to define the tax record.
         *
         * @example {
         *       "Tp": "VAT",
         *       "Ctgy": "A",
         *       "CtgyDtls": "Standard",
         *       "DbtrSts": "Resident",
         *       "CertId": 123456789,
         *       "FrmsCd": 123456789,
         *       "Prd": {
         *         "FrstDay": "2019-01-01",
         *         "LastDay": "2019-12-31"
         *       },
         *       "TaxAmt": {
         *         "Rate": 0.2,
         *         "TaxblBaseAmt": 1000,
         *         "TtlAmt": 200
         *       },
         *       "AddtlInf": "VAT applicable"
         *     }
         */
        TaxRecord3: {
            Tp?: components["schemas"]["Max35Text"];
            Ctgy?: components["schemas"]["Max35Text"];
            CtgyDtls?: components["schemas"]["Max35Text"];
            DbtrSts?: components["schemas"]["Max35Text"];
            CertId?: components["schemas"]["Max35Text"];
            FrmsCd?: components["schemas"]["Max35Text"];
            Prd?: components["schemas"]["TaxPeriod3"];
            TaxAmt?: components["schemas"]["TaxAmount3"];
            AddtlInf?: components["schemas"]["Max140Text"];
        };
        /**
         * TaxRecordDetails3
         * @description Details on the tax period and amount
         *
         * @example {
         *       "Prd": {
         *         "Yr": 2020,
         *         "Tp": "MM01",
         *         "FrToDt": {
         *           "FrDt": "2020-01-01",
         *           "ToDt": "2020-01-31"
         *         }
         *       },
         *       "Amt": {
         *         "Amt": 100,
         *         "Ccy": "EUR"
         *       }
         *     }
         */
        TaxRecordDetails3: {
            Prd?: components["schemas"]["TaxPeriod3"];
            Amt: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
        };
        /**
         * TaxRecordPeriod1Code
         * @description Specifies the period related to the tax payment
         *
         *     MM01 FirstMonth Tax is related to the second month of the period.
         *     MM02 SecondMonth Tax is related to the first month of the period.
         *     MM03 ThirdMonth Tax is related to the third month of the period.
         *     MM04 FourthMonth Tax is related to the fourth month of the period.
         *     MM05 FifthMonth Tax is related to the fifth month of the period.
         *     MM06 SixthMonth Tax is related to the sixth month of the period.
         *     MM07 SeventhMonth Tax is related to the seventh month of the period.
         *     MM08 EighthMonth Tax is related to the eighth month of the period.
         *     MM09 NinthMonth Tax is related to the ninth month of the period.
         *     MM10 TenthMonth Tax is related to the tenth month of the period.
         *     MM11 EleventhMonth Tax is related to the eleventh month of the period.
         *     MM12 TwelfthMonth Tax is related to the twelfth month of the period.
         *     QTR1 FirstQuarter Tax is related to the first quarter of the period.
         *     QTR2 SecondQuarter Tax is related to the second quarter of the period.
         *     QTR3 ThirdQuarter Tax is related to the third quarter of the period.
         *     QTR4 FourthQuarter Tax is related to the forth quarter of the period.
         *     HLF1 FirstHalf Tax is related to the first half of the period.
         *     HLF2 SecondHalf Tax is related to the second half of the period.
         *
         * @example HLF1
         * @enum {string}
         */
        TaxRecordPeriod1Code: "MM01" | "MM02" | "MM03" | "MM04" | "MM05" | "MM06" | "MM07" | "MM08" | "MM09" | "MM10" | "MM11" | "MM12" | "QTR1" | "QTR2" | "QTR3" | "QTR4" | "HLF1" | "HLF2";
        /**
         * TermsRequest_FIToFICustomerCreditProposal
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123456789,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BBA",
         *                     "Prtry": "Party Identification Scheme Name"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         }
         *       }
         *     }
         */
        TermsRequest_FIToFICustomerCreditProposal: {
            GrpHdr: components["schemas"]["GroupHeader129"];
        };
        /**
         * TermsResponse_FIToFICustomerCreditConfirmation
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123456789,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BBA",
         *                     "Prtry": "Party Identification Scheme Name"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         }
         *       }
         *     }
         */
        TermsResponse_FIToFICustomerCreditConfirmation: {
            GrpHdr: components["schemas"]["GroupHeader129"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction67"];
        };
        /**
         * UUIDv4Identifier
         * @example 8f3a3b2d-3b0a-4b3f-8e4e-1b2f3f4c5d6e
         */
        UUIDv4Identifier: string;
        /**
         * VerificationReason1Choice
         * @example {
         *       "Cd": "AGNT"
         *     }
         */
        VerificationReason1Choice: {
            Cd?: components["schemas"]["ExternalVerificationReason1Code"];
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * VerificationReport4
         * @example {
         *       "OrgnlId": 123456789,
         *       "Vrfctn": true,
         *       "Rsn": {
         *         "Cd": "AGNT"
         *       },
         *       "OrgnlPtyAndAcctId": {
         *         "Id": 123456789,
         *         "SchmeNm": {
         *           "Cd": "CCPT"
         *         }
         *       },
         *       "UpdtdPtyAndAcctId": {
         *         "Id": 123456789,
         *         "SchmeNm": {
         *           "Cd": "CCPT"
         *         }
         *       }
         *     }
         */
        VerificationReport4: {
            OrgnlId: components["schemas"]["Max35Text"];
            Vrfctn: components["schemas"]["IdentificationVerificationIndicator"];
            Rsn?: components["schemas"]["VerificationReason1Choice"];
            OrgnlPtyAndAcctId?: components["schemas"]["IdentificationInformation4"];
            UpdtdPtyAndAcctId?: components["schemas"]["IdentificationInformation4"];
        };
        /**
         * hexBinary
         * @example 4660
         */
        hexBinary: string;
    };
    responses: {
        /** @description OK */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Accepted */
        202: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Bad Request */
        400: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Method Not Allowed */
        405: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Acceptable */
        406: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Implemented */
        501: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Service Unavailable */
        503: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
    };
    parameters: {
        /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: string;
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
        /** @description The `Date` header field indicates the date when the request was sent. */
        Date: string;
        /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination": string;
        /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption": string;
        /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method": string;
        /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature": string;
        /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": string;
        /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-URI": string;
        /** @description The identifier value. */
        ID: string;
        /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
        SubId: string;
        /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
        "X-Forwarded-For": string;
    };
    requestBodies: never;
    headers: {
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    PartiesByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesByTypeAndID2: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Party information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetParties_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetPartiesError_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdByTypeAndIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Party information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetParties_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetPartiesError_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    Quotes: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsRequest_FIToFICustomerCreditProposal"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByID1: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsResponse_FIToFICustomerCreditConfirmation"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    transfers: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Execute_FIToFICustomerCreditTransferV13"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDPatch: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer notification upon completion. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the FX quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxRequest_FICreditTransferProposal"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIdPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description FX Quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxResponse_FICreditTransferConfirmation"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIDAndErrorPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the FX transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Fxecute_FinancialInstitutionCreditTransferV12"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDPatch: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer notification upon completion. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDAndErrorPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
}
