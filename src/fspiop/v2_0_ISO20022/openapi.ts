/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/parties/{Type}/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Look up party information
         * @description The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
         */
        get: operations["PartiesByTypeAndID"];
        /**
         * Return party information
         * @description The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
         */
        put: operations["PartiesByTypeAndID2"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return party information error
         * @description If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubI}/error`) is used.
         */
        put: operations["PartiesErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/{SubId}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /**
         * Look up party information
         * @description The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET /parties/BUSINESS/shoecompany/employee1`).
         */
        get: operations["PartiesSubIdByTypeAndID"];
        /**
         * Return party information
         * @description The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the Party information lookup.
         */
        put: operations["PartiesSubIdByTypeAndIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parties/{Type}/{ID}/{SubId}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return party information error
         * @description If the server is unable to find Party information of the provided identity, or another processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT /parties/{Type}/{ID}/{SubId}/error`) is used.
         */
        put: operations["PartiesSubIdErrorByTypeAndID"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate quote
         * @description The HTTP request `POST /quotes` is used to request the creation of a quote for the provided financial transaction in the server.
         */
        post: operations["Quotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve quote information
         * @description The HTTP request `GET /quotes/{ID}` is used to get information regarding a quote created or requested earlier. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote.
         */
        get: operations["QuotesByID"];
        /**
         * Return quote information
         * @description The callback `PUT /quotes/{ID}` is used to inform the client of a requested or created quote. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
         */
        put: operations["QuotesByID1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return quote information error
         * @description If the server is unable to find or create a quote, or some other processing error occurs, the error callback `PUT /quotes/{ID}/error` is used. The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
         */
        put: operations["QuotesByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform transfer
         * @description The HTTP request `POST /transfers` is used to request the creation of a transfer for the next ledger, and a financial transaction for the Payee FSP.
         */
        post: operations["transfers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve transfer information
         * @description The HTTP request `GET /transfers/{ID}` is used to get information regarding a transfer created or requested earlier. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer.
         */
        get: operations["TransfersByIDGet"];
        /**
         * Return transfer information
         * @description The callback `PUT /transfers/{ID}` is used to inform the client of a requested or created transfer. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}` request.
         */
        put: operations["TransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Return transfer information
         * @description The HTTP request PATCH /transfers/<ID> is used by a Switch to update the state of a previously reserved transfer, if the Payee FSP has requested a commit notification when the Switch has completed processing of the transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer. Please note that this request does not generate a callback.
         */
        patch: operations["TransfersByIDPatch"];
        trace?: never;
    };
    "/transfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return transfer information error
         * @description If the server is unable to find or create a transfer, or another processing error occurs, the error callback `PUT /transfers/{ID}/error` is used. The `{ID}` in the URI should contain the `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}`.
         */
        put: operations["TransfersByIDAndError"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate FX quote
         * @description The HTTP request `POST /fxQuotes` is used to ask an FXP to provide a quotation for a currency conversion.
         */
        post: operations["FxQuotesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve FX quote information
         * @description The HTTP request `GET /fxQuotes/{ID}` is used to request information regarding a request for quotation for a  currency conversion which the sender has previously issued. The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the quote.
         */
        get: operations["FxQuotesByIDGet"];
        /**
         * Return FX quote information
         * @description The callback `PUT /fxQuotes/{ID}` is used to inform the requester about the outcome of a request for quotation for a currency conversion.  The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the FX quote, or the `{ID}` that was used in the `GET /fxQuotes/{ID}` request.
         */
        put: operations["FxQuotesByIdPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxQuotes/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return FX quote information error
         * @description If the FXP is unable to find or create a FX quote, or some other processing error occurs, the error callback `PUT /fxQuotes/{ID}/error` is used. The `{ID}` in the URI should contain the `conversionRequestId` that was used for the creation of the FX quote, or the `{ID}` that was used in the `GET /fxQuotes/{ID}` request.
         */
        put: operations["FxQuotesByIDAndErrorPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxTransfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Perform FX transfer
         * @description The HTTP request `POST /fxTransfers` is used to ask an FXP to confirm the execution of an agreed currency conversion.
         */
        post: operations["FxTransfersPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fxTransfers/{ID}": {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /**
         * Retrieve FX transfer information
         * @description The HTTP request `GET /fxTransfers/{ID}` s used to request information regarding a request for confirmation of a currency conversion which the sender has previously issued. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer.
         */
        get: operations["FxTransfersByIDGet"];
        /**
         * Return FX transfer information
         * @description The callback `PUT /fxTransfers/{ID}` is used to inform the requester about the outcome of a request for execution of a currency conversion. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer, or the `{ID}` that was used in the `GET /fxTransfers/{ID}` request.
         */
        put: operations["FxTransfersByIDPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Return FX transfer information
         * @description The HTTP request PATCH /fxTransfers/<ID> is used to inform the requester about the final determination by the switch of the transfer a request for execution of a currency conversion. The <ID> in the URI should contain the commitRequestId that was used for the creation of the FX transfer. Please note that this request does not generate a callback.
         */
        patch: operations["FxTransfersByIDPatch"];
        trace?: never;
    };
    "/fxTransfers/{ID}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Return FX transfer information error
         * @description If the switch or FXP is unable to find or create a FX transfer, or another processing error occurs, the error callback `PUT /fxTransfers/{ID}/error` is used. The `{ID}` in the URI should contain the `commitRequestId` that was used for the creation of the FX transfer, or the `{ID}` that was used in the `GET /fxTransfers/{ID}`.
         */
        put: operations["FxTransfersByIDAndErrorPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AccountIdentification4Choice
         * @description Specifies the unique identification of an account as assigned by the account servicer.
         *
         * @example {
         *       "IBAN": "BE71096123456769"
         *     }
         */
        AccountIdentification4Choice: {
            /** @description IBAN
             *     International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 "Banking and related financial services - International Bank Account Number (IBAN)" version 1997-10-01, or later revisions.
             *      */
            IBAN?: components["schemas"]["IBAN2007Identifier"];
            /** @description Other
             *     Unique identification of an account, as assigned by the account servicer, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericAccountIdentification1"];
        } & (unknown | unknown);
        /**
         * AccountSchemeName1Choice
         * @description Sets of elements to identify a name of the identification scheme.
         *
         * @example {
         *       "Cd": 1111
         *     }
         */
        AccountSchemeName1Choice: {
            /** @description Code
             *     Name of the identification scheme, in a coded form as published in an external list.
             *      */
            Cd?: components["schemas"]["ExternalAccountIdentification1Code"];
            /** @description Proprietary
             *     Name of the identification scheme, in a free text form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * ActiveCurrencyAndAmount
         * @description A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
         *
         * @example {
         *       "ActiveCurrencyAndAmount": 123.45,
         *       "Ccy": "USD"
         *     }
         */
        ActiveCurrencyAndAmount: {
            ActiveCurrencyAndAmount: components["schemas"]["ActiveCurrencyAndAmount_SimpleType"];
            /** @description Currency
             *     Identification of the currency in which the account is held.
             *      */
            Ccy: components["schemas"]["ActiveCurrencyCode"];
        };
        /**
         * ActiveCurrencyAndAmount_SimpleType
         * @description NOTE: This regex doesn't seem correct given it's xsd definition.
         *     <xs:simpleType name="ActiveCurrencyAndAmount_SimpleType">
         *       <xs:restriction base="xs:decimal">
         *         <xs:fractionDigits value="5"/>
         *         <xs:totalDigits value="18"/>
         *         <xs:minInclusive value="0"/>
         *       </xs:restriction>
         *     </xs:simpleType>
         *
         * @example 123.45
         */
        ActiveCurrencyAndAmount_SimpleType: string;
        /**
         * ActiveCurrencyCode
         * @description A code allocated to a currency by a Maintenance Agency under an international identification scheme as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
         * @example USD
         */
        ActiveCurrencyCode: string;
        /**
         * ActiveOrHistoricCurrencyAndAmount
         * @description A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
         *
         * @example {
         *       "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *       "Ccy": "USD"
         *     }
         */
        ActiveOrHistoricCurrencyAndAmount: {
            ActiveOrHistoricCurrencyAndAmount: components["schemas"]["ActiveOrHistoricCurrencyAndAmount_SimpleType"];
            /** @description Currency
             *     Identification of the currency in which the account is held.
             *      */
            Ccy: components["schemas"]["ActiveOrHistoricCurrencyCode"];
        };
        /**
         * ActiveOrHistoricCurrencyAndAmount_SimpleType
         * @example 123.45
         */
        ActiveOrHistoricCurrencyAndAmount_SimpleType: string;
        /**
         * ActiveOrHistoricCurrencyCode
         * @description A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
         *
         * @example USD
         */
        ActiveOrHistoricCurrencyCode: string;
        /**
         * @description AddressType2Code
         *
         *     Specifies the type of address.
         *
         * @example ADDR
         * @enum {string}
         */
        AddressType2Code: "ADDR" | "PBOX" | "HOME" | "BIZZ" | "MLTO" | "DLVY";
        /**
         * AddressType3Choice
         * @description Choice of formats for the type of address.
         *
         * @example {
         *       "Cd": "ADDR"
         *     }
         */
        AddressType3Choice: {
            /** @description Code
             *     Type of address expressed as a code.
             *      */
            Cd?: components["schemas"]["AddressType2Code"];
            /** @description Proprietary
             *     Type of address expressed as a proprietary code.
             *      */
            Prtry?: components["schemas"]["GenericIdentification30"];
        } & (unknown | unknown);
        /**
         * AnyBICDec2014Identifier
         * @description AnyBICDec2014Identifier
         *     Code allocated to a financial or non-financial institution by the
         *     ISO 9362 Registration Authority, as described in ISO 9362: 2014
         *     - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
         *
         * @example J5BMVH7D
         */
        AnyBICDec2014Identifier: string;
        /**
         * BICFIDec2014Identifier
         * @description Code allocated to a financial institution by the ISO 9362 Registration
         *
         *     Authority as described in ISO 9362: 2014
         *
         *     - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
         *
         * @example J5BMVH7D
         */
        BICFIDec2014Identifier: string;
        /**
         * BaseOneRate
         * @description Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
         *
         * @example 0.7
         */
        BaseOneRate: string;
        /**
         * BranchAndFinancialInstitutionIdentification6
         * @description Unique and unambiguous identification of a financial institution or a branch of a financial institution.
         *
         * @example {
         *       "FinInstnId": {
         *         "BICFI": "J5BMVH7D"
         *       },
         *       "BrnchId": {
         *         "Id": 123,
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Department",
         *           "SubDept": "Sub department",
         *           "StrtNm": "Street name",
         *           "BldgNb": "Building number",
         *           "PstCd": "Post code",
         *           "TwnNm": "Town name",
         *           "CtrySubDvsn": "Country subdivision",
         *           "Ctry": "Country",
         *           "AdrLine": "Address line"
         *         }
         *       }
         *     }
         */
        BranchAndFinancialInstitutionIdentification6: {
            /** @description FinancialInstitutionIdentification
             *     Unique and unambiguous identification of a financial institution, as assigned under an internationally recognised or proprietary identification scheme.
             *      */
            FinInstnId: components["schemas"]["FinancialInstitutionIdentification18"];
            /** @description BranchIdentification
             *     Definition: Identifies a specific branch of a financial institution.
             *     Usage: This component should be used in case the identification information in the financial institution component does not provide identification up to branch level.
             *      */
            BrnchId?: components["schemas"]["BranchData3"];
        };
        /**
         * BranchAndFinancialInstitutionIdentification8
         * @description Unique and unambiguous identification of a financial institution or a branch of a financial institution.
         *
         * @example {
         *       "FinInstnId": {
         *         "BICFI": "J5BMVH7D"
         *       },
         *       "BrnchId": {
         *         "Id": 123,
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Department",
         *           "SubDept": "Sub department",
         *           "StrtNm": "Street name",
         *           "BldgNb": "Building number",
         *           "PstCd": "Post code",
         *           "TwnNm": "Town name",
         *           "CtrySubDvsn": "Country subdivision",
         *           "Ctry": "Country",
         *           "AdrLine": "Address line"
         *         }
         *       }
         *     }
         */
        BranchAndFinancialInstitutionIdentification8: {
            /** @description FinancialInstitutionIdentification
             *     Unique and unambiguous identification of a financial institution or a branch of a financial institution.
             *      */
            FinInstnId: components["schemas"]["FinancialInstitutionIdentification23"];
            /** @description BranchIdentification
             *
             *      Identifies a specific branch of a financial institution.
             *      */
            BrnchId?: components["schemas"]["BranchData5"];
        };
        /**
         * BranchData3
         * @description Information that locates and identifies a specific branch of a financial institution.
         *
         * @example {
         *       "Id": 123,
         *       "Nm": "Name",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Department",
         *         "SubDept": "Sub department",
         *         "StrtNm": "Street name",
         *         "BldgNb": "Building number",
         *         "PstCd": "Post code",
         *         "TwnNm": "Town name",
         *         "CtrySubDvsn": "Country subdivision",
         *         "Ctry": "Country",
         *         "AdrLine": "Address line"
         *       }
         *     }
         */
        BranchData3: {
            /** @description Identification
             *     Unique and unambiguous identification of a branch of a financial institution.
             *      */
            Id?: components["schemas"]["Max35Text"];
            /** @description Legal Entity Identifier
             *     Legal entity identification for the branch of the financial institution.
             *      */
            LEI?: components["schemas"]["LEIIdentifier"];
            /** @description Name
             *     Name by which an agent is known and which is usually used to identify that agent.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description Postal Address
             *     Information that locates and identifies a specific address, as defined by postal services.
             *      */
            PstlAdr?: components["schemas"]["PostalAddress24"];
        };
        /**
         * BranchData5
         * @description Information that locates and identifies a specific branch of a financial institution.
         *
         * @example {
         *       "Id": 123,
         *       "LEI": 123,
         *       "Nm": "Name",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Department",
         *         "SubDept": "Sub department",
         *         "StrtNm": "Street name",
         *         "BldgNb": "Building number",
         *         "PstCd": "Post code",
         *         "TwnNm": "Town name",
         *         "CtrySubDvsn": "Country subdivision",
         *         "Ctry": "Country",
         *         "AdrLine": "Address line"
         *       }
         *     }
         */
        BranchData5: {
            /** @description Identification
             *     Unique and unambiguous identification of a branch of a financial institution.
             *      */
            Id?: components["schemas"]["Max35Text"];
            /** @description LEI
             *     Legal entity identification for the branch of the financial institution.
             *      */
            LEI?: components["schemas"]["LEIIdentifier"];
            /** @description Name
             *     Name by which an agent is known and which is usually used to identify that agent.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description PostalAddress
             *     Information that locates and identifies a specific address, as defined by postal services.
             *      */
            PstlAdr?: components["schemas"]["PostalAddress27"];
        };
        /**
         * CashAccount40
         * @description Provides the details to identify an account.
         *
         * @example {
         *       "Id": {
         *         "IBAN": "BE71096123456769"
         *       },
         *       "Tp": {
         *         "Cd": "CACC"
         *       },
         *       "Ccy": "EUR",
         *       "Nm": "My account",
         *       "Prxy": {
         *         "Id": 12345
         *       }
         *     }
         */
        CashAccount40: {
            /** @description Identification
             *     Unique and unambiguous identification for the account between the account owner and the account servicer.
             *      */
            Id?: components["schemas"]["AccountIdentification4Choice"];
            /** @description Type
             *     Specifies the nature, or use of the account.
             *      */
            Tp?: components["schemas"]["CashAccountType2Choice"];
            /** @description Currency
             *     Definition: Identification of the currency in which the account is held.
             *     Usage: Currency should only be used in case one and the same account number covers several currencies and the initiating party needs to identify which currency needs to be used for settlement on the account.
             *      */
            Ccy?: components["schemas"]["ActiveOrHistoricCurrencyCode"];
            /** @description Name
             *     Definition: Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.
             *     Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.
             *      */
            Nm?: components["schemas"]["Max70Text"];
            /** @description Proxy
             *     Specifies an alternate assumed name for the identification of the account.
             *      */
            Prxy?: components["schemas"]["ProxyAccountIdentification1"];
        };
        /**
         * CashAccountType2Choice
         * @description Specifies the nature, or use of the account.
         *
         * @example {
         *       "Cd": "CACC"
         *     }
         */
        CashAccountType2Choice: {
            /** @description Code
             *     Account type, in a coded form.
             *      */
            Cd?: components["schemas"]["ExternalCashAccountType1Code"];
            /** @description Proprietary
             *     Nature or use of the account in a proprietary form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * CategoryPurpose1Choice
         * @description Contains details about high level purpose of the mandate based on a set of pre-defined categories.
         *
         * @example {
         *       "Cd": "CASH"
         *     }
         */
        CategoryPurpose1Choice: {
            /** @description Code
             *     Category purpose, as published in an external category purpose code list.
             *      */
            Cd?: components["schemas"]["ExternalCategoryPurpose1Code"];
            /** @description Proprietary
             *     Category purpose, in a proprietary form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * ChargeBearerType1Code
         * @description Specifies which party(ies) will pay charges due for processing of the instruction.
         *     DEBT BorneByDebtor All transaction charges are to be borne by the debtor.
         *     CRED BorneByCreditor All transaction charges are to be borne by the creditor.
         *     SHAR Shared In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver
         *     SLEV FollowingServiceLevel Charges are to be applied following the rules agreed in the service level.
         *
         * @example DEBT
         * @enum {string}
         */
        ChargeBearerType1Code: "DEBT" | "CRED" | "SHAR" | "SLEV";
        /**
         * ChargeType3Choice
         * @description ChargeType3Choice
         *     Specifies the type of charge.
         *
         * @example {
         *       "Cd": "CASH"
         *     }
         */
        ChargeType3Choice: {
            /** @description Code
             *     Charge type, in a coded form.
             *      */
            Cd?: components["schemas"]["ExternalChargeType1Code"];
            /** @description Proprietary
             *     Type of charge in a proprietary form, as defined by the issuer.
             *      */
            Prtry?: components["schemas"]["GenericIdentification3"];
        } & (unknown | unknown);
        /**
         * Charges16
         * @description NOTE: Unsure on description.
         *
         *     Seemingly a generic schema for charges, with an amount, agent, and type.
         *
         * @example {
         *       "Amt": {
         *         "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *         "Ccy": "USD"
         *       },
         *       "Agt": {
         *         "BrnchId": {
         *           "Id": "BRANCHID"
         *         },
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "Tp": {
         *         "Cd": "SHAR"
         *       }
         *     }
         */
        Charges16: {
            /** @description Amount
             *
             *      Transaction charges to be paid by the charge bearer.
             *      */
            Amt: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description Agent
             *     Agent that takes the transaction charges or to which the transaction charges are due.
             *      */
            Agt: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description Type
             *
             *      Defines the type of charges.
             *      */
            Tp?: components["schemas"]["ChargeType3Choice"];
        };
        /**
         * ClearingChannel2Code
         * @description Specifies the clearing channel for the routing of the transaction, as part of the payment type identification.
         *     RTGS RealTimeGrossSettlementSystem Clearing channel is a real-time gross settlement system.
         *     RTNS RealTimeNetSettlementSystem Clearing channel is a real-time net settlement system.
         *     MPNS MassPaymentNetSystem Clearing channel is a mass payment  net settlement system.
         *     BOOK BookTransfer Payment through internal book transfer.
         *
         * @example RTGS
         * @enum {string}
         */
        ClearingChannel2Code: "RTGS" | "RTNS" | "MPNS" | "BOOK";
        /**
         * ClearingSystemIdentification2Choice
         * @description Choice of a clearing system identifier.
         *
         * @example {
         *       "Cd": "CHQB"
         *     }
         */
        ClearingSystemIdentification2Choice: {
            /** @description Code
             *     Identification of a member of a clearing system
             *      */
            Cd?: components["schemas"]["ExternalClearingSystemIdentification1Code"];
            /** @description Proprietary
             *     Identification code for a clearing system, that has not yet been identified in the list of clearing systems.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * ClearingSystemMemberIdentification2
         * @description Unique identification, as assigned by a clearing system, to unambiguously identify a member of the clearing system.
         *
         * @example {
         *       "ClrSysId": {
         *         "Cd": "CHQB"
         *       },
         *       "MmbId": 123456789
         *     }
         */
        ClearingSystemMemberIdentification2: {
            /** @description ClearingSystemIdentification.
             *     Specification of a pre-agreed offering between clearing agents or the channel through which the payment instruction is processed.
             *      */
            ClrSysId?: components["schemas"]["ClearingSystemIdentification2Choice"];
            /** @description MemberIdentification.
             *     Identification of a member of a clearing system.
             *      */
            MmbId: components["schemas"]["Max35Text"];
        };
        /**
         * Contact13
         * @description Specifies the details of the contact person.
         *
         * @example {
         *       "NmPrfx": "Mr",
         *       "Nm": "John Doe",
         *       "PhneNb": "+123-123-321",
         *       "MobNb": "+123-123-321",
         *       "FaxNb": "+123-123-321",
         *       "URLAdr": "http://www.example.com",
         *       "EmailAdr": "example@example.com"
         *     }
         */
        Contact13: {
            /** @description NamePrefix
             *     Specifies the terms used to formally address a person.
             *      */
            NmPrfx?: components["schemas"]["NamePrefix2Code"];
            /** @description Name
             *     Name by which a party is known and which is usually used to identify that party.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description PhoneNumber
             *     Collection of information that identifies a phone number, as defined by telecom services.
             *      */
            PhneNb?: components["schemas"]["PhoneNumber"];
            /** @description MobilePhoneNumber
             *     Collection of information that identifies a mobile phone number, as defined by telecom services.
             *      */
            MobNb?: components["schemas"]["PhoneNumber"];
            /** @description FaxNumber
             *     Collection of information that identifies a fax number, as defined by telecom services.
             *      */
            FaxNb?: components["schemas"]["PhoneNumber"];
            /** @description URLAddress
             *     Address for the Universal Resource Locator (URL), for example an address used over the www (HTTP) service.
             *      */
            URLAdr?: components["schemas"]["Max2048Text"];
            /** @description EmailAddress
             *     Address for electronic mail (e-mail).
             *      */
            EmailAdr?: components["schemas"]["Max256Text"];
            /** @description EmailPurpose
             *     Purpose for which an email address may be used.
             *      */
            EmailPurp?: components["schemas"]["Max35Text"];
            /** @description JobTitle
             *     Title of the function.
             *      */
            JobTitl?: components["schemas"]["Max35Text"];
            /** @description Responsibility
             *     Role of a person in an organisation.
             *      */
            Rspnsblty?: components["schemas"]["Max35Text"];
            /** @description Department
             *     Identification of a division of a large organisation or building.
             *      */
            Dept?: components["schemas"]["Max70Text"];
            /** @description OtherContact
             *     Contact details in another form.
             *      */
            Othr?: components["schemas"]["OtherContact1"];
            /** @description PreferredContactMethod
             *     Preferred method used to reach the contact.
             *      */
            PrefrdMtd?: components["schemas"]["PreferredContactMethod2Code"];
        };
        /**
         * Contact4
         * @description Specifies the details of the contact person.
         *
         * @example {
         *       "NmPrfx": "Mr",
         *       "Nm": "John Doe",
         *       "PhneNb": "+123-123-321",
         *       "MobNb": "+123-123-321",
         *       "FaxNb": "+123-123-321",
         *       "EmailAdr": "example@example.com"
         *     }
         */
        Contact4: {
            /** @description NamePrefix
             *     Name prefix to be used before the name of the person.
             *      */
            NmPrfx?: components["schemas"]["NamePrefix2Code"];
            /** @description Name
             *     Name by which a party is known and which is usually used to identify that party.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description PhoneNumber
             *     Collection of information that identifies a phone number, as defined by telecom services.
             *      */
            PhneNb?: components["schemas"]["PhoneNumber"];
            /** @description MobilePhoneNumber
             *     Collection of information that identifies a mobile phone number, as defined by telecom services.
             *      */
            MobNb?: components["schemas"]["PhoneNumber"];
            /** @description FaxNumber
             *     Collection of information that identifies a fax number, as defined by telecom services.
             *      */
            FaxNb?: components["schemas"]["PhoneNumber"];
            /** @description EmailAddress
             *     Address for electronic mail (e-mail).
             *      */
            EmailAdr?: components["schemas"]["Max2048Text"];
            /** @description EmailPurpose
             *     Purpose for which an email address may be used.
             *      */
            EmailPurp?: components["schemas"]["Max35Text"];
            /** @description JobTitle
             *     Title of the function.
             *      */
            JobTitl?: components["schemas"]["Max35Text"];
            /** @description Responsibility
             *     Role of a person in an organisation.
             *      */
            Rspnsblty?: components["schemas"]["Max35Text"];
            /** @description Department
             *     Identification of a division of a large organisation or building.
             *      */
            Dept?: components["schemas"]["Max70Text"];
            /** @description Other
             *     : Contact details in another form.
             *      */
            Othr?: components["schemas"]["OtherContact1"];
            /** @description PreferredMethod
             *     Preferred method used to reach the contact.
             *      */
            PrefrdMtd?: components["schemas"]["PreferredContactMethod1Code"];
        };
        /**
         * CountryCode
         * @description Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
         *
         * @example US
         */
        CountryCode: string;
        /**
         * CreditTransferTransaction67
         * @description Provides further details specific to the individual transaction(s) included in the message.
         *
         * @example {
         *       "PmtId": {
         *         "InstrId": "INSTRID",
         *         "EndToEndId": "ENDTOENDID"
         *       },
         *       "PmtTpInf": {
         *         "LclInstrm": {
         *           "Cd": "CHQB",
         *           "Prtry": "PROPRIETARY"
         *         },
         *         "SeqTp": "SEQTP"
         *       },
         *       "IntrBkSttlmAmt": {
         *         "ActiveCurrencyAndAmount": 123.45,
         *         "Ccy": "USD"
         *       },
         *       "InstdAmt": {
         *         "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *         "Ccy": "USD"
         *       },
         *       "XchgRate": 123.45,
         *       "ChrgBr": "SHAR",
         *       "ChrgsInf": {
         *         "Amt": {
         *           "ActiveOrHistoricCurrencyAndAmount": 123.45,
         *           "Ccy": "USD"
         *         },
         *         "Agt": {
         *           "BrnchId": {
         *             "Id": "BRANCHID"
         *           },
         *           "FinInstnId": {
         *             "BICFI": "BICFI"
         *           }
         *         },
         *         "Tp": {
         *           "Cd": "SHAR"
         *         }
         *       },
         *       "Dbtr": {
         *         "Nm": "NAME",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "BldgNb": "BLDGNB",
         *           "Ctry": "CTRY",
         *           "TwnNm": "TWNNM",
         *           "PstCd": "PSTCD",
         *           "StrtNm": "STRTNM"
         *         }
         *       },
         *       "DbtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "DbtrAgt": {
         *         "BrnchId": {
         *           "Id": "BRANCHID"
         *         },
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "CdtrAgt": {
         *         "BrnchId": {
         *           "Id": "BRANCHID"
         *         },
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "Cdtr": {
         *         "Nm": "NAME",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "BldgNb": "BLDGNB",
         *           "Ctry": "CTRY",
         *           "TwnNm": "TWNNM",
         *           "PstCd": "PSTCD",
         *           "StrtNm": "STRTNM"
         *         }
         *       },
         *       "CdtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "InstrForCdtrAgt": {
         *         "Cd": "CODE"
         *       },
         *       "InstrForNxtAgt": {
         *         "Cd": "CODE"
         *       },
         *       "Purp": {
         *         "Cd": "CASH"
         *       },
         *       "RgltryRptg": {
         *         "Dbtr": true,
         *         "Cdtr": true
         *       },
         *       "Tax": "Cdtr"
         *     }
         */
        CreditTransferTransaction67: {
            /** @description PaymentIdentification
             *     Set of elements used to reference a payment instruction.
             *      */
            PmtId: components["schemas"]["PaymentIdentification13"];
            /** @description PaymentTypeInformation
             *
             *      Set of elements used to further specify the type of transaction.
             *      */
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
            /** @description InterbankSettlementAmount
             *     Amount of money moved between the instructing agent and the instructed agent.
             *      */
            IntrBkSttlmAmt: components["schemas"]["ActiveCurrencyAndAmount"];
            /** @description InstructedAmount
             *     Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
             *      */
            InstdAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description ExchangeRate
             *     Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.
             *      */
            XchgRate?: components["schemas"]["BaseOneRate"];
            /** @description ChargeBearer
             *     Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
             *      */
            ChrgBr: components["schemas"]["ChargeBearerType1Code"];
            /** @description ChargesInformation
             *     Provides information on the charges to be paid by the charge bearer(s) related to the payment transaction
             *      */
            ChrgsInf?: components["schemas"]["Charges16"];
            /** @description Debtor
             *     Party that owes an amount of money to the (ultimate) creditor.
             *      */
            Dbtr: components["schemas"]["PartyIdentification272"];
            /** @description DebtorAccount
             *     Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
             *      */
            DbtrAcct?: components["schemas"]["CashAccount40"];
            /** @description DebtorAgent
             *     Financial institution servicing an account for the debtor.
             *      */
            DbtrAgt: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description CreditorAgent
             *     Financial institution servicing an account for the creditor.
             *      */
            CdtrAgt: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description Creditor
             *     Party to which an amount of money is due.
             *      */
            Cdtr: components["schemas"]["PartyIdentification272"];
            /** @description CreditorAccount
             *     Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
             *      */
            CdtrAcct?: components["schemas"]["CashAccount40"];
            /** @description InstructionForCreditorAgent
             *     Set of elements used to provide information on the remittance advice.
             *      */
            InstrForCdtrAgt?: components["schemas"]["InstructionForCreditorAgent3"];
            /** @description InstructionForNextAgent
             *     Set of elements used to provide information on the remittance advice.
             *      */
            InstrForNxtAgt?: components["schemas"]["InstructionForNextAgent1"];
            /** @description Purpose
             *     Underlying reason for the payment transaction.
             *      */
            Purp?: components["schemas"]["Purpose2Choice"];
            /** @description RegulatoryReporting
             *     Information needed due to regulatory and statutory requirements.
             *      */
            RgltryRptg?: components["schemas"]["RegulatoryReporting3"];
            /** @description Tax
             *     Provides details on the tax.
             *      */
            Tax?: components["schemas"]["TaxData1"];
            VrfctnOfTerms?: components["schemas"]["CryptographicLockChoice"];
        };
        /**
         * CreditTransferTransaction68
         * @description Provides further details specific to the individual transaction(s) included in the message.
         *
         * @example {
         *       "PmtId": {
         *         "InstrId": "INSTRID",
         *         "EndToEndId": "ENDTOENDID"
         *       },
         *       "PmtTpInf": {
         *         "LclInstrm": {
         *           "Cd": "CHQB",
         *           "Prtry": "PROPRIETARY"
         *         }
         *       },
         *       "IntrBkSttlmAmt": {
         *         "Amount": 123.45,
         *         "Ccy": "EUR"
         *       },
         *       "Dbtr": {
         *         "Nm": "Debtor Name"
         *       },
         *       "DbtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "DbtrAgt": {
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "CdtrAgt": {
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       },
         *       "Cdtr": {
         *         "Nm": "Creditor Name"
         *       },
         *       "CdtrAcct": {
         *         "Id": {
         *           "IBAN": "IBAN"
         *         }
         *       },
         *       "InstrForCdtrAgt": {
         *         "Cd": "INSTRUCTION"
         *       },
         *       "Purp": {
         *         "Cd": "CHAR"
         *       },
         *       "VrfctnOfTerms": {
         *         "Cntt": "CONTENT",
         *         "CnttTp": "PROPRIETARY"
         *       }
         *     }
         */
        CreditTransferTransaction68: {
            /** @description PaymentIdentification
             *     Set of elements used to reference a payment instruction.
             *      */
            PmtId: components["schemas"]["PaymentIdentification13"];
            /** @description PaymentTypeInformation
             *
             *      Set of elements used to further specify the type of transaction.
             *      */
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
            /** @description InterbankSettlementAmount
             *     Amount of money moved between the instructing agent and the instructed agent.
             *      */
            IntrBkSttlmAmt: components["schemas"]["ActiveCurrencyAndAmount"];
            /** @description Debtor
             *     Party that owes an amount of money to the (ultimate) creditor.
             *      */
            Dbtr: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description DebtorAccount
             *     Account used to process a payment.
             *      */
            DbtrAcct?: components["schemas"]["CashAccount40"];
            /** @description DebtorAgent
             *     Financial institution servicing an account for the debtor.
             *      */
            DbtrAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description CreditorAgent
             *     Financial institution servicing an account for the creditor.
             *      */
            CdtrAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description Creditor
             *     Party to which an amount of money is due.
             *      */
            Cdtr: components["schemas"]["BranchAndFinancialInstitutionIdentification8"];
            /** @description CreditorAccount
             *     Account to which a credit entry is made.
             *      */
            CdtrAcct?: components["schemas"]["CashAccount40"];
            /** @description InstructionForCreditorAgent
             *     Set of elements used to provide information on the remittance advice.
             *      */
            InstrForCdtrAgt?: components["schemas"]["InstructionForCreditorAgent3"];
            /** @description Purpose
             *     Underlying reason for the payment transaction.
             *      */
            Purp?: components["schemas"]["Purpose2Choice"];
            /** @description VerificationOfTerms
             *     Set of elements used to provide information on the underlying terms of the transaction.
             *      */
            VrfctnOfTerms?: components["schemas"]["CryptographicLockChoice"];
        };
        /**
         * CryptographicLockChoice
         * @description NOTE: Unsure on description.
         *
         * @example {
         *       "IlpV4PrepPacket": "1234567890ABCDEF"
         *     }
         */
        CryptographicLockChoice: {
            IlpV4PrepPacket?: components["schemas"]["hexBinary"];
            Sh256Sgntr?: components["schemas"]["Exact32HexBinaryText"];
        } & (unknown | unknown);
        /**
         * DateAndPlaceOfBirth1
         * @description Details about date and place of birth of a person.
         *
         * @example {
         *       "BirthDt": "1970-01-01",
         *       "PrvcOfBirth": "ON",
         *       "CityOfBirth": "Ottawa",
         *       "CtryOfBirth": "CA"
         *     }
         */
        DateAndPlaceOfBirth1: {
            /** @description BirthDate
             *     Date on which a person is born.
             *      */
            BirthDt: components["schemas"]["ISODate"];
            /** @description ProvinceOfBirth
             *     Province where a person was born.
             *      */
            PrvcOfBirth?: components["schemas"]["Max35Text"];
            /** @description CityOfBirth
             *     City where a person was born.
             *      */
            CityOfBirth: components["schemas"]["Max35Text"];
            /** @description CountryOfBirth
             *     Country where a person was born.
             *      */
            CtryOfBirth: components["schemas"]["CountryCode"];
        };
        /**
         * DatePeriod2
         * @description Range of time defined by a start date and an end date.
         *
         * @example {
         *       "FrDt": "2022-01-01T00:00:00.000Z",
         *       "ToDt": "2022-12-31T23:59:59.999Z"
         *     }
         */
        DatePeriod2: {
            /** @description FromDate
             *     Start date of the range.
             *      */
            FrDt: components["schemas"]["ISODate"];
            /** @description ToDate
             *     End date of the range.
             *      */
            ToDt: components["schemas"]["ISODate"];
        };
        /**
         * ErrorCode
         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         * @example 5100
         */
        ErrorCode: string;
        /**
         * ErrorDescription
         * @description Error description string.
         */
        ErrorDescription: string;
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        ErrorInformation: {
            errorCode: components["schemas"]["ErrorCode"];
            errorDescription: components["schemas"]["ErrorDescription"];
            extensionList?: components["schemas"]["ExtensionList"];
        };
        /**
         * ErrorInformationResponse
         * @description Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
         *
         */
        ErrorInformationResponse: {
            errorInformation?: components["schemas"]["ErrorInformation"];
        };
        /**
         * Exact32HexBinaryText
         * @description Specifies a hexadecimal string with a length of 32 characters.
         *
         * @example 1234567890ABCDEF1234567890ABCDEF
         */
        Exact32HexBinaryText: string;
        /**
         * Exact4AlphaNumericText
         * @description Specifies an alphanumeric string with a length of 4 characters.
         *
         * @example 1234
         */
        Exact4AlphaNumericText: string;
        /**
         * Execute_FIToFICustomerCreditTransferV13
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 12345,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "PmtInstrXpryDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "SttlmInf": {
         *           "SttlmMtd": "INDA",
         *           "SttlmAcct": {
         *             "Id": {
         *               "IBAN": 123
         *             }
         *           },
         *           "SttlmAcctOwnr": {
         *             "Nm": "John Doe"
         *           },
         *           "SttlmAcctSvcr": {
         *             "BICFI": 123
         *           }
         *         },
         *         "CdtTrfTxInf": {
         *           "PmtId": {
         *             "InstrId": 123,
         *             "EndToEndId": 123
         *           },
         *           "PmtTpInf": {
         *             "InstrPrty": "NORM"
         *           },
         *           "InstdAmt": {
         *             "Amt": 123,
         *             "Ccy": "EUR"
         *           },
         *           "ChrgBr": "SLEV",
         *           "CdtrAgt": {
         *             "FinInstnId": {
         *               "BICFI": 123
         *             }
         *           },
         *           "Cdtr": {
         *             "Nm": "John Doe"
         *           },
         *           "CdtrAcct": {
         *             "Id": {
         *               "IBAN": 123
         *             }
         *           },
         *           "RmtInf": {
         *             "Ustrd": "Test"
         *           }
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 123,
         *           "EndToEndId": 123
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM"
         *         },
         *         "InstdAmt": {
         *           "Amt": 123,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": 123
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "John Doe"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": 123
         *           }
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Test"
         *         }
         *       }
         *     }
         */
        Execute_FIToFICustomerCreditTransferV13: {
            /** @description GroupHeader.
             *      */
            GrpHdr: components["schemas"]["GroupHeader129"];
            /** @description CreditTransferTransactionInformation.
             *      */
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction67"];
        };
        /**
         * Extension
         * @description Data model for the complex type Extension.
         */
        Extension: {
            key: components["schemas"]["ExtensionKey"];
            value: components["schemas"]["ExtensionValue"];
        };
        /**
         * ExtensionKey
         * @description Extension key.
         */
        ExtensionKey: string;
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         *
         */
        ExtensionList: {
            /** @description Number of Extension elements. */
            extension: components["schemas"]["Extension"][];
        };
        /**
         * ExtensionValue
         * @description Extension value.
         */
        ExtensionValue: string;
        /**
         * ExternalAccountIdentification1Code
         * @description Specifies the external account identification scheme name code in the format of character string with a maximum length of 4 characters.
         *
         * @example 1234
         */
        ExternalAccountIdentification1Code: string;
        /**
         * ExternalCashAccountType1Code
         * @description Specifies the nature, or use, of the cash account in the format of character string with a maximum length of 4 characters.
         *
         * @example 1234
         */
        ExternalCashAccountType1Code: string;
        /**
         * @description Specifies the category purpose, as published in an external category purpose code list.
         *     External code sets can be downloaded from www.iso20022.org.
         *
         * @example 1234
         */
        ExternalCategoryPurpose1Code: string;
        /**
         * ExternalChargeType1Code
         * @example 1234
         */
        ExternalChargeType1Code: string;
        /**
         * ExternalClearingSystemIdentification1Code
         * @example 12345
         */
        ExternalClearingSystemIdentification1Code: string;
        /**
         * ExternalCreditorAgentInstruction1Code
         * @example 1234
         */
        ExternalCreditorAgentInstruction1Code: string;
        /**
         * ExternalFinancialInstitutionIdentification1Code
         * @example 1234
         */
        ExternalFinancialInstitutionIdentification1Code: string;
        /**
         * ExternalLocalInstrument1Code
         * @example 12345
         */
        ExternalLocalInstrument1Code: string;
        /**
         * ExternalOrganisationIdentification1Code
         * @example 1234
         */
        ExternalOrganisationIdentification1Code: string;
        /**
         * ExternalPaymentTransactionStatus1Code
         * @example 1234
         */
        ExternalPaymentTransactionStatus1Code: string;
        /**
         * ExternalPersonIdentification1Code
         * @example 1234
         */
        ExternalPersonIdentification1Code: string;
        /**
         * ExternalProxyAccountType1Code
         * @example 1234
         */
        ExternalProxyAccountType1Code: string;
        /**
         * ExternalPurpose1Code
         * @example 1234
         */
        ExternalPurpose1Code: string;
        /**
         * ExternalServiceLevel1Code
         * @example 1234
         */
        ExternalServiceLevel1Code: string;
        /**
         * ExternalStatusReason1Code
         * @example 1234
         */
        ExternalStatusReason1Code: string;
        /**
         * ExternalVerificationReason1Code
         * @example 1234
         */
        ExternalVerificationReason1Code: string;
        /**
         * FinancialIdentificationSchemeName1Choice
         * @example {
         *       "Cd": "BIC"
         *     }
         */
        FinancialIdentificationSchemeName1Choice: {
            /** @description Code
             *     Name of the identification scheme, in a coded form as published in an external list.
             *      */
            Cd?: components["schemas"]["ExternalFinancialInstitutionIdentification1Code"];
            /** @description Proprietary
             *     Name of the identification scheme, in a free text form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * FinancialInstitutionIdentification18
         * @example {
         *       "BICFI": "J5BMVH7D",
         *       "ClrSysMmbId": {
         *         "ClrSysId": 1234,
         *         "MmbId": 123
         *       },
         *       "LEI": 123,
         *       "Nm": "Name",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Department",
         *         "SubDept": "Sub department",
         *         "StrtNm": "Street name",
         *         "BldgNb": "Building number",
         *         "PstCd": "Post code",
         *         "TwnNm": "Town name",
         *         "CtrySubDvsn": "Country subdivision",
         *         "Ctry": "Country",
         *         "AdrLine": "Address line"
         *       },
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": 123,
         *           "Prtry": 123
         *         },
         *         "Issr": 123
         *       }
         *     }
         */
        FinancialInstitutionIdentification18: {
            /** @description BICFI
             *     Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)"
             *      */
            BICFI?: components["schemas"]["BICFIDec2014Identifier"];
            /** @description ClearingSystemMemberIdentification
             *     Information used to identify a member within a clearing system
             *      */
            ClrSysMmbId?: components["schemas"]["ClearingSystemMemberIdentification2"];
            /** @description LEI
             *     Legal entity identifier of the financial institution.
             *      */
            LEI?: components["schemas"]["LEIIdentifier"];
            /** @description Name
             *     Name by which an agent is known and which is usually used to identify that agent
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description PostalAddress
             *     Information that locates and identifies a specific address, as defined by postal services.
             *      */
            PstlAdr?: components["schemas"]["PostalAddress24"];
            /** @description Other
             *     Unique identification of an agent, as assigned by an institution, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericFinancialIdentification1"];
        };
        /**
         * FinancialInstitutionIdentification23
         * @example {
         *       "BICFI": "J5BMVH7D",
         *       "ClrSysMmbId": {
         *         "ClrSysId": {
         *           "Cd": "CHQB"
         *         },
         *         "MmbId": 123456789
         *       },
         *       "LEI": 123,
         *       "Nm": "Name",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Department",
         *         "SubDept": "Sub department",
         *         "StrtNm": "Street name",
         *         "BldgNb": "Building number",
         *         "PstCd": "Post code",
         *         "TwnNm": "Town name",
         *         "CtrySubDvsn": "Country subdivision",
         *         "Ctry": "Country",
         *         "AdrLine": "Address line"
         *       },
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "CHQB"
         *         },
         *         "Issr": 123
         *       }
         *     }
         */
        FinancialInstitutionIdentification23: {
            /** @description BICFI
             *     Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)"
             *      */
            BICFI?: components["schemas"]["BICFIDec2014Identifier"];
            /** @description ClearingSystemMemberIdentification
             *     Information used to identify a member within a clearing system
             *      */
            ClrSysMmbId?: components["schemas"]["ClearingSystemMemberIdentification2"];
            /** @description LEI
             *     Legal entity identifier of the financial institution.
             *      */
            LEI?: components["schemas"]["LEIIdentifier"];
            /** @description Name
             *     Name by which an agent is known and which is usually used to identify that agent
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description PostalAddress
             *     Information that locates and identifies a specific address, as defined by postal services.
             *      */
            PstlAdr?: components["schemas"]["PostalAddress27"];
            /** @description Other
             *     Unique identification of an agent, as assigned by an institution, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericFinancialIdentification1"];
        };
        /**
         * FxRequest_FICreditTransferProposal
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 12345,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "TtlIntrBkSttlmAmt": {
         *           "Ccy": "EUR",
         *           "Value": 100
         *         },
         *         "SttlmInf": {
         *           "SttlmMtd": "INDA",
         *           "SttlmAcct": {
         *             "Id": {
         *               "IBAN": "BE71096123456769"
         *             },
         *             "Ccy": "EUR"
         *           },
         *           "SttlmAcctOwnr": {
         *             "Nm": "Name"
         *           },
         *           "SttlmAcctSvcr": {
         *             "Nm": "Name"
         *           },
         *           "SttlmAgt": {
         *             "FinInstnId": {
         *               "BICFI": "BIC"
         *             }
         *           }
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM",
         *           "CtgyPurp": "CASH"
         *         },
         *         "CdtTrfTxInf": {
         *           "PmtId": {
         *             "InstrId": 12345,
         *             "EndToEndId": 12345
         *           },
         *           "Amt": {
         *             "InstdAmt": {
         *               "Ccy": "EUR",
         *               "Value": 100
         *             }
         *           },
         *           "Cdtr": {
         *             "Nm": "Name"
         *           },
         *           "CdtrAcct": {
         *             "Id": {
         *               "IBAN": "BE71096123456769"
         *             },
         *             "Ccy": "EUR"
         *           },
         *           "CdtrAgt": {
         *             "FinInstnId": {
         *               "BICFI": "BIC"
         *             }
         *           },
         *           "Dbtr": {
         *             "Nm": "Name"
         *           },
         *           "DbtrAcct": {
         *             "Id": {
         *               "IBAN": "BE71096123456769"
         *             },
         *             "Ccy": "EUR"
         *           },
         *           "DbtrAgt": {
         *             "FinInstnId": {
         *               "BICFI": "BIC"
         *             }
         *           },
         *           "IntrBkSttlmAmt": {
         *             "Ccy": "EUR",
         *             "Value": 100
         *           },
         *           "PmtTpInf": {
         *             "InstrPrty": "NORM",
         *             "ClrChanl": "RTGS",
         *             "SvcLvl": {
         *               "Cd": "SEPA"
         *             },
         *             "LclInstrm": {
         *               "Cd": "CORE"
         *             },
         *             "CtgyPurp": {
         *               "Cd": "CASH"
         *             }
         *           },
         *           "RgltryRptg": {
         *             "Dbtr": {
         *               "Nm": "Name"
         *             },
         *             "DbtrAcct": {
         *               "Id": {
         *                 "IBAN": "BE71096123456769"
         *               },
         *               "Ccy": "EUR"
         *             },
         *             "DbtrAgt": {
         *               "FinInstnId": {
         *                 "BICFI": "BIC"
         *               }
         *             },
         *             "Cdtr": {
         *               "Nm": "Name"
         *             }
         *           }
         *         }
         *       }
         *     }
         */
        FxRequest_FICreditTransferProposal: {
            /** @description GroupHeader
             *     Set of characteristics shared by all individual transactions included in the message.
             *      */
            GrpHdr: components["schemas"]["GroupHeader113"];
        };
        /**
         * FxResponse_FICreditTransferConfirmation
         * @example {
         *       "GrpHdr": {
         *         "MsgId": "20191122-123456",
         *         "CreDtTm": "2019-11-22T12:34:56",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name"
         *         },
         *         "MsgRcpt": {
         *           "Nm": "Message Recipient Name"
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": "20191122-123456",
         *           "EndToEndId": "20191122-123456"
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM",
         *           "CtgyPurp": "SUPP"
         *         },
         *         "IntrBkSttlmAmt": {
         *           "Amt": 100,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "Cdtr": {
         *           "Nm": "Creditor Name"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BNBABEBB"
         *           }
         *         },
         *         "CdtrAgtAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "Dbtr": {
         *           "Nm": "Debtor Name"
         *         },
         *         "DbtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "DbtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BNBABEBB"
         *           }
         *         },
         *         "DbtrAgtAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Tp": {
         *             "Cd": "CACC"
         *           },
         *           "Ccy": "EUR",
         *           "Nm": "My account"
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Remittance Information"
         *         },
         *         "RgltryRptg": {
         *           "Dbtr": {
         *             "Nm": "Debtor Name"
         *           },
         *           "DbtrAcct": {
         *             "Id": {
         *               "IBAN": "BE71096123456769"
         *             },
         *             "Tp": {
         *               "Cd": "CACC"
         *             },
         *             "Ccy": "EUR",
         *             "Nm": "My account"
         *           }
         *         }
         *       }
         *     }
         */
        FxResponse_FICreditTransferConfirmation: {
            /** @description GroupHeader
             *     Set of characteristics shared by all individual transactions included in the message.
             *      */
            GrpHdr: components["schemas"]["GroupHeader113"];
            /** @description CreditTransferTransactionInformation
             *     Set of elements providing information specific to the individual credit transfer(s).
             *      */
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction68"];
        };
        /**
         * Fxecute_FinancialInstitutionCreditTransferV12
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 20191113001,
         *         "CreDtTm": "2019-11-13T10:00:00",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 1000,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": {
         *                 "Id": 123456789,
         *                 "SchmeNm": {
         *                   "Cd": "BBA"
         *                 }
         *               }
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         },
         *         "DbtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "AAAAAAAA"
         *           }
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "CCCCCCCC"
         *           }
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 20191113001,
         *           "EndToEndId": 20191113001
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM",
         *           "CtgyPurp": {
         *             "Cd": "SUPP"
         *           }
         *         },
         *         "InstrForCdtrAgt": {
         *           "Cd": "/ACC/123456789"
         *         },
         *         "IntrBkSttlmAmt": {
         *           "Amt": 1000,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "CCCCCCCC"
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "Creditor Name"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           }
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Payment for invoice 12345"
         *         }
         *       }
         *     }
         */
        Fxecute_FinancialInstitutionCreditTransferV12: {
            /** @description GroupHeader.
             *     Set of characteristics shared by all individual transactions included in the message.
             *      */
            GrpHdr: components["schemas"]["GroupHeader129"];
            /** @description CreditTransferTransactionInformation.
             *     Set of elements providing information specific to the individual credit transfer(s).
             *      */
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction68"];
        };
        /**
         * GenericAccountIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "IBAN"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericAccountIdentification1: {
            /** @description Identification
             *     Identification assigned by an institution.
             *      */
            Id: components["schemas"]["Max34Text"];
            /** @description SchemeName
             *     Name of the identification scheme.
             *      */
            SchmeNm?: components["schemas"]["AccountSchemeName1Choice"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericFinancialIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "IBAN"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericFinancialIdentification1: {
            /** @description Identification
             *     Unique and unambiguous identification of a person.
             *      */
            Id: components["schemas"]["Max35Text"];
            /** @description SchemeName
             *     Name of the identification scheme.
             *      */
            SchmeNm?: components["schemas"]["FinancialIdentificationSchemeName1Choice"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericIdentification3
         * @example {
         *       "Id": 123,
         *       "Issr": "BIC"
         *     }
         */
        GenericIdentification3: {
            /** @description Identification
             *     Name or number assigned by an entity to enable recognition of that entity, for example, account identifier.
             *      */
            Id: components["schemas"]["Max35Text"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericIdentification30
         * @example {
         *       "Id": 1234,
         *       "Issr": "BIC",
         *       "SchmeNm": "BICFI"
         *     }
         */
        GenericIdentification30: {
            /** @description Identification
             *     Proprietary information, often a code, issued by the data source scheme issuer
             *      */
            Id: components["schemas"]["Exact4AlphaNumericText"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr: components["schemas"]["Max35Text"];
            /** @description SchemeName
             *     Short textual description of the scheme.
             *      */
            SchmeNm?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericOrganisationIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "BIC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericOrganisationIdentification1: {
            /** @description Identification
             *     Identification assigned by an institution.
             *      */
            Id: components["schemas"]["Max35Text"];
            /** @description SchemeName
             *     Name of the identification scheme.
             *      */
            SchmeNm?: components["schemas"]["OrganisationIdentificationSchemeName1Choice"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericOrganisationIdentification3
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "BIC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericOrganisationIdentification3: {
            /** @description Identification
             *     Identification assigned by an institution.
             *      */
            Id: components["schemas"]["Max256Text"];
            /** @description SchemeName
             *     Name of the identification scheme. */
            SchmeNm?: components["schemas"]["OrganisationIdentificationSchemeName1Choice"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericPersonIdentification1
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "DRLC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericPersonIdentification1: {
            /** @description Identification
             *     Unique and unambiguous identification of a person.
             *      */
            Id: components["schemas"]["Max35Text"];
            /** @description SchemeName
             *     Name of the identification scheme.
             *      */
            SchmeNm?: components["schemas"]["PersonIdentificationSchemeName1Choice"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GenericPersonIdentification2
         * @example {
         *       "Id": 123,
         *       "SchmeNm": {
         *         "Cd": "DRLC"
         *       },
         *       "Issr": "BIC"
         *     }
         */
        GenericPersonIdentification2: {
            /** @description Identification
             *     Unique and unambiguous identification of a person.
             *      */
            Id: components["schemas"]["Max256Text"];
            /** @description SchemeName
             *     Name of the identification scheme.
             *      */
            SchmeNm?: components["schemas"]["PersonIdentificationSchemeName1Choice"];
            /** @description Issuer
             *     Entity that assigns the identification.
             *      */
            Issr?: components["schemas"]["Max35Text"];
        };
        /**
         * GetPartiesError_IdentificationVerificationReportV03
         * @example {
         *       "Assgnmt": {
         *         "Id": 123,
         *         "CreDtTm": "2013-03-07T16:30:00",
         *         "Assgnr": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "Assgne": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       },
         *       "Rpt": {
         *         "Id": 123,
         *         "CreDtTm": "2013-03-07T16:30:00",
         *         "RptgPty": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "RptdPty": {
         *           "Id": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "IBAN"
         *             },
         *             "Issr": "BIC"
         *           }
         *         },
         *         "RptdDoc": {
         *           "Nb": 123,
         *           "RltdDt": "2013-03-07",
         *           "RltdDtTp": {
         *             "Cd": 123
         *           }
         *         },
         *         "Rsn": {
         *           "Cd": 123,
         *           "Prtry": 123
         *         }
         *       },
         *       "SplmtryData": {
         *         "PlcAndNm": 123,
         *         "Envlp": 123,
         *         "RltdDt": "2013-03-07",
         *         "RltdDtTp": {
         *           "Cd": 123
         *         }
         *       }
         *     }
         */
        GetPartiesError_IdentificationVerificationReportV03: {
            /** @description Assignment
             *     Information related to the identification assignment.
             *      */
            Assgnmt: components["schemas"]["IdentificationAssignment3"];
            /** @description Report
             *     Information concerning the verification of the identification data for which verification was requested.
             *      */
            Rpt: components["schemas"]["VerificationReport4"];
            /** @description SupplementaryData
             *     Additional information that cannot be captured in the structured elements and/or any other specific block.
             *      */
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * GetParties_IdentificationVerificationReportV03
         * @example {
         *       "Assgnmt": {
         *         "MsgId": 123,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "Assgnr": {
         *           "OrgId": {
         *             "Othr": {
         *               "Id": 123,
         *               "SchmeNm": {
         *                 "Cd": "BIC"
         *               },
         *               "Issr": "BIC"
         *             }
         *           }
         *         },
         *         "Assgne": {
         *           "OrgId": {
         *             "Othr": {
         *               "Id": "DFSPID"
         *             }
         *           }
         *         }
         *       },
         *       "Rpt": {
         *         "OrgnlId": 12345678,
         *         "Vrfctn": true,
         *         "UpdtdPtyAndAcctId": {
         *           "Pty": {
         *             "Nm": "John Doe",
         *             "PstlAdr": {
         *               "AdrTp": "ADDR",
         *               "Dept": "Dept",
         *               "SubDept": "SubDept",
         *               "StrtNm": "StrtNm",
         *               "BldgNb": "BldgNb",
         *               "BldgNm": "BldgNm",
         *               "Flr": "Flr",
         *               "PstBx": "PstBx",
         *               "Room": "Room",
         *               "PstCd": "PstCd",
         *               "TwnNm": "TwnNm",
         *               "TwnLctnNm": "TwnLctnNm",
         *               "DstrctNm": "DstrctNm",
         *               "CtrySubDvsn": "CtrySubDvsn",
         *               "Ctry": "Ctry",
         *               "AdrLine": "AdrLine"
         *             },
         *             "Id": {
         *               "OrgId": {
         *                 "Othr": {
         *                   "Id": 18761231234
         *                 },
         *                 "SchmeNm": {
         *                   "Prtry": "MSISDN"
         *                 }
         *               }
         *             },
         *             "CtryOfRes": "BE",
         *             "CtctDtls": {
         *               "NmPrfx": "Mr",
         *               "Nm": "John Doe",
         *               "PhneNb": "+123-123-321",
         *               "MobNb": "+123-123-321",
         *               "FaxNb": "+123-123-321",
         *               "EmailAdr": "example@example.com"
         *             }
         *           }
         *         }
         *       }
         *     }
         */
        GetParties_IdentificationVerificationReportV03: {
            /** @description Assignment
             *     Identifies the identification assignment.
             *      */
            Assgnmt: components["schemas"]["IdentificationAssignment3"];
            /** @description Report
             *     Information concerning the verification of the identification data for which verification was requested.
             *      */
            Rpt: components["schemas"]["VerificationReport4"];
            /** @description SupplementaryData
             *     Additional information that cannot be captured in the structured elements and/or any other specific block.
             *      */
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * GroupHeader113
         * @description Set of characteristics shared by all individual transactions included in the message.
         *
         * @example {
         *       "MsgId": 12345,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "NbOfTxs": 1,
         *       "TtlIntrBkSttlmAmt": {
         *         "Ccy": "EUR",
         *         "Value": 100
         *       },
         *       "SttlmInf": {
         *         "SttlmMtd": "INDA",
         *         "SttlmAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Ccy": "EUR"
         *         },
         *         "SttlmAcctOwnr": {
         *           "Nm": "Name"
         *         },
         *         "SttlmAcctSvcr": {
         *           "Nm": "Name"
         *         },
         *         "SttlmAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BIC"
         *           }
         *         }
         *       },
         *       "PmtTpInf": {
         *         "InstrPrty": "NORM",
         *         "CtgyPurp": "CASH"
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 12345,
         *           "EndToEndId": 12345
         *         },
         *         "Amt": {
         *           "InstdAmt": {
         *             "Ccy": "EUR",
         *             "Value": 100
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "Name"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Ccy": "EUR"
         *         },
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BIC"
         *           }
         *         },
         *         "CdtrAgtAcct": {
         *           "Id": {
         *             "IBAN": "BE71096123456769"
         *           },
         *           "Ccy": "EUR"
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Test"
         *         }
         *       }
         *     }
         */
        GroupHeader113: {
            MsgId: components["schemas"]["Max35Text"];
            CreDtTm: components["schemas"]["ISODateTime"];
            NbOfTxs: components["schemas"]["Max15NumericText"];
            TtlIntrBkSttlmAmt?: components["schemas"]["ActiveCurrencyAndAmount"];
            SttlmInf: components["schemas"]["SettlementInstruction15"];
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction68"];
        };
        /**
         * GroupHeader120
         * @description Set of characteristics shared by all individual transactions included in the message.
         *
         * @example {
         *       "MsgId": 12345,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "TxInfAndSts": {
         *         "StsId": 12345,
         *         "OrgnlInstrId": 12345,
         *         "OrgnlEndToEndId": 12345,
         *         "OrgnlTxId": 12345,
         *         "OrgnlUETR": "123e4567-e89b-12d3-a456-426614174000",
         *         "TxSts": "RJCT",
         *         "StsRsnInf": {
         *           "Rsn": "RSN",
         *           "AddtlInf": "ADDITIONAL"
         *         },
         *         "AccptncDtTm": "2020-01-01T00:00:00Z",
         *         "AcctSvcrRef": "ACCTSVCRREF",
         *         "ClrSysRef": "CLRSYSREF",
         *         "ExctnConf": "1234567890ABCDEF",
         *         "SplmtryData": {
         *           "PlcAndNm": "PLACE",
         *           "Envlp": "ENVELOPE"
         *         }
         *       }
         *     }
         */
        GroupHeader120: {
            /** @description MessageIdentification
             *     Definition: Point to point reference, as assigned by the instructing party, and sent to the next party in the chain to unambiguously identify the message.
             *     Usage: The instructing party has to make sure that MessageIdentification is unique per instructed party for a pre-agreed period.
             *      */
            MsgId: components["schemas"]["Max35Text"];
            /** @description CreationDateTime
             *     Date and time at which the message was created.
             *      */
            CreDtTm: components["schemas"]["ISODateTime"];
            /** @description TransactionInformationAndStatus
             *     Definition: Agent that instructs the next party in the chain to carry out the (set of) instruction(s).
             *     Usage: The instructing agent is the party sending the status message and not the party that sent the original instruction that is being reported on.
             *      */
            TxInfAndSts?: components["schemas"]["PaymentTransaction163"];
        };
        /**
         * GroupHeader129
         * @description Set of characteristics shared by all individual transactions included in the message.
         *
         * @example {
         *       "MsgId": 12345,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "PmtInstrXpryDtTm": "2020-01-01T00:00:00Z",
         *       "NbOfTxs": 1,
         *       "SttlmInf": {
         *         "SttlmMtd": "INDA",
         *         "SttlmAcct": {
         *           "Id": {
         *             "IBAN": 123
         *           }
         *         },
         *         "SttlmAcctOwnr": {
         *           "Nm": "John Doe"
         *         },
         *         "SttlmAcctSvcr": {
         *           "BICFI": 123
         *         }
         *       },
         *       "CdtTrfTxInf": {
         *         "PmtId": {
         *           "InstrId": 123,
         *           "EndToEndId": 123
         *         },
         *         "PmtTpInf": {
         *           "InstrPrty": "NORM"
         *         },
         *         "InstdAmt": {
         *           "Amt": 123,
         *           "Ccy": "EUR"
         *         },
         *         "ChrgBr": "SLEV",
         *         "CdtrAgt": {
         *           "FinInstnId": {
         *             "BICFI": 123
         *           }
         *         },
         *         "Cdtr": {
         *           "Nm": "John Doe"
         *         },
         *         "CdtrAcct": {
         *           "Id": {
         *             "IBAN": 123
         *           }
         *         },
         *         "RmtInf": {
         *           "Ustrd": "Test"
         *         }
         *       }
         *     }
         */
        GroupHeader129: {
            MsgId: components["schemas"]["Max35Text"];
            CreDtTm: components["schemas"]["ISODateTime"];
            PmtInstrXpryDtTm?: components["schemas"]["ISODateTime"];
            NbOfTxs: components["schemas"]["Max15NumericText"];
            SttlmInf: components["schemas"]["SettlementInstruction15"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction67"];
        };
        /**
         * IBAN2007Identifier
         * @description The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution as described in the 2007 edition of the ISO 13616 standard "Banking and related financial services -
         *     International Bank Account Number (IBAN)" and replaced by the more recent edition of the standard.
         *
         * @example FR1420041010050500013M02606
         */
        IBAN2007Identifier: string;
        /**
         * ISODate
         * Format: date
         * @description A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
         *
         * @example 2013-03-07
         */
        ISODate: string;
        /**
         * ISODateTime
         * Format: datetime
         * @description A particular point in the progression of time defined by a mandatory
         *     date and a mandatory time component, expressed in either UTC time
         *     format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format
         *     (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format
         *     (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in
         *     "XML Schema Part 2: Datatypes Second Edition -
         *     W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
         *
         *     Note on the time format:
         *     1) beginning / end of calendar day
         *     00:00:00 = the beginning of a calendar day
         *     24:00:00 = the end of a calendar day
         *
         *     2) fractions of second in time format
         *     Decimal fractions of seconds may be included. In this case, the
         *     involved parties shall agree on the maximum number of digits that are allowed.
         *
         * @example 2013-03-07T14:44:30.000Z
         */
        ISODateTime: string;
        /**
         * ISOYear
         * @description Year represented by YYYY (ISO 8601).
         *
         * @example 2019
         */
        ISOYear: string;
        /**
         * IdentificationAssignment3
         * @example {
         *       "MsgId": 123,
         *       "CreDtTm": "2020-01-01T00:00:00Z",
         *       "Assgnr": {
         *         "OrgId": {
         *           "Othr": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "BIC"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       },
         *       "Assgne": {
         *         "OrgId": {
         *           "Othr": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Cd": "BIC"
         *             },
         *             "Issr": "BIC"
         *           }
         *         }
         *       }
         *     }
         */
        IdentificationAssignment3: {
            MsgId: components["schemas"]["Max35Text"];
            /** @description CreationDateTime
             *     Date and time at which the identification assignment was created.
             *      */
            CreDtTm: components["schemas"]["ISODateTime"];
            /** @description Assignor
             *     Party that assigns the identification assignment to another party. This is also the sender of the message.
             *      */
            Assgnr: components["schemas"]["Party40Choice"];
            /** @description Assignee
             *     Party that the identification assignment is assigned to. This is also the receiver of the message.
             *      */
            Assgne: components["schemas"]["Party40Choice"];
        };
        /**
         * IdentificationInformation4
         * @example {
         *       "Pty": {
         *         "Id": {
         *           "OrgId": {
         *             "AnyBIC": {
         *               "BICFI": "BICFI"
         *             }
         *           }
         *         },
         *         "CtryOfRes": "FI"
         *       },
         *       "Acct": {
         *         "Id": {
         *           "IBAN": "FI2112345600000785"
         *         }
         *       },
         *       "Agt": {
         *         "FinInstnId": {
         *           "BICFI": "BICFI"
         *         }
         *       }
         *     }
         */
        IdentificationInformation4: {
            /** @description Party
             *     Account owner that owes an amount of money or to whom an amount of money is due.
             *      */
            Pty?: components["schemas"]["PartyIdentification135"];
            /** @description Account
             *     Unambiguous identification of the account of a party.
             *      */
            Acct?: components["schemas"]["CashAccount40"];
            /** @description Agent
             *     Financial institution servicing an account for a party.
             *      */
            Agt?: components["schemas"]["BranchAndFinancialInstitutionIdentification6"];
        };
        /**
         * IdentificationVerificationIndicator
         * @description Definition: Identifies whether the party and/or account information received is correct.
         *
         *     • Meaning When True: Indicates that the identification information received is correct.
         *     • Meaning When False: Indicates that the identification information received is incorrect
         *
         * @example true
         */
        IdentificationVerificationIndicator: boolean;
        /**
         * Instruction4Code
         * @description Specifies further instructions concerning the processing of a payment instruction, provided by the sending clearing agent to the next agent(s).
         *     PHOA PhoneNextAgent Please advise/contact next agent by phone.
         *     TELA TelecomNextAgent Please advise/contact next agent by the most efficient means of telecommunication.
         *
         * @example PHOA
         * @enum {string}
         */
        Instruction4Code: "PHOA" | "TELA";
        /**
         * InstructionForCreditorAgent3
         * @description Further information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor agent.
         *
         * @example {
         *       "Cd": "PHOA",
         *       "InstrInf": "Please advise/contact next agent by phone."
         *     }
         */
        InstructionForCreditorAgent3: {
            /** @description Code
             *     Coded information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor's agent.
             *      */
            Cd?: components["schemas"]["ExternalCreditorAgentInstruction1Code"];
            /** @description InstructionInformation
             *     Further information complementing the coded instruction or instruction to the creditor's agent that is bilaterally agreed or specific to a user community.
             *      */
            InstrInf?: components["schemas"]["Max140Text"];
        };
        /**
         * InstructionForNextAgent1
         * @description Further information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor agent.
         *
         * @example {
         *       "Cd": "PHOA",
         *       "InstrInf": "Please advise/contact next agent by phone"
         *     }
         */
        InstructionForNextAgent1: {
            /** @description Code
             *     Coded information related to the processing of the payment instruction, provided by the initiating party, and intended for the next agent in the payment chain.
             *      */
            Cd?: components["schemas"]["Instruction4Code"];
            /** @description InstructionInformation
             *     Further information complementing the coded instruction or instruction to the next agent that is bilaterally agreed or specific to a user community.
             *      */
            InstrInf?: components["schemas"]["Max140Text"];
        };
        /**
         * LEIIdentifier
         * @description Legal Entity Identifier is a code allocated to a party as described in ISO 17442 "Financial Services - Legal Entity Identifier (LEI)". ^([0-9A-Z]{18,18}[0-9]{2,2})$
         *
         * @example 529900T8BM49AURSDO55
         */
        LEIIdentifier: string;
        /**
         * LocalInstrument2Choice
         * @example {
         *       "Cd": "CH03"
         *     }
         */
        LocalInstrument2Choice: {
            /** @description Code
             *     Specifies the local instrument, as published in an external local instrument code list.
             *      */
            Cd?: components["schemas"]["ExternalLocalInstrument1Code"];
            /** @description Proprietary
             *     Specifies the local instrument, as a proprietary code
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * Max105Text
         * @description Specifies a character string with a maximum length of 105 characters.
         *
         * @example 12345
         */
        Max105Text: string;
        /**
         * Max10Text
         * @description Specifies a character string with a maximum length of 10 characters.
         *
         * @example 1234567890
         */
        Max10Text: string;
        /**
         * Max128Text
         * @description Specifies a character string with a maximum length of 128 characters.
         *
         * @example 12345
         */
        Max128Text: string;
        /**
         * Max140Text
         * @description Specifies a character string with a maximum length of 140 characters.
         *
         * @example 12345
         */
        Max140Text: string;
        /**
         * Max15NumericText
         * @description Specifies a numeric string with a maximum length of 15 digits.
         *
         * @example 123456789012345
         */
        Max15NumericText: string;
        /**
         * Max16Text
         * @description Specifies a character string with a maximum length of 16 characters.
         *
         * @example 1234567890123456
         */
        Max16Text: string;
        /**
         * Max2048Text
         * @description Specifies a character string with a maximum length of 2048 characters.
         *
         * @example 2048
         */
        Max2048Text: string;
        /**
         * Max256Text
         * @description Specifies a character string with a maximum length of 256 characters.
         *
         * @example 256
         */
        Max256Text: string;
        /**
         * Max34Text
         * @description Specifies a character string with a maximum length of 34 characters.
         *
         * @example 1.2345678901234568e+33
         */
        Max34Text: string;
        /**
         * Max350Text
         * @description Specifies a character string with a maximum length of 350 characters.
         *
         * @example 350
         */
        Max350Text: string;
        /**
         * Max35Text
         * @description Specifies a character string with a maximum length of 35 characters.
         *
         * @example 1.234567890123457e+34
         */
        Max35Text: string;
        /**
         * Max4Text
         * @description Specifies a character string with a maximum length of 4 characters.
         *
         * @example 1234
         */
        Max4Text: string;
        /**
         * Max70Text
         * @description Specifies a character string with a maximum length of 70 characters.
         *
         * @example 1.2345678901234567e+99
         */
        Max70Text: string;
        /**
         * @description Specifies the terms used to formally address a person.
         *
         * @example DOCT
         * @enum {string}
         */
        NamePrefix2Code: "DOCT" | "MADM" | "MISS" | "MIST" | "MIKS";
        /**
         * Number
         * @example 256
         */
        Number: string;
        /**
         * OrganisationIdentification29
         * @description Unique and unambiguous way to identify an organisation.
         *
         * @example {
         *       "AnyBIC": "BICFI",
         *       "LEI": "529900T8BM49AURSDO55",
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "BIC"
         *         },
         *         "Issr": "BIC"
         *       }
         *     }
         */
        OrganisationIdentification29: {
            /** @description AnyBIC
             *     Business identification code of the organisation.
             *      */
            AnyBIC?: components["schemas"]["AnyBICDec2014Identifier"];
            /** @description LEI
             *     Legal entity identification as an alternate identification for a party.
             *      */
            LEI?: components["schemas"]["LEIIdentifier"];
            /** @description Other
             *     Unique identification of an organisation, as assigned by an institution, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericOrganisationIdentification1"];
        };
        /**
         * OrganisationIdentification39
         * @description Unique and unambiguous way to identify an organisation.
         *
         * @example {
         *       "AnyBIC": "BICFI",
         *       "LEI": "529900T8BM49AURSDO55",
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "BIC"
         *         },
         *         "Issr": "BIC"
         *       }
         *     }
         */
        OrganisationIdentification39: {
            /** @description AnyBIC
             *     Business identification code of the organisation.
             *      */
            AnyBIC?: components["schemas"]["AnyBICDec2014Identifier"];
            /** @description LEI
             *     Legal entity identification as an alternate identification for a party.
             *      */
            LEI?: components["schemas"]["LEIIdentifier"];
            /** @description Other
             *     Unique identification of an organisation, as assigned by an institution, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericOrganisationIdentification3"];
        };
        /**
         * OrganisationIdentificationSchemeName1Choice
         * @description Choice of format for the organisation identification.
         *
         * @example {
         *       "Cd": "BIC"
         *     }
         */
        OrganisationIdentificationSchemeName1Choice: {
            /** @description Code
             *     Name of the identification scheme, in a coded form as published in an external list.
             *      */
            Cd?: components["schemas"]["ExternalOrganisationIdentification1Code"];
            /** @description Proprietary
             *     Name of the identification scheme, in a free text form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * OtherContact1
         * @description Communication device number or electronic address used for communication.
         *
         * @example {
         *       "ChanlTp": "PHON",
         *       "Id": 1234567890
         *     }
         */
        OtherContact1: {
            /** @description ChannelType
             *     Method used to contact the financial institution's contact for the specific tax region.
             *      */
            ChanlTp: components["schemas"]["Max4Text"];
            /** @description Identifier
             *     Communication value such as phone number or email address.
             *      */
            Id?: components["schemas"]["Max128Text"];
        };
        /**
         * PacsError_FIToFIPaymentStatusReportV15
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 12345,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "SttlmInf": {
         *           "SttlmMtd": "INDA",
         *           "SttlmDt": "2020-01-01"
         *         },
         *         "InstgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFI"
         *           }
         *         },
         *         "InstdAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BICFI"
         *           }
         *         }
         *       },
         *       "TxInfAndSts": {
         *         "OrgnlInstrId": 12345,
         *         "OrgnlEndToEndId": 12345,
         *         "TxSts": "RJCT",
         *         "StsRsnInf": {
         *           "Rsn": "RSN",
         *           "AddtlInf": "ADDITIONAL"
         *         }
         *       },
         *       "SplmtryData": {
         *         "PlcAndNm": "PLACE",
         *         "Envlp": "ENVELOPE"
         *       }
         *     }
         */
        PacsError_FIToFIPaymentStatusReportV15: {
            GrpHdr: components["schemas"]["GroupHeader120"];
            TxInfAndSts?: components["schemas"]["PaymentTransaction163"];
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * PacsStatus_FIToFIPaymentStatusReportV15
         * @description Unsure on description.
         *
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 12345,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "TxInfAndSts": {
         *           "StsId": 12345,
         *           "OrgnlInstrId": 12345,
         *           "OrgnlEndToEndId": 12345,
         *           "OrgnlTxId": 12345,
         *           "OrgnlUETR": "123e4567-e89b-12d3-a456-426614174000",
         *           "TxSts": "RJCT",
         *           "StsRsnInf": {
         *             "Rsn": "RSN",
         *             "AddtlInf": "ADDITIONAL"
         *           },
         *           "AccptncDtTm": "2020-01-01T00:00:00Z",
         *           "AcctSvcrRef": "ACCTSVCRREF",
         *           "ClrSysRef": "CLRSYSREF",
         *           "ExctnConf": "1234567890ABCDEF",
         *           "SplmtryData": {
         *             "PlcAndNm": "PLACE",
         *             "Envlp": "ENVELOPE"
         *           }
         *         }
         *       }
         *     }
         */
        PacsStatus_FIToFIPaymentStatusReportV15: {
            GrpHdr: components["schemas"]["GroupHeader120"];
        };
        /**
         * Party38Choice
         * @description Nature or use of the account.
         *
         * @example {
         *       "OrgId": {
         *         "AnyBIC": "BIC"
         *       },
         *       "PrvtId": {
         *         "DtAndPlcOfBirth": {
         *           "Dt": "2018-01-01",
         *           "CityOfBirth": "City"
         *         }
         *       }
         *     }
         */
        Party38Choice: {
            /** @description Organisation
             *     Unique and unambiguous way to identify an organisation.
             *      */
            OrgId?: components["schemas"]["OrganisationIdentification29"];
            /** @description PrivateIdentification
             *     Unique and unambiguous identification of a person, for example a passport.
             *      */
            PrvtId?: components["schemas"]["PersonIdentification13"];
        } & (unknown | unknown);
        /**
         * Party40Choice
         * @description Identification of a person, an organisation or a financial institution.
         *
         * @example {
         *       "Pty": {
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "Ctry": "US",
         *           "AdrLine": [
         *             "Line1",
         *             "Line2"
         *           ]
         *         },
         *         "Id": {
         *           "OrgId": {
         *             "AnyBIC": "BIC"
         *           }
         *         }
         *       },
         *       "Agt": {
         *         "FinInstnId": {
         *           "BICFI": "BUKBGB22"
         *         },
         *         "BrnchId": {
         *           "Id": 12345,
         *           "Nm": "Oxford Street Branch",
         *           "PstlAdr": {
         *             "Ctry": "GB",
         *             "AdrLine": [
         *               "1 Oxford Street",
         *               "London",
         *               "UK"
         *             ]
         *           }
         *         }
         *       }
         *     }
         */
        Party40Choice: {
            /** @description Party
             *     Identification of a person or an organisation.
             *      */
            Pty?: components["schemas"]["PartyIdentification135"];
            /** @description Agent
             *     Identification of a financial institution.
             *      */
            Agt?: components["schemas"]["BranchAndFinancialInstitutionIdentification6"];
        } & (unknown | unknown);
        /**
         * Party52Choice
         * @description NOTE: Unsure on the description.
         *
         * @example {
         *       "OrgId": {
         *         "AnyBIC": "BIC"
         *       },
         *       "PrvtId": {
         *         "DtAndPlcOfBirth": {
         *           "Dt": "2018-01-01",
         *           "CityOfBirth": "City"
         *         }
         *       }
         *     }
         */
        Party52Choice: {
            /** @description Organisation
             *     Unique and unambiguous way to identify an organisation.
             *      */
            OrgId?: components["schemas"]["OrganisationIdentification39"];
            /** @description Person
             *     Unique and unambiguous identification of a person, for example a passport
             *      */
            PrvtId?: components["schemas"]["PersonIdentification18"];
        } & (unknown | unknown);
        /**
         * PartyIdentification135
         * @description Specifies the identification of a person or an organisation.
         *
         * @example {
         *       "Nm": "John Doe",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Dept",
         *         "SubDept": "SubDept",
         *         "StrtNm": "StrtNm",
         *         "BldgNb": "BldgNb",
         *         "BldgNm": "BldgNm",
         *         "Flr": "Flr",
         *         "PstBx": "PstBx",
         *         "Room": "Room",
         *         "PstCd": "PstCd",
         *         "TwnNm": "TwnNm",
         *         "TwnLctnNm": "TwnLctnNm",
         *         "DstrctNm": "DstrctNm",
         *         "CtrySubDvsn": "CtrySubDvsn",
         *         "Ctry": "Ctry",
         *         "AdrLine": "AdrLine"
         *       },
         *       "Id": {
         *         "OrgId": {
         *           "Othr": {
         *             "Id": 123,
         *             "SchmeNm": {
         *               "Prtry": "DfspId"
         *             }
         *           }
         *         }
         *       },
         *       "CtryOfRes": "BE",
         *       "CtctDtls": {
         *         "NmPrfx": "Mr",
         *         "Nm": "John Doe",
         *         "PhneNb": "+123-123-321",
         *         "MobNb": "+123-123-321",
         *         "FaxNb": "+123-123-321",
         *         "EmailAdr": "example@example.com"
         *       }
         *     }
         */
        PartyIdentification135: {
            /** @description Name
             *     Name by which a party is known and which is usually used to identify that party.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description PostalAddress
             *     Information that locates and identifies a specific address, as defined by postal services.
             *      */
            PstlAdr?: components["schemas"]["PostalAddress24"];
            /** @description Identification
             *     Unique and unambiguous way to identify an organisation.
             *      */
            Id?: components["schemas"]["Party38Choice"];
            /** @description CountryOfResidence Country in which a person resides (the place of a person's home). In the case of a company, it is the country from which the affairs of that company are directed.
             *      */
            CtryOfRes?: components["schemas"]["CountryCode"];
            /** @description ContactDetails
             *     Set of elements used to indicate how to contact the party.
             *      */
            CtctDtls?: components["schemas"]["Contact4"];
        };
        /**
         * PartyIdentification272
         * @description Specifies the identification of a person or an organisation.
         *
         * @example {
         *       "Nm": "John Doe",
         *       "PstlAdr": {
         *         "AdrTp": "ADDR",
         *         "Dept": "Dept",
         *         "SubDept": "SubDept",
         *         "StrtNm": "StrtNm",
         *         "BldgNb": "BldgNb",
         *         "PstCd": "PstCd",
         *         "TwnNm": "TwnNm",
         *         "CtrySubDvsn": "CtrySubDvsn",
         *         "Ctry": "Ctry"
         *       },
         *       "Id": {
         *         "OrgId": {
         *           "AnyBIC": "BIC"
         *         },
         *         "PrvtId": {
         *           "DtAndPlcOfBirth": {
         *             "Dt": "2018-01-01",
         *             "CityOfBirth": "City"
         *           }
         *         }
         *       },
         *       "CtryOfRes": "BE",
         *       "CtctDtls": {
         *         "NmPrfx": "Mr",
         *         "Nm": "John Doe",
         *         "PhneNb": "+123-123-321",
         *         "MobNb": "+123-123-321",
         *         "FaxNb": "+123-123-321",
         *         "EmailAdr": null
         *       }
         *     }
         */
        PartyIdentification272: {
            /** @description Name
             *     Name by which a party is known and which is usually used to identify that party.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description Postal Address
             *     Information that locates and identifies a specific address, as defined by postal services.
             *      */
            PstlAdr?: components["schemas"]["PostalAddress27"];
            /** @description Identification
             *     Unique and unambiguous identification of a party.
             *      */
            Id?: components["schemas"]["Party52Choice"];
            /** @description Country of Residence
             *     Country in which a person resides (the place of a person's home). In the case of a company, it is the country from which the affairs of that company are directed.
             *      */
            CtryOfRes?: components["schemas"]["CountryCode"];
            /** @description Contact Details
             *     Set of elements used to indicate how to contact the party.
             *      */
            CtctDtls?: components["schemas"]["Contact13"];
        };
        /**
         * PaymentIdentification13
         * @description Provides further means of referencing a payment transaction.
         *
         * @example {
         *       "InstrId": "INSTRUCTIONID",
         *       "EndToEndId": "ENDTOENDID",
         *       "TxId": "TRANSACTIONID",
         *       "UETR": "123e4567-e89b-12d3-a456-426614174000",
         *       "ClrSysRef": "CLRSYSREF"
         *     }
         */
        PaymentIdentification13: {
            /** @description InstructionIdentification
             *     Definition: Unique identification, as assigned by an instructing party for an instructed party, to unambiguously identify the instruction.
             *     Usage: The instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
             *      */
            InstrId?: components["schemas"]["Max35Text"];
            /** @description EndToEndIdentification
             *     Definition: Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
             *     Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
             *     Usage: In case there are technical limitations to pass on multiple references, the end-to-end identification must be passed on throughout the entire end-to-end chain.
             *      */
            EndToEndId: components["schemas"]["Max35Text"];
            /** @description TransactionIdentification
             *     Definition: Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.
             *     Usage: The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level.
             *     Usage: The instructing agent has to make sure that the transaction identification is unique for a preagreed period.
             *      */
            TxId?: components["schemas"]["Max35Text"];
            /** @description UETR
             *     Universally unique identifier to provide an end-to-end reference of a payment transaction.
             *      */
            UETR?: components["schemas"]["UUIDv4Identifier"];
            /** @description ClearingSystemReference
             *     Unique reference, as assigned by a clearing system, to unambiguously identify the instruction.
             *      */
            ClrSysRef?: components["schemas"]["Max35Text"];
        };
        /**
         * PaymentTransaction163
         * @description Provides further details on the original transactions, to which the status report message refers.
         *
         * @example {
         *       "StsId": 12345,
         *       "OrgnlInstrId": 12345,
         *       "OrgnlEndToEndId": 12345,
         *       "OrgnlTxId": 12345,
         *       "OrgnlUETR": "123e4567-e89b-12d3-a456-426614174000",
         *       "TxSts": "RJCT",
         *       "StsRsnInf": {
         *         "Rsn": "RSN",
         *         "AddtlInf": "ADDITIONAL"
         *       },
         *       "AccptncDtTm": "2020-01-01T00:00:00Z",
         *       "AcctSvcrRef": "ACCTSVCRREF",
         *       "ClrSysRef": "CLRSYSREF",
         *       "ExctnConf": "1234567890ABCDEF",
         *       "SplmtryData": {
         *         "PlcAndNm": "PLACE",
         *         "Envlp": "ENVELOPE"
         *       }
         *     }
         */
        PaymentTransaction163: {
            StsId?: components["schemas"]["Max35Text"];
            OrgnlInstrId?: components["schemas"]["Max35Text"];
            OrgnlEndToEndId?: components["schemas"]["Max35Text"];
            OrgnlTxId?: components["schemas"]["Max35Text"];
            OrgnlUETR?: components["schemas"]["UUIDv4Identifier"];
            TxSts?: components["schemas"]["ExternalPaymentTransactionStatus1Code"];
            StsRsnInf?: components["schemas"]["StatusReasonInformation14"];
            AccptncDtTm?: components["schemas"]["ISODateTime"];
            AcctSvcrRef?: components["schemas"]["Max35Text"];
            ClrSysRef?: components["schemas"]["Max35Text"];
            ExctnConf?: components["schemas"]["Exact32HexBinaryText"];
            SplmtryData?: components["schemas"]["SupplementaryData1"];
        };
        /**
         * PaymentTypeInformation28
         * @description Provides further details of the type of payment.
         *
         * @example {
         *       "InstrPrty": "NORM",
         *       "ClrChanl": "RTGS",
         *       "SvcLvl": {
         *         "Cd": "SEPA"
         *       },
         *       "LclInstrm": {
         *         "Cd": "CORE"
         *       },
         *       "CtgyPurp": {
         *         "Cd": "CASH"
         *       }
         *     }
         */
        PaymentTypeInformation28: {
            /** @description InstructionPriority
             *     Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
             *      */
            InstrPrty?: components["schemas"]["Priority2Code"];
            /** @description ClearingChannel
             *     Specifies the clearing channel to be used to process the payment instruction.
             *      */
            ClrChanl?: components["schemas"]["ClearingChannel2Code"];
            /** @description ServiceLevel
             *     Agreement under which or rules under which the transaction should be processed.
             *      */
            SvcLvl?: components["schemas"]["ServiceLevel8Choice"];
            /** @description LocalInstrument
             *     Definition: User community specific instrument.
             *     Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
             *      */
            LclInstrm?: components["schemas"]["LocalInstrument2Choice"];
            /** @description CategoryPurpose
             *     Specifies the high level purpose of the instruction based on a set of pre-defined categories.
             *      */
            CtgyPurp?: components["schemas"]["CategoryPurpose1Choice"];
        };
        /**
         * PercentageRate
         * @example 1234
         */
        PercentageRate: string;
        /**
         * PersonIdentification13
         * @description Unique and unambiguous way to identify a person.
         *
         * @example {
         *       "DtAndPlcOfBirth": {
         *         "Dt": "2018-01-01",
         *         "CityOfBirth": "City"
         *       },
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "CUST",
         *           "Prtry": 1
         *         }
         *       }
         *     }
         */
        PersonIdentification13: {
            /** @description DateAndPlaceOfBirth
             *     Date and place of birth of a person.
             *      */
            DtAndPlcOfBirth?: components["schemas"]["DateAndPlaceOfBirth1"];
            /** @description Other
             *     Unique identification of a person, as assigned by an institution, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericPersonIdentification1"];
        };
        /**
         * PersonIdentification18
         * @description Unique and unambiguous way to identify a person.
         *
         * @example {
         *       "DtAndPlcOfBirth": {
         *         "Dt": "2018-01-01",
         *         "CityOfBirth": "City"
         *       },
         *       "Othr": {
         *         "Id": 123,
         *         "SchmeNm": {
         *           "Cd": "CUST",
         *           "Prtry": 1
         *         }
         *       }
         *     }
         */
        PersonIdentification18: {
            /** @description DateAndPlaceOfBirth
             *     Date and place of birth of a person.
             *      */
            DtAndPlcOfBirth?: components["schemas"]["DateAndPlaceOfBirth1"];
            /** @description Other
             *     Unique identification of a person, as assigned by an institution, using an identification scheme.
             *      */
            Othr?: components["schemas"]["GenericPersonIdentification2"];
        };
        /**
         * PersonIdentificationSchemeName1Choice
         * @description Sets of elements to identify a name of the identification scheme.
         *
         * @example {
         *       "Cd": "CCPT"
         *     }
         */
        PersonIdentificationSchemeName1Choice: {
            /** @description Code
             *     Name of the identification scheme, in a coded form as published in an external list
             *      */
            Cd?: components["schemas"]["ExternalPersonIdentification1Code"];
            /** @description Proprietary
             *     Name of the identification scheme, in a free text form
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * PhoneNumber
         * @description Double check this regex.
         *
         */
        PhoneNumber: string;
        /**
         * PostalAddress24
         * @description Information that locates and identifies a specific address, as defined by postal services.
         *
         * @example {
         *       "AdrTp": "ADDR",
         *       "Dept": "Dept",
         *       "SubDept": "SubDept",
         *       "StrtNm": "StrtNm",
         *       "BldgNb": "BldgNb",
         *       "BldgNm": "BldgNm",
         *       "Flr": "Flr",
         *       "PstBx": "PstBx",
         *       "Room": "Room",
         *       "PstCd": "PstCd",
         *       "TwnNm": "TwnNm",
         *       "TwnLctnNm": "TwnLctnNm",
         *       "DstrctNm": "DstrctNm",
         *       "CtrySubDvsn": "CtrySubDvsn",
         *       "Ctry": "Ctry",
         *       "AdrLine": "AdrLine"
         *     }
         */
        PostalAddress24: {
            AdrTp?: components["schemas"]["AddressType3Choice"];
            Dept?: components["schemas"]["Max70Text"];
            SubDept?: components["schemas"]["Max70Text"];
            StrtNm?: components["schemas"]["Max70Text"];
            BldgNb?: components["schemas"]["Max16Text"];
            BldgNm?: components["schemas"]["Max35Text"];
            Flr?: components["schemas"]["Max70Text"];
            PstBx?: components["schemas"]["Max16Text"];
            Room?: components["schemas"]["Max70Text"];
            PstCd?: components["schemas"]["Max16Text"];
            TwnNm?: components["schemas"]["Max35Text"];
            TwnLctnNm?: components["schemas"]["Max35Text"];
            DstrctNm?: components["schemas"]["Max35Text"];
            CtrySubDvsn?: components["schemas"]["Max35Text"];
            Ctry?: components["schemas"]["CountryCode"];
            AdrLine?: components["schemas"]["Max70Text"];
        };
        /**
         * PostalAddress27
         * @description Information that locates and identifies a specific address, as defined by postal services.
         *
         * @example {
         *       "AdrTp": "ADDR",
         *       "CareOf": "CareOf",
         *       "Dept": "Dept",
         *       "SubDept": "SubDept",
         *       "StrtNm": "StrtNm",
         *       "BldgNb": "BldgNb",
         *       "BldgNm": "BldgNm",
         *       "Flr": "Flr",
         *       "UnitNb": "UnitNb",
         *       "PstBx": "PstBx",
         *       "Room": "Room",
         *       "PstCd": "PstCd",
         *       "TwnNm": "TwnNm",
         *       "TwnLctnNm": "TwnLctnNm",
         *       "DstrctNm": "DstrctNm",
         *       "CtrySubDvsn": "CtrySubDvsn",
         *       "Ctry": "Ctry",
         *       "AdrLine": "AdrLine"
         *     }
         */
        PostalAddress27: {
            AdrTp?: components["schemas"]["AddressType3Choice"];
            CareOf?: components["schemas"]["Max140Text"];
            Dept?: components["schemas"]["Max70Text"];
            SubDept?: components["schemas"]["Max70Text"];
            StrtNm?: components["schemas"]["Max140Text"];
            BldgNb?: components["schemas"]["Max16Text"];
            BldgNm?: components["schemas"]["Max140Text"];
            Flr?: components["schemas"]["Max70Text"];
            UnitNb?: components["schemas"]["Max16Text"];
            PstBx?: components["schemas"]["Max16Text"];
            Room?: components["schemas"]["Max70Text"];
            PstCd?: components["schemas"]["Max16Text"];
            TwnNm?: components["schemas"]["Max140Text"];
            TwnLctnNm?: components["schemas"]["Max140Text"];
            DstrctNm?: components["schemas"]["Max140Text"];
            CtrySubDvsn?: components["schemas"]["Max35Text"];
            Ctry?: components["schemas"]["CountryCode"];
            AdrLine?: components["schemas"]["Max70Text"];
        };
        /**
         * PreferredContactMethod1Code
         * @description Preferred method used to reach the individual contact within an organisation.
         *
         * @example CELL
         * @enum {string}
         */
        PreferredContactMethod1Code: "LETT" | "MAIL" | "PHON" | "FAXX" | "CELL";
        /**
         * PreferredContactMethod2Code
         * @description Preferred method used to reach the individual contact within an organisation.
         *
         * @example MAIL
         * @enum {string}
         */
        PreferredContactMethod2Code: "LETT" | "MAIL" | "PHON" | "FAXX" | "CELL";
        /**
         * Priority2Code
         * @description Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
         *
         * @example HIGH
         * @enum {string}
         */
        Priority2Code: "HIGH" | "NORM";
        /**
         * ProxyAccountIdentification1
         * @description Information related to a proxy identification of the account.
         *
         * @example {
         *       "Tp": {
         *         "Cd": "IBAN"
         *       },
         *       "Id": 123
         *     }
         */
        ProxyAccountIdentification1: {
            /** @description Type
             *
             *     Type of the proxy identification.
             *      */
            Tp?: components["schemas"]["ProxyAccountType1Choice"];
            /** @description Identification
             *
             *     Identification used to indicate the account identification under another specified name.
             *      */
            Id: components["schemas"]["Max2048Text"];
        };
        /**
         * ProxyAccountType1Choice
         * @description ProxyAccountType1Choice
         *
         *     Specifies the scheme used for the identification of an account alias.
         *
         * @example {
         *       "Cd": "CH03"
         *     }
         */
        ProxyAccountType1Choice: {
            /** @description Code
             *
             *     Name of the identification scheme, in a coded form as published in an external list.
             *      */
            Cd?: components["schemas"]["ExternalProxyAccountType1Code"];
            /** @description Proprietary
             *
             *     Name of the identification scheme, in a free text form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * Purpose2Choice
         * @description Specifies the underlying reason for the payment transaction.
         *     Usage: Purpose is used by the end-customers, that is initiating party, (ultimate) debtor, (ultimate) creditor to provide information concerning the nature of the payment. Purpose is a content element, which is not used for processing by any of the agents involved in the payment chain.
         *
         * @example {
         *       "Cd": "CH03"
         *     }
         */
        Purpose2Choice: {
            /** @description Code
             *
             *     Underlying reason for the payment transaction, as published in an external purpose code list.
             *      */
            Cd?: components["schemas"]["ExternalPurpose1Code"];
            /** @description Proprietary
             *
             *     Purpose, in a proprietary form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * RegulatoryAuthority2
         * @description Information about an entity requiring the regulatory reporting information.
         *
         * @example {
         *       "Nm": "Swiss National Bank",
         *       "Ctry": "CH"
         *     }
         */
        RegulatoryAuthority2: {
            /** @description Name
             *
             *     Name of the entity requiring the regulatory reporting information.
             *      */
            Nm?: components["schemas"]["Max140Text"];
            /** @description Country
             *
             *     Country of the entity that requires the regulatory reporting information.
             *      */
            Ctry?: components["schemas"]["CountryCode"];
        };
        /**
         * RegulatoryReporting3
         * @description Information needed due to regulatory and/or statutory requirements.
         *
         * @example {
         *       "DbtCdtRptgInd": "CRED",
         *       "Authrty": {
         *         "Nm": "Swiss National Bank",
         *         "Ctry": "CH"
         *       },
         *       "Dtls": {
         *         "Cd": "A1",
         *         "Inf": "Mandatory regulatory information"
         *       }
         *     }
         */
        RegulatoryReporting3: {
            /** @description DebitCreditReportingIndicator
             *     Identifies whether the regulatory reporting information applies to the debit side, to the credit side or to both debit and credit sides of the transaction.
             *      */
            DbtCdtRptgInd?: components["schemas"]["RegulatoryReportingType1Code"];
            /** @description Authority
             *
             *     Entity requiring the regulatory reporting information.
             *      */
            Authrty?: components["schemas"]["RegulatoryAuthority2"];
            /** @description Details
             *     Identifies whether the regulatory reporting information applies to the debit side, to the credit side or to both debit and credit sides of the transaction.
             *      */
            Dtls?: components["schemas"]["StructuredRegulatoryReporting3"] | components["schemas"]["StructuredRegulatoryReporting3"][];
        };
        /**
         * RegulatoryReportingType1Code
         * @description Identifies whether the regulatory reporting information applies to the debit side, to the credit side or to both debit and credit sides of the transaction.
         *
         * @example BOTH
         * @enum {string}
         */
        RegulatoryReportingType1Code: "CRED" | "DEBT" | "BOTH";
        /**
         * ServiceLevel8Choice
         * @description Details about a service level.
         *
         * @example {
         *       "Cd": "SEPA"
         *     }
         */
        ServiceLevel8Choice: {
            /** @description Code
             *     Specifies a pre-agreed service or level of service between the parties, as published in an external service level code list.
             *      */
            Cd?: components["schemas"]["ExternalServiceLevel1Code"];
            /** @description Proprietary
             *     Specifies a pre-agreed service or level of service between the parties, as a proprietary code.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * SettlementInstruction15
         * @description Specifies the details on how the settlement of the original transaction(s) between the
         *     instructing agent and the instructed agent was completed.
         *
         * @example {
         *       "SttlmMtd": "INDA",
         *       "PmtTpInf": {
         *         "InstrPrty": "NORM",
         *         "SvcLvl": {
         *           "Cd": "SEPA"
         *         },
         *         "LclInstrm": {
         *           "Cd": "CH03"
         *         },
         *         "CtgyPurp": {
         *           "Cd": "SUPP"
         *         },
         *         "Cdtr": {
         *           "Nm": "Name",
         *           "PstlAdr": {
         *             "AdrTp": "ADDR",
         *             "AdrLine": "Address",
         *             "Ctry": "CH"
         *           },
         *           "Id": {
         *             "OrgId": {
         *               "AnyBIC": "BIC",
         *               "Othr": {
         *                 "Id": 123,
         *                 "SchmeNm": {
         *                   "Cd": "IBAN",
         *                   "Issr": "BIC"
         *                 }
         *               }
         *             }
         *           },
         *           "CtryOfRes": "CH",
         *           "CtctDtls": {
         *             "Nm": "Name",
         *             "PhneNb": 123,
         *             "EmailAdr": null
         *           }
         *         }
         *       }
         *     }
         */
        SettlementInstruction15: {
            /** @description SettlementMethod
             *     Method used to settle the (batch of) payment instructions.
             *      */
            SttlmMtd: components["schemas"]["SettlementMethod1Code"];
            /** @description PaymentTypeInformation
             *      */
            PmtTpInf?: components["schemas"]["PaymentTypeInformation28"];
        };
        /**
         * SettlementMethod1Code
         * @description Specifies the method used to settle the credit transfer instruction.
         *
         * @example CLRG
         * @enum {string}
         */
        SettlementMethod1Code: "INDA" | "INGA" | "COVE" | "CLRG";
        /**
         * StatusReason6Choice
         * @description Unsure on description.
         *
         * @example {
         *       "Cd": "AGNT"
         *     }
         */
        StatusReason6Choice: {
            /** @description Code
             *     Reason for the status, as published in an external reason code list.
             *      */
            Cd?: components["schemas"]["ExternalStatusReason1Code"];
            /** @description Proprietary
             *     Reason for the status, in a proprietary form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * StatusReasonInformation14
         * @description Unsure on description.
         *
         * @example {
         *       "Orgtr": {
         *         "Nm": "Name",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Department",
         *           "SubDept": "SubDepartment",
         *           "StrtNm": "StreetName",
         *           "BldgNb": "BuildingNumber",
         *           "PstCd": "PostCode",
         *           "TwnNm": "TownName",
         *           "CtrySubDvsn": "CountrySubDivision",
         *           "Ctry": "Country"
         *         }
         *       },
         *       "Rsn": {
         *         "Cd": "AGNT"
         *       },
         *       "AddtlInf": "AdditionalInformation"
         *     }
         */
        StatusReasonInformation14: {
            /** @description Originator
             *     Party that issues the status. */
            Orgtr?: components["schemas"]["PartyIdentification272"];
            /** @description Reason
             *     Specifies the reason for the status report. */
            Rsn?: components["schemas"]["StatusReason6Choice"];
            /** @description AdditionalInformation
             *     Additional information about the status report. */
            AddtlInf?: components["schemas"]["Max105Text"];
        };
        /**
         * StructuredRegulatoryReporting3
         * @description StructuredRegulatoryReporting3
         *
         *     Information needed due to regulatory and statutory requirements.
         *
         * @example {
         *       "Tp": "T1",
         *       "Dt": "2018-01-01",
         *       "Ctry": "CH",
         *       "Cd": "CHF",
         *       "Amt": {
         *         "Ccy": "CHF",
         *         "Amt": 1000
         *       },
         *       "Inf": 12345
         *     }
         */
        StructuredRegulatoryReporting3: {
            /** @description Type
             *
             *     Specifies the type of the information supplied in the regulatory reporting details.
             *      */
            Tp?: components["schemas"]["Max35Text"];
            /** @description Date
             *
             *     Date related to the specified type of regulatory reporting details.
             *      */
            Dt?: components["schemas"]["ISODate"];
            /** @description Country
             *
             *     Country related to the specified type of regulatory reporting details.
             *      */
            Ctry?: components["schemas"]["CountryCode"];
            /** @description Code
             *     Specifies the nature, purpose, and reason for the transaction to be reported for regulatory and statutory requirements in a coded form.
             *      */
            Cd?: components["schemas"]["Max10Text"];
            /** @description Amount
             *
             *     Amount of money to be reported for regulatory and statutory requirements.
             *      */
            Amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description Information
             *     Additional details that cater for specific domestic regulatory requirements.
             *      */
            Inf?: components["schemas"]["Max35Text"] | components["schemas"]["Max35Text"][];
        };
        /**
         * SupplementaryData1
         * @description Additional information that can not be captured in the structured fields and/or any other specific block.
         *
         * @example {
         *       "PlcAndNm": "Additional information",
         *       "Envlp": {
         *         "Cd": "CH03",
         *         "Prtry": "Additional information"
         *       }
         *     }
         */
        SupplementaryData1: {
            /** @description PlaceAndName
             *     Unambiguous reference to the location where the supplementary data must be inserted in the message instance.
             *      */
            PlcAndNm?: components["schemas"]["Max350Text"];
            /** @description Envelope
             *     Technical element wrapping the supplementary data.
             *     Technical component that contains the validated supplementary data information. This technical envelope allows to segregate the supplementary data information from any other information.
             *      */
            Envlp: components["schemas"]["SupplementaryDataEnvelope1"];
        };
        /**
         * SupplementaryDataEnvelope1
         * @description SupplementaryDataEnvelope1
         *     Technical component that contains the validated supplementary data information. This technical envelope allows to segregate the supplementary data information from any other information.
         *
         */
        SupplementaryDataEnvelope1: Record<string, never>;
        /**
         * TaxAmount3
         * @description Information on the amount of the tax record.
         *
         * @example {
         *       "Rate": 0,
         *       "TaxblBaseAmt": {
         *         "Ccy": "EUR",
         *         "Amt": 0
         *       },
         *       "TtlAmt": {
         *         "Ccy": "EUR",
         *         "Amt": 0
         *       },
         *       "Dtls": {
         *         "Tp": "T1",
         *         "Ctry": "CH",
         *         "Cd": "CHF",
         *         "Amt": {
         *           "Ccy": "CHF",
         *           "Amt": 1000
         *         },
         *         "Inf": 12345
         *       }
         *     }
         */
        TaxAmount3: {
            /** @description Rate
             *
             *     Rate used to calculate the tax.
             *      */
            Rate?: components["schemas"]["PercentageRate"];
            /** @description TaxableBaseAmount
             *
             *     Amount of money on which the tax is based.
             *      */
            TaxblBaseAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description TotalAmount
             *
             *     Total amount that is the result of the calculation of the tax for the record.
             *      */
            TtlAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description Details
             *
             *     Set of elements used to provide details on the tax period and amount.
             *      */
            Dtls?: components["schemas"]["TaxRecordDetails3"] | components["schemas"]["TaxRecordDetails3"][];
        };
        /**
         * TaxAuthorisation1
         * @description Details of an authorised tax paying party.
         *
         * @example {
         *       "Titl": "Mr",
         *       "Nm": "John Doe"
         *     }
         */
        TaxAuthorisation1: {
            /** @description Title
             *
             *     Title or position of debtor or the debtor's authorised representative.
             *      */
            Titl?: components["schemas"]["Max35Text"];
            /** @description Name
             *
             *     Name of the debtor or the debtor's authorised representative.
             *      */
            Nm?: components["schemas"]["Max140Text"];
        };
        /**
         * TaxData1
         * @description Details about tax paid, or to be paid, to the government in accordance with the law, including pre-defined parameters such as thresholds and type of account.
         *
         * @example {
         *       "Cdtr": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       },
         *       "Dbtr": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       },
         *       "UltmtDbtr": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       },
         *       "AdmstnZone": "CH",
         *       "RefNb": 12345,
         *       "Mtd": "A",
         *       "TtlTaxblBaseAmt": {
         *         "Ccy": "CHF",
         *         "Amt": 1000
         *       },
         *       "TtlTaxAmt": {
         *         "Ccy": "CHF",
         *         "Amt": 100
         *       },
         *       "Dt": "2018-01-01",
         *       "SeqNb": 1,
         *       "Rcrd": {
         *         "Tp": "T1",
         *         "Ctry": "CH",
         *         "Cd": "CHF",
         *         "Amt": {
         *           "Ccy": "CHF",
         *           "Amt": 1000
         *         },
         *         "Inf": 12345
         *       }
         *     }
         */
        TaxData1: {
            /** @description Creditor
             *
             *     Party on the credit side of the transaction to which the tax applies.
             *      */
            Cdtr?: components["schemas"]["TaxParty1"];
            /** @description Debtor
             *
             *     Party on the debit side of the transaction to which the tax applies.
             *      */
            Dbtr?: components["schemas"]["TaxParty2"];
            /** @description UltimateDebtor
             *
             *     Ultimate party that owes an amount of money to the (ultimate) creditor, in this case, to the taxing authority.
             *      */
            UltmtDbtr?: components["schemas"]["TaxParty2"];
            /** @description AdministrationZone
             *
             *     Territorial part of a country to which the tax payment is related.
             *      */
            AdmstnZone?: components["schemas"]["Max35Text"];
            /** @description ReferenceNumber
             *
             *     Tax reference information that is specific to a taxing agency.
             *      */
            RefNb?: components["schemas"]["Max140Text"];
            /** @description Method
             *
             *     Method used to indicate the underlying business or how the tax is paid.
             *      */
            Mtd?: components["schemas"]["Max35Text"];
            /** @description TotalTaxableBaseAmount
             *
             *     Total amount of money on which the tax is based.
             *      */
            TtlTaxblBaseAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description TotalTaxAmount
             *
             *     Total amount of money as result of the calculation of the tax.
             *      */
            TtlTaxAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** @description Date
             *
             *     Date by which tax is due.
             *      */
            Dt?: components["schemas"]["ISODate"];
            /** @description SequenceNumber
             *
             *     Sequential number of the tax report
             *      */
            SeqNb?: components["schemas"]["Number"];
            /** @description Record
             *
             *     Details of the tax record.
             *      */
            Rcrd?: components["schemas"]["TaxRecord3"] | components["schemas"]["TaxRecord3"][];
        };
        /**
         * TaxParty1
         * @description Details about the entity involved in the tax paid or to be paid.
         *
         * @example {
         *       "TaxId": 123456789,
         *       "RegnId": 123456789,
         *       "TaxTp": "VAT"
         *     }
         */
        TaxParty1: {
            /** @description TaxIdentification
             *
             *     Tax identification number of the creditor.
             *      */
            TaxId?: components["schemas"]["Max35Text"];
            /** @description RegistrationIdentification
             *
             *     Unique identification, as assigned by an organisation, to unambiguously identify a party.
             *      */
            RegnId?: components["schemas"]["Max35Text"];
            /** @description TaxType
             *
             *     Type of tax payer.
             *      */
            TaxTp?: components["schemas"]["Max35Text"];
        };
        /**
         * TaxParty2
         * @description Details about the entity involved in the tax paid or to be paid.
         *
         * @example {
         *       "TaxId": 123456789,
         *       "RegnId": 123456789,
         *       "TaxTp": "VAT",
         *       "Authstn": {
         *         "Titl": "Mr",
         *         "Nm": "John Doe"
         *       }
         *     }
         */
        TaxParty2: {
            /** @description TaxIdentification
             *
             *     Tax identification number of the debtor.
             *      */
            TaxId?: components["schemas"]["Max35Text"];
            /** @description RegistrationIdentification
             *
             *     Unique identification, as assigned by an organisation, to unambiguously identify a party.
             *      */
            RegnId?: components["schemas"]["Max35Text"];
            /** @description TaxType
             *
             *     Type of tax payer.
             *      */
            TaxTp?: components["schemas"]["Max35Text"];
            /** @description Authorisation
             *
             *     Details of the authorised tax paying party.
             *      */
            Authstn?: components["schemas"]["TaxAuthorisation1"];
        };
        /**
         * TaxPeriod3
         * @description Period of time details related to the tax payment.
         *
         * @example {
         *       "Yr": 2020,
         *       "Tp": "MM01",
         *       "FrToDt": {
         *         "FrDt": "2020-01-01",
         *         "ToDt": "2020-01-31"
         *       }
         *     }
         */
        TaxPeriod3: {
            /** @description FromToDate
             *
             *     Range of time between a start date and an end date for which the tax report is provided.
             *      */
            FrToDt?: components["schemas"]["DatePeriod2"];
            /** @description Type
             *
             *     Identification of the period related to the tax payment.
             *      */
            Tp?: components["schemas"]["TaxRecordPeriod1Code"];
            /** @description Year
             *
             *     Year related to the tax payment.
             *      */
            Yr?: components["schemas"]["ISOYear"];
        };
        /**
         * TaxRecord3
         * @description Set of elements used to define the tax record.
         *
         * @example {
         *       "Tp": "VAT",
         *       "Ctgy": "A",
         *       "CtgyDtls": "Standard",
         *       "DbtrSts": "Resident",
         *       "CertId": 123456789,
         *       "FrmsCd": 123456789,
         *       "Prd": {
         *         "FrstDay": "2019-01-01",
         *         "LastDay": "2019-12-31"
         *       },
         *       "TaxAmt": {
         *         "Rate": 0.2,
         *         "TaxblBaseAmt": 1000,
         *         "TtlAmt": 200
         *       },
         *       "AddtlInf": "VAT applicable"
         *     }
         */
        TaxRecord3: {
            /** @description AdditionalInformation
             *
             *     Further details of the tax record.
             *      */
            AddtlInf?: components["schemas"]["Max140Text"];
            /** @description CertificateIdentification
             *
             *     Identification number of the tax report as assigned by the taxing authority.
             *      */
            CertId?: components["schemas"]["Max35Text"];
            /** @description Category
             *
             *     Specifies the tax code as published by the tax authority.
             *      */
            Ctgy?: components["schemas"]["Max35Text"];
            /** @description CategoryDetails
             *
             *     Provides further details of the category tax code.
             *      */
            CtgyDtls?: components["schemas"]["Max35Text"];
            /** @description DebtorStatus
             *
             *     Code provided by local authority to identify the status of the party that has drawn up the settlement document.
             *      */
            DbtrSts?: components["schemas"]["Max35Text"];
            /** @description FormsCode
             *
             *     Identifies, in a coded form, on which template the tax report is to be provided.
             *      */
            FrmsCd?: components["schemas"]["Max35Text"];
            /** @description Period
             *
             *     Set of elements used to provide details on the period of time related to the tax payment.
             *      */
            Prd?: components["schemas"]["TaxPeriod3"];
            /** @description TaxAmount
             *
             *     Set of elements used to provide information on the amount of the tax record.
             *      */
            TaxAmt?: components["schemas"]["TaxAmount3"];
            /** @description Type
             *
             *     High level code to identify the type of tax details.
             *      */
            Tp?: components["schemas"]["Max35Text"];
        };
        /**
         * TaxRecordDetails3
         * @description Details on the tax period and amount
         *
         * @example {
         *       "Prd": {
         *         "Yr": 2020,
         *         "Tp": "MM01",
         *         "FrToDt": {
         *           "FrDt": "2020-01-01",
         *           "ToDt": "2020-01-31"
         *         }
         *       },
         *       "Amt": {
         *         "Amt": 100,
         *         "Ccy": "EUR"
         *       }
         *     }
         */
        TaxRecordDetails3: {
            /** @description Period
             *
             *     Set of elements used to provide details on the period of time related to the tax payment.
             *      */
            Prd?: components["schemas"]["TaxPeriod3"];
            /** @description Amount
             *
             *     Underlying tax amount related to the specified period.
             *      */
            Amt: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
        };
        /**
         * TaxRecordPeriod1Code
         * @description Specifies the period related to the tax payment
         *
         *     MM01 FirstMonth Tax is related to the second month of the period.
         *     MM02 SecondMonth Tax is related to the first month of the period.
         *     MM03 ThirdMonth Tax is related to the third month of the period.
         *     MM04 FourthMonth Tax is related to the fourth month of the period.
         *     MM05 FifthMonth Tax is related to the fifth month of the period.
         *     MM06 SixthMonth Tax is related to the sixth month of the period.
         *     MM07 SeventhMonth Tax is related to the seventh month of the period.
         *     MM08 EighthMonth Tax is related to the eighth month of the period.
         *     MM09 NinthMonth Tax is related to the ninth month of the period.
         *     MM10 TenthMonth Tax is related to the tenth month of the period.
         *     MM11 EleventhMonth Tax is related to the eleventh month of the period.
         *     MM12 TwelfthMonth Tax is related to the twelfth month of the period.
         *     QTR1 FirstQuarter Tax is related to the first quarter of the period.
         *     QTR2 SecondQuarter Tax is related to the second quarter of the period.
         *     QTR3 ThirdQuarter Tax is related to the third quarter of the period.
         *     QTR4 FourthQuarter Tax is related to the forth quarter of the period.
         *     HLF1 FirstHalf Tax is related to the first half of the period.
         *     HLF2 SecondHalf Tax is related to the second half of the period.
         *
         * @example HLF1
         * @enum {string}
         */
        TaxRecordPeriod1Code: "MM01" | "MM02" | "MM03" | "MM04" | "MM05" | "MM06" | "MM07" | "MM08" | "MM09" | "MM10" | "MM11" | "MM12" | "QTR1" | "QTR2" | "QTR3" | "QTR4" | "HLF1" | "HLF2";
        /**
         * TermsRequest_FIToFICustomerCreditProposal
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123456789,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BBA",
         *                     "Prtry": "Party Identification Scheme Name"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         }
         *       }
         *     }
         */
        TermsRequest_FIToFICustomerCreditProposal: {
            GrpHdr: components["schemas"]["GroupHeader129"];
        };
        /**
         * TermsResponse_FIToFICustomerCreditConfirmation
         * @example {
         *       "GrpHdr": {
         *         "MsgId": 123456789,
         *         "CreDtTm": "2020-01-01T00:00:00Z",
         *         "NbOfTxs": 1,
         *         "CtrlSum": 100,
         *         "InitgPty": {
         *           "Nm": "Initiating Party Name",
         *           "Id": {
         *             "OrgId": {
         *               "Othr": [
         *                 {
         *                   "Id": 123456789,
         *                   "SchmeNm": {
         *                     "Cd": "BBA",
         *                     "Prtry": "Party Identification Scheme Name"
         *                   }
         *                 }
         *               ]
         *             }
         *           }
         *         },
         *         "FwdgAgt": {
         *           "FinInstnId": {
         *             "BICFI": "BBBBBBBB"
         *           }
         *         }
         *       }
         *     }
         */
        TermsResponse_FIToFICustomerCreditConfirmation: {
            GrpHdr: components["schemas"]["GroupHeader129"];
            CdtTrfTxInf: components["schemas"]["CreditTransferTransaction67"];
        };
        /**
         * UUIDv4Identifier
         * @example 8f3a3b2d-3b0a-4b3f-8e4e-1b2f3f4c5d6e
         */
        UUIDv4Identifier: string;
        /**
         * VerificationReason1Choice
         * @example {
         *       "Cd": "AGNT"
         *     }
         */
        VerificationReason1Choice: {
            /** @description Code
             *     Reason why the verified identification information is incorrect, as published in an external reason code list.
             *      */
            Cd?: components["schemas"]["ExternalVerificationReason1Code"];
            /** @description Proprietary
             *     Reason why the verified identification information is incorrect, in a free text form.
             *      */
            Prtry?: components["schemas"]["Max35Text"];
        } & (unknown | unknown);
        /**
         * VerificationReport4
         * @example {
         *       "OrgnlId": 1.2345678901234568e+33,
         *       "Vrfctn": true,
         *       "OrgnlPtyAndAcctId": {
         *         "Nm": "John Doe",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Dept",
         *           "SubDept": "SubDept",
         *           "StrtNm": "1234 Elm St",
         *           "BldgNb": 1234,
         *           "PstCd": 12345,
         *           "TwnNm": "Anytown",
         *           "CtrySubDvsn": "CA",
         *           "Ctry": "US"
         *         },
         *         "Id": {
         *           "OrgId": {
         *             "AnyBIC": "ABCDUS33",
         *             "Othr": {
         *               "Id": 123456789,
         *               "Issr": "ABA"
         *             }
         *           }
         *         }
         *       },
         *       "UpdtdPtyAndAcctId": {
         *         "Nm": "John Doe",
         *         "PstlAdr": {
         *           "AdrTp": "ADDR",
         *           "Dept": "Dept",
         *           "SubDept": "SubDept",
         *           "StrtNm": "1234 Elm St",
         *           "BldgNb": 1234,
         *           "PstCd": 12345,
         *           "TwnNm": "Anytown",
         *           "CtrySubDvsn": "CA",
         *           "Ctry": "US"
         *         },
         *         "Id": {
         *           "OrgId": {
         *             "AnyBIC": "ABCDUS33",
         *             "Othr": {
         *               "Id": 123456789,
         *               "Issr": "ABA"
         *             }
         *           }
         *         }
         *       }
         *     }
         */
        VerificationReport4: {
            /** @description OriginalIdentification
             *     Unique identification, as assigned by a sending party, to unambiguously identify the party and account identification information group within the original message.
             *      */
            OrgnlId: components["schemas"]["Max35Text"];
            /** @description Verification
             *     Identifies whether the party and/or account information received is correct. Boolean value.
             *      */
            Vrfctn: components["schemas"]["IdentificationVerificationIndicator"];
            /** @description Reason.
             *     Specifies the reason why the verified identification information is incorrect.
             *      */
            Rsn?: components["schemas"]["VerificationReason1Choice"];
            /** @description OriginalPartyAndAccountIdentification
             *     Provides party and/or account identification information as given in the original message.
             *      */
            OrgnlPtyAndAcctId?: components["schemas"]["IdentificationInformation4"];
            /** @description UpdatedPartyAndAccountIdentification
             *     Provides party and/or account identification information.
             *      */
            UpdtdPtyAndAcctId?: components["schemas"]["IdentificationInformation4"];
        };
        /**
         * hexBinary
         * @example 4660
         */
        hexBinary: string;
    };
    responses: {
        /** @description OK */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Accepted */
        202: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Bad Request */
        400: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Method Not Allowed */
        405: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Acceptable */
        406: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Not Implemented */
        501: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
        /** @description Service Unavailable */
        503: {
            headers: {
                "Content-Length": components["headers"]["Content-Length"];
                "Content-Type": components["headers"]["Content-Type"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorInformationResponse"];
            };
        };
    };
    parameters: {
        /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: string;
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
        /** @description The `Date` header field indicates the date when the request was sent. */
        Date: string;
        /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination": string;
        /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption": string;
        /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method": string;
        /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature": string;
        /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": string;
        /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
        "FSPIOP-URI": string;
        /** @description The identifier value. */
        ID: string;
        /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
        SubId: string;
        /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: string;
        /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
        "X-Forwarded-For": string;
    };
    requestBodies: never;
    headers: {
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        "Content-Length": number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    PartiesByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesByTypeAndID2: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Party information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetParties_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetPartiesError_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdByTypeAndIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Party information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetParties_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    PartiesSubIdErrorByTypeAndID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
                Type: components["parameters"]["Type"];
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
                /** @description A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`. */
                SubId: components["parameters"]["SubId"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetPartiesError_IdentificationVerificationReportV03"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    Quotes: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsRequest_FIToFICustomerCreditProposal"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByID: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByID1: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TermsResponse_FIToFICustomerCreditConfirmation"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    QuotesByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    transfers: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Execute_FIToFICustomerCreditTransferV13"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDPatch: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer notification upon completion. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    TransfersByIDAndError: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the FX quote to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxRequest_FICreditTransferProposal"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIdPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description FX Quote information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FxResponse_FICreditTransferConfirmation"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxQuotesByIDAndErrorPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersPost: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Details of the FX transfer to be created. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Fxecute_FinancialInstitutionCreditTransferV12"];
            };
        };
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDGet: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Accept` header field indicates the version of the API the client would like the server to use. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: components["responses"]["202"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer information returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDPatch: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Transfer notification upon completion. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsStatus_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
    FxTransfersByIDAndErrorPut: {
        parameters: {
            query?: never;
            header: {
                /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
                 *
                 *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
                "Content-Length"?: components["parameters"]["Content-Length"];
                /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
                "Content-Type": components["parameters"]["Content-Type"];
                /** @description The `Date` header field indicates the date when the request was sent. */
                Date: components["parameters"]["Date"];
                /** @description The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
                 *
                 *     **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`. */
                "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
                /** @description The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
                "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
                /** @description The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
                "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
                /** @description The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
                "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
                /** @description The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
                "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
                /** @description The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
                /** @description The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/main/Specification%20Document%20Set). */
                "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
            };
            path: {
                /** @description The identifier value. */
                ID: components["parameters"]["ID"];
            };
            cookie?: never;
        };
        /** @description Details of the error returned. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PacsError_FIToFIPaymentStatusReportV15"];
            };
        };
        responses: {
            200: components["responses"]["200"];
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            405: components["responses"]["405"];
            406: components["responses"]["406"];
            501: components["responses"]["501"];
            503: components["responses"]["503"];
        };
    };
}
