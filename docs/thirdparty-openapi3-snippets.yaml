openapi: 3.0.2
info:
  version: '0.1'
  title: Thirdparty Snippets
  description: |
    Based on sequence diagrams
    (https://github.com/mojaloop/pisp/tree/master/docs/out).
    This is a work in progress.
  license:
    name: TBD
servers:
  - url: '{protocol}://hostname:<port>/switch/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
paths:
  /interface:
    post:
      description: >-
        Essential path to include schema definitions that are not used so that
        these definitions get included into the openapi-cli bundle api
        definition so that they get converted into typescript definitions.
      operationId: test
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - title: AuthorizationChannelType
                  type: string
                  enum: &ref_72
                    - OTP
                    - QRCODE
                    - U2F
                  description: >
                    Below are the allowed values for the enumeration
                    AuthorizationChannelType.

                    - OTP - One-time password generated by the Payer FSP.

                    - QRCODE - QR code used as One Time Password.

                    - U2F - U2F is a new addition isolated to Thirdparty stream.
                - title: AuthorizationResponseType
                  description: >
                    Enum containing response information; if the customer
                    entered the

                    authentication value, rejected the transaction, or requested
                    a

                    resend of the authentication value.
                  type: string
                  enum: &ref_73
                    - ENTERED
                    - REJECTED
                    - RESEND
                - title: AuthorizationsPostRequest
                  description: POST /authorizations request object.
                  type: object
                  properties: &ref_46
                    authenticationType:
                      title: AuthenticationType
                      type: string
                      enum: &ref_12
                        - OTP
                        - QRCODE
                        - U2F
                      description: >-
                        Below are the allowed values for the enumeration
                        AuthenticationType.

                        - OTP - One-time password generated by the Payer FSP.

                        - QRCODE - QR code used as One Time Password.

                        - U2F - U2F is a new addition isolated to Thirdparty
                        stream.
                    retriesLeft:
                      title: Integer
                      type: string
                      pattern: '^[1-9]\d*$'
                      description: >-
                        The API data type Integer is a JSON String consisting of
                        digits only. Negative numbers and leading zeroes are not
                        allowed. The data type is always limited to a specific
                        number of digits.
                    amount:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: &ref_0
                        currency:
                          title: Currency
                          description: >-
                            The currency codes defined in [ISO
                            4217](https://www.iso.org/iso-4217-currency-codes.html)
                            as three-letter alphabetic codes are used as the
                            standard naming representation for currencies.
                          type: string
                          minLength: 3
                          maxLength: 3
                          enum: &ref_7
                            - AED
                            - AFN
                            - ALL
                            - AMD
                            - ANG
                            - AOA
                            - ARS
                            - AUD
                            - AWG
                            - AZN
                            - BAM
                            - BBD
                            - BDT
                            - BGN
                            - BHD
                            - BIF
                            - BMD
                            - BND
                            - BOB
                            - BRL
                            - BSD
                            - BTN
                            - BWP
                            - BYN
                            - BZD
                            - CAD
                            - CDF
                            - CHF
                            - CLP
                            - CNY
                            - COP
                            - CRC
                            - CUC
                            - CUP
                            - CVE
                            - CZK
                            - DJF
                            - DKK
                            - DOP
                            - DZD
                            - EGP
                            - ERN
                            - ETB
                            - EUR
                            - FJD
                            - FKP
                            - GBP
                            - GEL
                            - GGP
                            - GHS
                            - GIP
                            - GMD
                            - GNF
                            - GTQ
                            - GYD
                            - HKD
                            - HNL
                            - HRK
                            - HTG
                            - HUF
                            - IDR
                            - ILS
                            - IMP
                            - INR
                            - IQD
                            - IRR
                            - ISK
                            - JEP
                            - JMD
                            - JOD
                            - JPY
                            - KES
                            - KGS
                            - KHR
                            - KMF
                            - KPW
                            - KRW
                            - KWD
                            - KYD
                            - KZT
                            - LAK
                            - LBP
                            - LKR
                            - LRD
                            - LSL
                            - LYD
                            - MAD
                            - MDL
                            - MGA
                            - MKD
                            - MMK
                            - MNT
                            - MOP
                            - MRO
                            - MUR
                            - MVR
                            - MWK
                            - MXN
                            - MYR
                            - MZN
                            - NAD
                            - NGN
                            - NIO
                            - NOK
                            - NPR
                            - NZD
                            - OMR
                            - PAB
                            - PEN
                            - PGK
                            - PHP
                            - PKR
                            - PLN
                            - PYG
                            - QAR
                            - RON
                            - RSD
                            - RUB
                            - RWF
                            - SAR
                            - SBD
                            - SCR
                            - SDG
                            - SEK
                            - SGD
                            - SHP
                            - SLL
                            - SOS
                            - SPL
                            - SRD
                            - STD
                            - SVC
                            - SYP
                            - SZL
                            - THB
                            - TJS
                            - TMT
                            - TND
                            - TOP
                            - TRY
                            - TTD
                            - TVD
                            - TWD
                            - TZS
                            - UAH
                            - UGX
                            - USD
                            - UYU
                            - UZS
                            - VEF
                            - VND
                            - VUV
                            - WST
                            - XAF
                            - XCD
                            - XDR
                            - XOF
                            - XPF
                            - YER
                            - ZAR
                            - ZMW
                            - ZWD
                        amount:
                          title: Amount
                          type: string
                          pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
                          description: >-
                            The API data type Amount is a JSON String in a
                            canonical format that is restricted by a regular
                            expression for interoperability reasons. This
                            pattern does not allow any trailing zeroes at all,
                            but allows an amount without a minor currency unit.
                            It also only allows four digits in the minor
                            currency unit; a negative value is not allowed.
                            Using more than 18 digits in the major currency unit
                            is not allowed.
                          example: '123.45'
                      required: &ref_1
                        - currency
                        - amount
                    transactionId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    transactionRequestId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    quote:
                      title: QuotesIDPutResponse
                      type: object
                      description: 'The object sent in the PUT /quotes/{ID} callback.'
                      properties: &ref_67
                        transferAmount:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_0
                          required: *ref_1
                        payeeReceiveAmount:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_0
                          required: *ref_1
                        payeeFspFee:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_0
                          required: *ref_1
                        payeeFspCommission:
                          title: Money
                          type: object
                          description: Data model for the complex type Money.
                          properties: *ref_0
                          required: *ref_1
                        expiration:
                          title: DateTime
                          type: string
                          pattern: >-
                            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                          description: >-
                            The API data type DateTime is a JSON String in a
                            lexical format that is restricted by a regular
                            expression for interoperability reasons. The format
                            is according to [ISO
                            8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                            expressed in a combined date, time and time zone
                            format. A more readable version of the format is
                            yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                            "2016-05-24T08:38:08.699-04:00",
                            "2016-05-24T08:38:08.699Z" (where Z indicates Zulu
                            time zone, same as UTC).
                          example: '2016-05-24T08:38:08.699-04:00'
                        geoCode:
                          title: GeoCode
                          type: object
                          description: >-
                            Data model for the complex type GeoCode. Indicates
                            the geographic location from where the transaction
                            was initiated.
                          properties: &ref_10
                            latitude:
                              title: Latitude
                              type: string
                              pattern: >-
                                ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
                              description: >-
                                The API data type Latitude is a JSON String in a
                                lexical format that is restricted by a regular
                                expression for interoperability reasons.
                              example: '+45.4215'
                            longitude:
                              title: Longitude
                              type: string
                              pattern: >-
                                ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
                              description: >-
                                The API data type Longitude is a JSON String in
                                a lexical format that is restricted by a regular
                                expression for interoperability reasons.
                              example: '+75.6972'
                          required: &ref_11
                            - latitude
                            - longitude
                        ilpPacket:
                          title: IlpPacket
                          type: string
                          pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                          minLength: 1
                          maxLength: 32768
                          description: >-
                            Information for recipient (transport layer
                            information).
                          example: >-
                            AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                        condition:
                          title: IlpCondition
                          type: string
                          pattern: '^[A-Za-z0-9-_]{43}$'
                          maxLength: 48
                          description: >-
                            Condition that must be attached to the transfer by
                            the Payer.
                        extensionList:
                          title: ExtensionList
                          type: object
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          properties: &ref_3
                            extension:
                              type: array
                              items:
                                title: Extension
                                type: object
                                description: Data model for the complex type Extension.
                                properties: &ref_74
                                  key:
                                    title: ExtensionKey
                                    type: string
                                    minLength: 1
                                    maxLength: 32
                                    description: Extension key.
                                  value:
                                    title: ExtensionValue
                                    type: string
                                    minLength: 1
                                    maxLength: 128
                                    description: Extension value.
                                required: &ref_75
                                  - key
                                  - value
                              minItems: 1
                              maxItems: 16
                              description: Number of Extension elements.
                          required: &ref_4
                            - extension
                      required: &ref_68
                        - transferAmount
                        - expiration
                        - ilpPacket
                        - condition
                  required: &ref_47
                    - authenticationType
                    - retriesLeft
                    - amount
                    - transactionId
                    - transactionRequestId
                    - quote
                  additionalProperties: false
                - title: ConsentsIDPatchResponse
                  description: |
                    PATCH /consents/{ID} request object.

                    Sent to both the PISP and DFSP when a consent is revoked.
                  type: object
                  properties: &ref_55
                    status:
                      title: ConsentStatusType
                      type: string
                      enum: &ref_2
                        - REVOKED
                      description: >
                        The status of the Consent.

                        - "REVOKED" - The Consent is no longer valid and has
                        been revoked.
                    revokedAt:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                  required: &ref_56
                    - status
                    - revokedAt
                - title: ConsentStatusType
                  type: string
                  enum: *ref_2
                  description: >
                    The status of the Consent.

                    - "REVOKED" - The Consent is no longer valid and has been
                    revoked.
                - title: IlpFulfilment
                  type: string
                  pattern: '^[A-Za-z0-9-_]{43}$'
                  maxLength: 48
                  description: >-
                    Fulfilment that must be attached to the transfer by the
                    Payee.
                  example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                - title: Note
                  type: string
                  minLength: 1
                  maxLength: 128
                  description: Memo assigned to transaction.
                  example: Note sent to Payee.
                - title: PartyResult
                  type: object
                  description: Data model for the complex type PartyResult.
                  properties: &ref_77
                    partyId:
                      description: Data model for the complex type PartyIdInfo.
                      title: PartyIdInfo
                      type: object
                      properties: &ref_5
                        partyIdType:
                          title: PartyIdType
                          type: string
                          enum: &ref_76
                            - MSISDN
                            - EMAIL
                            - PERSONAL_ID
                            - BUSINESS
                            - DEVICE
                            - ACCOUNT_ID
                            - IBAN
                            - ALIAS
                            - CONSENT
                            - THIRD_PARTY_LINK
                          description: >
                            This is a variant based on FSPIOP `PartyIdType`
                            specification.

                            Main difference being the CONSENT and
                            THIRD_PARTY_LINK enums.


                            Below are the allowed values for the enumeration.

                            - MSISDN - An MSISDN (Mobile Station International
                            Subscriber Directory

                            Number, that is, the phone number) is used as
                            reference to a participant.

                            The MSISDN identifier should be in international
                            format according to the

                            [ITU-T E.164
                            standard](https://www.itu.int/rec/T-REC-E.164/en).

                            Optionally, the MSISDN may be prefixed by a single
                            plus sign, indicating the

                            international prefix.

                            - EMAIL - An email is used as reference to a

                            participant. The format of the email should be
                            according to the informational

                            [RFC 3696](https://tools.ietf.org/html/rfc3696).

                            - PERSONAL_ID - A personal identifier is used as
                            reference to a participant.

                            Examples of personal identification are passport
                            number, birth certificate

                            number, and national registration number. The
                            identifier number is added in

                            the PartyIdentifier element. The personal identifier
                            type is added in the

                            PartySubIdOrType element.

                            - BUSINESS - A specific Business (for example, an
                            organization or a company)

                            is used as reference to a participant. The BUSINESS
                            identifier can be in any

                            format. To make a transaction connected to a
                            specific username or bill number

                            in a Business, the PartySubIdOrType element should
                            be used.

                            - DEVICE - A specific device (for example, a POS or
                            ATM) ID connected to a

                            specific business or organization is used as
                            reference to a Party.

                            For referencing a specific device under a specific
                            business or organization,

                            use the PartySubIdOrType element.

                            - ACCOUNT_ID - A bank account number or FSP account
                            ID should be used as

                            reference to a participant. The ACCOUNT_ID
                            identifier can be in any format,

                            as formats can greatly differ depending on country
                            and FSP.

                            - IBAN - A bank account number or FSP account ID is
                            used as reference to a

                            participant. The IBAN identifier can consist of up
                            to 34 alphanumeric

                            characters and should be entered without whitespace.

                            - ALIAS An alias is used as reference to a
                            participant. The alias should be

                            created in the FSP as an alternative reference to an
                            account owner.

                            Another example of an alias is a username in the FSP
                            system.

                            The ALIAS identifier can be in any format. It is
                            also possible to use the

                            PartySubIdOrType element for identifying an account
                            under an Alias defined

                            by the PartyIdentifier.

                            - CONSENT - TBD

                            - THIRD_PARTY_LINK - TBD
                          example: PERSONAL_ID
                        partyIdentifier:
                          title: PartyIdentifier
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Identifier of the Party.
                          example: '16135551212'
                        partySubIdOrType:
                          title: PartySubIdOrType
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: >-
                            Either a sub-identifier of a PartyIdentifier, or a
                            sub-type of the PartyIdType, normally a
                            PersonalIdentifierType.
                        fspId:
                          title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                        extensionList:
                          title: ExtensionList
                          type: object
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          properties: *ref_3
                          required: *ref_4
                      required: &ref_6
                        - partyIdType
                        - partyIdentifier
                    errorInformation:
                      description: Data model for the complex type ErrorInformation.
                      title: ErrorInformation
                      type: object
                      properties: &ref_14
                        errorCode:
                          title: ErrorCode
                          type: string
                          pattern: '^[1-9]\d{3}$'
                          description: >-
                            The API data type ErrorCode is a JSON String of four
                            characters, consisting of digits only. Negative
                            numbers are not allowed. A leading zero is not
                            allowed. Each error code in the API is a four-digit
                            number, for example, 1234, where the first number (1
                            in the example) represents the high-level error
                            category, the second number (2 in the example)
                            represents the low-level error category, and the
                            last two numbers (34 in the example) represent the
                            specific error.
                          example: '5100'
                        errorDescription:
                          title: ErrorDescription
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Error description string.
                        extensionList:
                          title: ExtensionList
                          type: object
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          properties: *ref_3
                          required: *ref_4
                      required: &ref_15
                        - errorCode
                        - errorDescription
                  required: &ref_78
                    - partyId
                - title: ParticipantsPostRequest
                  type: object
                  description: The object sent in the POST /participants request.
                  properties: &ref_79
                    requestId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    partyList:
                      type: array
                      items:
                        title: PartyIdInfo
                        type: object
                        description: Data model for the complex type PartyIdInfo.
                        properties: *ref_5
                        required: *ref_6
                      minItems: 1
                      maxItems: 10000
                      description: >
                        List of PartyIdInfo elements that the client would like
                        to update

                        or create FSP information about.
                    currency:
                      title: Currency
                      description: >-
                        The currency codes defined in [ISO
                        4217](https://www.iso.org/iso-4217-currency-codes.html)
                        as three-letter alphabetic codes are used as the
                        standard naming representation for currencies.
                      type: string
                      minLength: 3
                      maxLength: 3
                      enum: *ref_7
                  required: &ref_80
                    - requestId
                    - partyList
                - title: PartiesTypeIDPutResponse
                  type: object
                  description: >
                    The object sent in the PUT /parties/{Type}/{ID} callback.


                    This is a variant based on FSPIOP `PartiesTypeIDPutResponse`
                    specification.

                    Main difference being that it returns a `Party` with the
                    newly added

                    `accounts` property.
                  properties: &ref_87
                    party:
                      title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: &ref_8
                        accounts:
                          title: AccountList
                          type: object
                          description: Data model for the complex type AccountList.
                          properties: &ref_83
                            account:
                              type: array
                              items:
                                title: Account
                                type: object
                                description: Data model for the complex type Account.
                                properties: &ref_81
                                  address:
                                    title: AccountAddress
                                    type: string
                                    description: >
                                      A long-lived unique account identifier
                                      provided by the DFSP. This MUST NOT

                                      be Bank Account Number or anything that
                                      may expose a User's private bank

                                      account information.
                                    pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                                    minLength: 1
                                    maxLength: 1023
                                  currency:
                                    title: Currency
                                    description: >-
                                      The currency codes defined in [ISO
                                      4217](https://www.iso.org/iso-4217-currency-codes.html)
                                      as three-letter alphabetic codes are used
                                      as the standard naming representation for
                                      currencies.
                                    type: string
                                    minLength: 3
                                    maxLength: 3
                                    enum: *ref_7
                                  description:
                                    title: Name
                                    type: string
                                    pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                    description: >-
                                      The API data type Name is a JSON String,
                                      restricted by a regular expression to
                                      avoid characters which are generally not
                                      used in a name.


                                      Regular Expression - The regular
                                      expression for restricting the Name type
                                      is "^(?!\s*$)[\w .,'-]{1,128}$". The
                                      restriction does not allow a string
                                      consisting of whitespace only, all Unicode
                                      characters are allowed, as well as the
                                      period (.) (apostrophe (‘), dash (-),
                                      comma (,) and space characters ( ).


                                      **Note:** In some programming languages,
                                      Unicode support must be specifically
                                      enabled. For example, if Java is used, the
                                      flag UNICODE_CHARACTER_CLASS must be
                                      enabled to allow Unicode characters.
                                required: &ref_82
                                  - currency
                              minItems: 1
                              maxItems: 32
                              description: Accounts associated with the Party.
                          required: &ref_84
                            - account
                        partyIdInfo:
                          title: PartyIdInfo
                          type: object
                          description: Data model for the complex type PartyIdInfo.
                          properties: *ref_5
                          required: *ref_6
                        merchantClassificationCode:
                          title: MerchantClassificationCode
                          type: string
                          pattern: '^[\d]{1,4}$'
                          description: >-
                            A limited set of pre-defined numbers. This list
                            would be a limited set of numbers identifying a set
                            of popular merchant types like School Fees, Pubs and
                            Restaurants, Groceries, etc.
                        name:
                          title: PartyName
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: >-
                            Name of the Party. Could be a real name or a
                            nickname.
                        personalInfo:
                          title: PartyPersonalInfo
                          type: object
                          description: Data model for the complex type PartyPersonalInfo.
                          properties: &ref_86
                            complexName:
                              title: PartyComplexName
                              type: object
                              description: >-
                                Data model for the complex type
                                PartyComplexName.
                              properties: &ref_85
                                firstName:
                                  title: FirstName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: First name of the Party (Name Type).
                                  example: Henrik
                                middleName:
                                  title: MiddleName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: Middle name of the Party (Name Type).
                                  example: Johannes
                                lastName:
                                  title: LastName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: Last name of the Party (Name Type).
                                  example: Karlsson
                            dateOfBirth:
                              title: DateofBirth (type Date)
                              type: string
                              pattern: >-
                                ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
                              description: Date of Birth of the Party.
                              example: '1966-06-16'
                      required: &ref_9
                        - partyIdInfo
                  required: &ref_88
                    - party
                - title: ThirdpartyRequestsTransactionsIDPatchResponse
                  type: object
                  description: >-
                    The object sent in the PATCH
                    /thirdpartyRequests/transactions/{ID} callback.
                  properties: &ref_65
                    transactionId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    transactionRequestState:
                      title: TransactionRequestState
                      type: string
                      enum: &ref_64
                        - RECEIVED
                        - PENDING
                        - ACCEPTED
                        - REJECTED
                      description: >-
                        Below are the allowed values for the enumeration.

                        - RECEIVED - Payer FSP has received the transaction from
                        the Payee FSP.

                        - PENDING - Payer FSP has sent the transaction request
                        to the Payer.

                        - ACCEPTED - Payer has approved the transaction.

                        - REJECTED - Payer has rejected the transaction.
                      example: RECEIVED
                    transactionState:
                      title: TransactionState
                      type: string
                      enum: &ref_13
                        - RECEIVED
                        - PENDING
                        - COMPLETED
                        - REJECTED
                      description: >-
                        Below are the allowed values for the enumeration.

                        - RECEIVED - Payee FSP has received the transaction from
                        the Payer FSP.

                        - PENDING - Payee FSP has validated the transaction.

                        - COMPLETED - Payee FSP has successfully performed the
                        transaction.

                        - REJECTED - Payee FSP has failed to perform the
                        transaction.
                      example: RECEIVED
                  required: &ref_66
                    - transactionId
                    - transactionRequestState
                    - transactionState
                - title: TransactionRequestsPostRequest
                  type: object
                  description: The object sent in the POST /transactionRequests request.
                  properties: &ref_94
                    transactionRequestId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    payee:
                      title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: *ref_8
                      required: *ref_9
                    payer:
                      title: PartyIdInfo
                      type: object
                      description: Data model for the complex type PartyIdInfo.
                      properties: *ref_5
                      required: *ref_6
                    amount:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_0
                      required: *ref_1
                    transactionType:
                      title: TransactionType
                      type: object
                      description: Data model for the complex type TransactionType.
                      properties: &ref_60
                        scenario:
                          title: TransactionScenario
                          type: string
                          enum: &ref_89
                            - DEPOSIT
                            - WITHDRAWAL
                            - TRANSFER
                            - PAYMENT
                            - REFUND
                          description: >-
                            Below are the allowed values for the enumeration.

                            - DEPOSIT - Used for performing a Cash-In (deposit)
                            transaction. In a normal scenario, electronic funds
                            are transferred from a Business account to a
                            Consumer account, and physical cash is given from
                            the Consumer to the Business User.

                            - WITHDRAWAL - Used for performing a Cash-Out
                            (withdrawal) transaction. In a normal scenario,
                            electronic funds are transferred from a Consumer’s
                            account to a Business account, and physical cash is
                            given from the Business User to the Consumer.

                            - TRANSFER - Used for performing a P2P (Peer to
                            Peer, or Consumer to Consumer) transaction.

                            - PAYMENT - Usually used for performing a
                            transaction from a Consumer to a Merchant or
                            Organization, but could also be for a B2B (Business
                            to Business) payment. The transaction could be
                            online for a purchase in an Internet store, in a
                            physical store where both the Consumer and Business
                            User are present, a bill payment, a donation, and so
                            on.

                            - REFUND - Used for performing a refund of
                            transaction.
                          example: DEPOSIT
                        subScenario:
                          title: TransactionSubScenario
                          type: string
                          pattern: '^[A-Z_]{1,32}$'
                          description: >-
                            Possible sub-scenario, defined locally within the
                            scheme (UndefinedEnum Type).
                          example: LOCALLY_DEFINED_SUBSCENARIO
                        initiator:
                          title: TransactionInitiator
                          type: string
                          enum: &ref_90
                            - PAYER
                            - PAYEE
                          description: >-
                            Below are the allowed values for the enumeration.

                            - PAYER - Sender of funds is initiating the
                            transaction. The account to send from is either
                            owned by the Payer or is connected to the Payer in
                            some way.

                            - PAYEE - Recipient of the funds is initiating the
                            transaction by sending a transaction request. The
                            Payer must approve the transaction, either
                            automatically by a pre-generated OTP or by
                            pre-approval of the Payee, or by manually approving
                            in his or her own Device.
                          example: PAYEE
                        initiatorType:
                          title: TransactionInitiatorType
                          type: string
                          enum: &ref_91
                            - CONSUMER
                            - AGENT
                            - BUSINESS
                            - DEVICE
                          description: >-
                            Below are the allowed values for the enumeration.

                            - CONSUMER - Consumer is the initiator of the
                            transaction.

                            - AGENT - Agent is the initiator of the transaction.

                            - BUSINESS - Business is the initiator of the
                            transaction.

                            - DEVICE - Device is the initiator of the
                            transaction.
                          example: CONSUMER
                        refundInfo:
                          title: Refund
                          type: object
                          description: Data model for the complex type Refund.
                          properties: &ref_92
                            originalTransactionId:
                              title: CorrelationId
                              type: string
                              pattern: >-
                                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                              description: >-
                                Identifier that correlates all messages of the
                                same sequence. The API data type UUID
                                (Universally Unique Identifier) is a JSON String
                                in canonical format, conforming to [RFC
                                4122](https://tools.ietf.org/html/rfc4122), that
                                is restricted by a regular expression for
                                interoperability reasons. A UUID is always 36
                                characters long, 32 hexadecimal symbols and 4
                                dashes (‘-‘).
                              example: b51ec534-ee48-4575-b6a9-ead2955b8069
                            refundReason:
                              title: RefundReason
                              type: string
                              minLength: 1
                              maxLength: 128
                              description: Reason for the refund.
                              example: Free text indicating reason for the refund.
                          required: &ref_93
                            - originalTransactionId
                        balanceOfPayments:
                          title: BalanceOfPayments
                          type: string
                          pattern: '^[1-9]\d{2}$'
                          description: >-
                            (BopCode) The API data type
                            [BopCode](https://www.imf.org/external/np/sta/bopcode/)
                            is a JSON String of 3 characters, consisting of
                            digits only. Negative numbers are not allowed. A
                            leading zero is not allowed.
                          example: '123'
                      required: &ref_61
                        - scenario
                        - initiator
                        - initiatorType
                    note:
                      title: Note
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Memo assigned to transaction.
                      example: Note sent to Payee.
                    geoCode:
                      title: GeoCode
                      type: object
                      description: >-
                        Data model for the complex type GeoCode. Indicates the
                        geographic location from where the transaction was
                        initiated.
                      properties: *ref_10
                      required: *ref_11
                    authenticationType:
                      title: AuthenticationType
                      type: string
                      enum: *ref_12
                      description: >-
                        Below are the allowed values for the enumeration
                        AuthenticationType.

                        - OTP - One-time password generated by the Payer FSP.

                        - QRCODE - QR code used as One Time Password.

                        - U2F - U2F is a new addition isolated to Thirdparty
                        stream.
                    expiration:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_3
                      required: *ref_4
                  required: &ref_95
                    - transactionRequestId
                    - payee
                    - payer
                    - amount
                    - transactionType
                - title: TransactionState
                  type: string
                  enum: *ref_13
                  description: >-
                    Below are the allowed values for the enumeration.

                    - RECEIVED - Payee FSP has received the transaction from the
                    Payer FSP.

                    - PENDING - Payee FSP has validated the transaction.

                    - COMPLETED - Payee FSP has successfully performed the
                    transaction.

                    - REJECTED - Payee FSP has failed to perform the
                    transaction.
                  example: RECEIVED
      responses:
        '200':
          description: Ok
  '/accounts/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: &ref_35
          type: string
        description: The identifier value.
      - name: Date
        in: header
        schema: &ref_38
          type: string
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: &ref_39
          type: string
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: &ref_40
          type: string
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: &ref_41
          type: string
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: &ref_42
          type: string
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: &ref_43
          type: string
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: &ref_44
          type: string
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: &ref_45
          type: string
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      operationId: GetAccountsByUserId
      summary: GetAccountsByUserId
      description: >
        The HTTP request `GET /accounts/{ID}` is used to retrieve the list of
        potential accounts available for linking.
      tags:
        - accounts
        - sampled
      parameters:
        - name: Accept
          in: header
          required: true
          schema: &ref_48
            type: string
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: &ref_19
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: &ref_16
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties: *ref_14
                    required: *ref_15
          headers: &ref_20
            Content-Length:
              required: false
              schema: &ref_17
                type: integer
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: &ref_18
                type: string
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '401':
          description: Unauthorized
          content: &ref_21
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_22
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '403':
          description: Forbidden
          content: &ref_23
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_24
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '404':
          description: Not Found
          content: &ref_25
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_26
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '405':
          description: Method Not Allowed
          content: &ref_27
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_28
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '406':
          description: Not Acceptable
          content: &ref_29
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_30
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '501':
          description: Not Implemented
          content: &ref_31
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_32
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '503':
          description: Service Unavailable
          content: &ref_33
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_16
          headers: &ref_34
            Content-Length:
              required: false
              schema: *ref_17
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_18
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
    put:
      description: >
        The HTTP request `PUT /accounts/{ID}` is used to return the list of
        potential accounts available for linking
      operationId: UpdateAccountsByUserId
      summary: UpdateAccountsByUserId
      tags:
        - accounts
        - sampled
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: &ref_36
            type: integer
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: &ref_37
            type: string
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: AccountsIDPutResponse
              type: array
              items: &ref_96
                type: object
                description: |
                  The object sent in a `PUT /accounts/{ID}` request.
                properties:
                  accountNickname:
                    title: AccountAddress
                    type: string
                    description: >
                      A long-lived unique account identifier provided by the
                      DFSP. This MUST NOT

                      be Bank Account Number or anything that may expose a
                      User's private bank

                      account information.
                    pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                    minLength: 1
                    maxLength: 1023
                  id:
                    title: AccountAddress
                    type: string
                    description: >
                      A long-lived unique account identifier provided by the
                      DFSP. This MUST NOT

                      be Bank Account Number or anything that may expose a
                      User's private bank

                      account information.
                    pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                    minLength: 1
                    maxLength: 1023
                  currency:
                    title: Currency
                    description: >-
                      The currency codes defined in [ISO
                      4217](https://www.iso.org/iso-4217-currency-codes.html) as
                      three-letter alphabetic codes are used as the standard
                      naming representation for currencies.
                    type: string
                    minLength: 3
                    maxLength: 3
                    enum: *ref_7
                required:
                  - accountNickname
                  - id
                  - currency
            example:
              - accountNickname: dfspa.user.nickname1
                id: dfspa.username.1234
                currency: ZAR
              - accountNickname: dfspa.user.nickname2
                id: dfspa.username.5678
                currency: USD
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/accounts/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      description: >
        The HTTP request `PUT /accounts/{ID}/error` is used to return error
        information
      operationId: UpdateAccountsByUserIdError
      summary: UpdateAccountsByUserIdError
      tags:
        - accounts
        - sampled
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: &ref_53
                errorInformation:
                  title: ErrorInformation
                  type: object
                  description: Data model for the complex type ErrorInformation.
                  properties: *ref_14
                  required: *ref_15
              required: &ref_54
                - errorInformation
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  /authorizations:
    post:
      description: >
        The HTTP request `POST /authorizations` is used to request the Payer to
        enter the applicable credentials in the PISP system.
      operationId: AuthorizationsPostRequest
      tags:
        - authorizations
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              title: AuthorizationsPostRequest
              description: POST /authorizations request object.
              type: object
              properties: *ref_46
              required: *ref_47
              additionalProperties: false
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/authorizations/{ID}':
    put:
      description: >
        The callback PUT /authorizations/ is used to inform the client of the

        result of a previously-requested authorization. The ID in the URI should

        contain the one that was used in the POST /authorizations/
        requestBody.transactionRequestId @ OUTBOUND
      operationId: InboundAuthorizationsIDPutResponse
      tags:
        - authorizations
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            information about result of required (via POST) /authorization
          content:
            application/json:
              schema:
                title: AuthorizationsIDPutResponse
                type: object
                description: 'The object sent in the PUT /authorizations/{ID} callback.'
                properties: &ref_100
                  authenticationInfo:
                    title: AuthenticationInfo
                    type: object
                    description: Data model for the complex type AuthenticationInfo.
                    properties: &ref_69
                      authentication:
                        title: AuthenticationType
                        type: string
                        enum: *ref_12
                        description: >-
                          Below are the allowed values for the enumeration
                          AuthenticationType.

                          - OTP - One-time password generated by the Payer FSP.

                          - QRCODE - QR code used as One Time Password.

                          - U2F - U2F is a new addition isolated to Thirdparty
                          stream.
                      authenticationValue:
                        title: AuthenticationValue
                        anyOf: &ref_99
                          - title: OtpValue
                            type: string
                            pattern: '^\d{3,10}$'
                            description: >-
                              The API data type OtpValue is a JSON String of 3
                              to 10 characters, consisting of digits only.
                              Negative numbers are not allowed. One or more
                              leading zeros are allowed.
                          - title: QRCODE
                            type: string
                            minLength: 1
                            maxLength: 64
                            description: QR code used as a One Time Password.
                          - title: U2FPinValue
                            type: object
                            description: >
                              U2F challenge-response, where payer FSP verifies
                              if the response provided by end-user device
                              matches the previously registered key.
                            properties: &ref_97
                              pinValue:
                                allOf:
                                  - title: U2FPIN
                                    type: string
                                    pattern: '^\S{1,64}$'
                                    minLength: 1
                                    maxLength: 64
                                    description: >
                                      U2F challenge-response, where payer FSP
                                      verifies if the response provided by
                                      end-user device matches the previously
                                      registered key.
                                description: U2F challenge-response.
                              counter:
                                allOf:
                                  - title: Integer
                                    type: string
                                    pattern: '^[1-9]\d*$'
                                    description: >-
                                      The API data type Integer is a JSON String
                                      consisting of digits only. Negative
                                      numbers and leading zeroes are not
                                      allowed. The data type is always limited
                                      to a specific number of digits.
                                description: >-
                                  Sequential counter used for cloning detection.
                                  Present only for U2F authentication.
                            required: &ref_98
                              - pinValue
                              - counter
                        pattern: '^\d{3,10}$|^\S{1,64}$'
                        description: >-
                          Contains the authentication value. The format depends
                          on the authentication type used in the
                          AuthenticationInfo complex type.
                    required: &ref_70
                      - authentication
                      - authenticationValue
                  responseType:
                    title: AuthorizationResponse
                    type: string
                    enum: &ref_71
                      - ENTERED
                      - REJECTED
                      - RESEND
                    description: >-
                      Below are the allowed values for the enumeration.

                      - ENTERED - Consumer entered the authentication value.

                      - REJECTED - Consumer rejected the transaction.

                      - RESEND - Consumer requested to resend the authentication
                      value.
                    example: ENTERED
                required: &ref_101
                  - responseType
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  /health:
    get:
      tags:
        - health
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
      operationId: HealthGet
      summary: Health check endpoint
      description: >-
        The HTTP request GET /health is used to return the current status of the
        API.
  /metrics:
    get:
      tags:
        - health
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /consentRequests:
    post:
      tags:
        - consentRequests
        - sampled
      operationId: CreateConsentRequest
      summary: CreateConsentRequest
      description: >
        A request from a PISP to a DFSP to start the process of delegating
        consent
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
        - name: Date
          in: header
          schema: *ref_38
          required: true
          description: >-
            The `Date` header field indicates the date when the request was
            sent.
        - name: X-Forwarded-For
          in: header
          schema: *ref_39
          required: false
          description: >-
            The `X-Forwarded-For` header field is an unofficially accepted
            standard used for informational purposes of the originating client
            IP address, as a request might pass multiple proxies, firewalls, and
            so on. Multiple `X-Forwarded-For` values should be expected and
            supported by implementers of the API.


            **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
            7239](https://tools.ietf.org/html/rfc7239). However, to this point
            RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema: *ref_40
          required: true
          description: >-
            The `FSPIOP-Source` header field is a non-HTTP standard field used
            by the API for identifying the sender of the HTTP request. The field
            should be set by the original sender of the request. Required for
            routing and signature verification (see header field
            `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema: *ref_41
          required: false
          description: >-
            The `FSPIOP-Destination` header field is a non-HTTP standard field
            used by the API for HTTP header based routing of requests and
            responses to the destination. The field must be set by the original
            sender of the request if the destination is known (valid for all
            services except GET /parties) so that any entities between the
            client and the server do not need to parse the payload for routing
            purposes. If the destination is not known (valid for service GET
            /parties), the field should be left empty.
        - name: FSPIOP-Encryption
          in: header
          schema: *ref_42
          required: false
          description: >-
            The `FSPIOP-Encryption` header field is a non-HTTP standard field
            used by the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema: *ref_43
          required: false
          description: >-
            The `FSPIOP-Signature` header field is a non-HTTP standard field
            used by the API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema: *ref_44
          required: false
          description: >-
            The `FSPIOP-URI` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service URI.
            Required if signature verification is used, for more information,
            see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema: *ref_45
          required: false
          description: >-
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
            used by the API for signature verification, should contain the
            service HTTP method. Required if signature verification is used, for
            more information, see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        description: The consentRequest to create
        required: true
        content:
          application/json:
            schema:
              title: ConsentRequestsPostRequest
              type: object
              description: The object sent in a `POST /consentRequests` request.
              properties: &ref_104
                id:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                initiatorId:
                  type: string
                  description: >-
                    The id of the PISP who will initiate transactions on a
                    user's behalf.
                scopes:
                  type: array
                  items:
                    title: Scope
                    type: object
                    description: Scope + Account Identifier mapping for a Consent.
                    example: |
                      {
                        accountId: "dfsp.username.5678",
                        actions: [ "accounts.transfer", "accounts.getBalance" ]
                      }
                    properties: &ref_49
                      accountId:
                        title: AccountAddress
                        type: string
                        description: >
                          A long-lived unique account identifier provided by the
                          DFSP. This MUST NOT

                          be Bank Account Number or anything that may expose a
                          User's private bank

                          account information.
                        pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                        minLength: 1
                        maxLength: 1023
                      actions:
                        type: array
                        items:
                          title: ConsentScopeType
                          type: string
                          enum: &ref_102
                            - accounts.getBalance
                            - accounts.transfer
                          description: >
                            The scopes requested for a ConsentRequest.

                            - "accounts.getBalance" - Get the balance of a given
                            account.

                            - "accounts.transfer" - Initiate a transfer from an
                            account.
                    required: &ref_50
                      - accountId
                      - actions
                authChannels:
                  type: array
                  items:
                    title: ConsentRequestChannelType
                    type: string
                    enum: &ref_103
                      - WEB
                      - OTP
                    description: |
                      The auth channel being used for the consentRequest.
                      - "WEB" - The Web auth channel.
                      - "OTP" - The OTP auth channel.
                callbackUri:
                  type: string
                  description: >-
                    The callback uri that the user will be redirected to after
                    completing the WEB auth channel.
              required: &ref_105
                - id
                - initiatorId
                - scopes
                - authChannels
                - callbackUri
            example:
              id: '456'
              initiatorId: pispA
              authChannels:
                - WEB
                - OTP
              scopes:
                - accountId: dfspa.username.1234
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
                - accountId: dfspa.username.5678
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
              callbackUri: 'pisp-app://callback.com'
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/consentRequests/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - consentRequests
        - sampled
      operationId: UpdateConsentRequest
      summary: UpdateConsentRequest
      description: >
        DFSP updates auth channels and/or auth uri in response to
        consentRequest.


        PISP updates the consentRequest to include authorization token from
        their user,

        which the DFSP is to then verify.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentRequestsIDPutResponseWeb
                  type: object
                  description: >
                    The object sent in a `PUT /consentRequests/{ID}` request.


                    Schema used in the request consent phase of the account
                    linking web flow,

                    the result is the PISP being instructed on a specific URL
                    where this

                    supposed user should be redirected. This URL should be a
                    place where

                    the user can prove their identity (e.g., by logging in).
                  properties: &ref_106
                    initiatorId:
                      type: string
                      description: >-
                        The id of the PISP who will initiate transactions on a
                        user's behalf.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    authChannels:
                      type: array
                      items:
                        title: ConsentRequestChannelTypeWeb
                        type: string
                        enum: &ref_51
                          - WEB
                        description: >
                          The web auth channel being used for PUT
                          consentRequest/{ID} request.
                    callbackUri:
                      type: string
                      description: >-
                        The callback uri that the user will be redirected to
                        after completing the WEB auth channel.
                    authUri:
                      type: string
                      description: >-
                        The callback uri that the pisp app redirects to for user
                        to complete their login.
                  required: &ref_107
                    - initiatorId
                    - scopes
                    - authChannels
                    - callbackUri
                    - authUri
                  additionalProperties: false
                - title: ConsentRequestsIDPutResponseWebAuth
                  type: object
                  description: >
                    The object sent in a `PUT /consentRequests/{ID}` request.


                    Schema used in the authentication phase of the account
                    linking flow,

                    the user is expected to prove their identity to the DFSP by
                    passing a OTP

                    or secret to the PISP.
                  properties: &ref_108
                    initiatorId:
                      type: string
                      description: >-
                        The id of the PISP who will initiate transactions on a
                        user's behalf.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    authChannels:
                      type: array
                      items:
                        title: ConsentRequestChannelTypeWeb
                        type: string
                        enum: *ref_51
                        description: >
                          The web auth channel being used for PUT
                          consentRequest/{ID} request.
                    callbackUri:
                      type: string
                      description: >-
                        The callback uri that the user will be redirected to
                        after completing the WEB auth channel.
                    authUri:
                      type: string
                      description: >-
                        The callback uri that the pisp app redirects to for user
                        to complete their login.
                    authToken:
                      type: string
                      description: The Auth token from the OTP or redirect to pisp app.
                  required: &ref_109
                    - initiatorId
                    - scopes
                    - authChannels
                    - callbackUri
                    - authUri
                    - authToken
                  additionalProperties: false
                - title: ConsentRequestsIDPutResponseOTP
                  type: object
                  description: >
                    The object sent in a `PUT /consentRequests/{ID}` request.


                    Schema used in the request consent phase of the account
                    linking OTP/SMS flow.
                  properties: &ref_110
                    initiatorId:
                      type: string
                      description: >-
                        The id of the PISP who will initiate transactions on a
                        user's behalf.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    authChannels:
                      type: array
                      items:
                        title: ConsentRequestChannelTypeOTP
                        type: string
                        enum: &ref_52
                          - OTP
                        description: >
                          The OTP auth channel being used for PUT
                          consentRequest/{ID} request.
                    callbackUri:
                      type: string
                      description: >-
                        The callback uri that the user will be redirected to
                        after completing the WEB auth channel.
                  required: &ref_111
                    - initiatorId
                    - scopes
                    - authChannels
                    - callbackUri
                  additionalProperties: false
                - title: ConsentRequestsIDPutResponseOTPAuth
                  type: object
                  description: >
                    The object sent in a `PUT /consentRequests/{ID}` request.


                    Schema used in the authentication phase of the account
                    linking flow,

                    the user is expected to prove their identity to the DFSP by
                    passing a OTP

                    or secret to the PISP.
                  properties: &ref_112
                    initiatorId:
                      type: string
                      description: >-
                        The id of the PISP who will initiate transactions on a
                        user's behalf.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    authChannels:
                      type: array
                      items:
                        title: ConsentRequestChannelTypeOTP
                        type: string
                        enum: *ref_52
                        description: >
                          The OTP auth channel being used for PUT
                          consentRequest/{ID} request.
                    callbackUri:
                      type: string
                      description: >-
                        The callback uri that the user will be redirected to
                        after completing the WEB auth channel.
                    authToken:
                      type: string
                      description: The Auth token from the OTP or redirect to pisp app.
                  required: &ref_113
                    - initiatorId
                    - scopes
                    - authChannels
                    - callbackUri
                    - authToken
                  additionalProperties: false
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    patch:
      tags:
        - consentRequests
        - sampled
      operationId: PatchConsentRequest
      summary: PatchConsentRequest
      description: >
        PISP sends user's OTP token to a DFSP to verify user trusts
        aforementioned PISP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ConsentRequestsIDPatchRequest
              type: object
              description: 'The object sent in a `PATCH /consentRequests/{ID}` request.'
              properties: &ref_114
                authToken:
                  title: OtpValue
                  type: string
                  pattern: '^\d{3,10}$'
                  description: >-
                    The API data type OtpValue is a JSON String of 3 to 10
                    characters, consisting of digits only. Negative numbers are
                    not allowed. One or more leading zeros are allowed.
              required: &ref_115
                - authToken
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/consentRequests/{ID}/error':
    put:
      tags:
        - consentRequests
      operationId: NotifyErrorConsentRequests
      summary: NotifyErrorConsentRequests
      description: >
        DFSP responds to the PISP if something went wrong with validating an OTP
        or secret.
      parameters:
        - name: ID
          in: path
          required: true
          schema: *ref_35
          description: The identifier value.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
        - name: Date
          in: header
          schema: *ref_38
          required: true
          description: >-
            The `Date` header field indicates the date when the request was
            sent.
        - name: X-Forwarded-For
          in: header
          schema: *ref_39
          required: false
          description: >-
            The `X-Forwarded-For` header field is an unofficially accepted
            standard used for informational purposes of the originating client
            IP address, as a request might pass multiple proxies, firewalls, and
            so on. Multiple `X-Forwarded-For` values should be expected and
            supported by implementers of the API.


            **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
            7239](https://tools.ietf.org/html/rfc7239). However, to this point
            RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema: *ref_40
          required: true
          description: >-
            The `FSPIOP-Source` header field is a non-HTTP standard field used
            by the API for identifying the sender of the HTTP request. The field
            should be set by the original sender of the request. Required for
            routing and signature verification (see header field
            `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema: *ref_41
          required: false
          description: >-
            The `FSPIOP-Destination` header field is a non-HTTP standard field
            used by the API for HTTP header based routing of requests and
            responses to the destination. The field must be set by the original
            sender of the request if the destination is known (valid for all
            services except GET /parties) so that any entities between the
            client and the server do not need to parse the payload for routing
            purposes. If the destination is not known (valid for service GET
            /parties), the field should be left empty.
        - name: FSPIOP-Encryption
          in: header
          schema: *ref_42
          required: false
          description: >-
            The `FSPIOP-Encryption` header field is a non-HTTP standard field
            used by the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema: *ref_43
          required: false
          description: >-
            The `FSPIOP-Signature` header field is a non-HTTP standard field
            used by the API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema: *ref_44
          required: false
          description: >-
            The `FSPIOP-URI` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service URI.
            Required if signature verification is used, for more information,
            see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema: *ref_45
          required: false
          description: >-
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
            used by the API for signature verification, should contain the
            service HTTP method. Required if signature verification is used, for
            more information, see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_53
              required: *ref_54
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  /consents:
    post:
      tags:
        - consents
        - sampled
      operationId: PostConsents
      summary: PostConsents
      description: |
        DFSP sends this request to the PISP after granting consent.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
        - name: Date
          in: header
          schema: *ref_38
          required: true
          description: >-
            The `Date` header field indicates the date when the request was
            sent.
        - name: X-Forwarded-For
          in: header
          schema: *ref_39
          required: false
          description: >-
            The `X-Forwarded-For` header field is an unofficially accepted
            standard used for informational purposes of the originating client
            IP address, as a request might pass multiple proxies, firewalls, and
            so on. Multiple `X-Forwarded-For` values should be expected and
            supported by implementers of the API.


            **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
            7239](https://tools.ietf.org/html/rfc7239). However, to this point
            RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema: *ref_40
          required: true
          description: >-
            The `FSPIOP-Source` header field is a non-HTTP standard field used
            by the API for identifying the sender of the HTTP request. The field
            should be set by the original sender of the request. Required for
            routing and signature verification (see header field
            `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema: *ref_41
          required: false
          description: >-
            The `FSPIOP-Destination` header field is a non-HTTP standard field
            used by the API for HTTP header based routing of requests and
            responses to the destination. The field must be set by the original
            sender of the request if the destination is known (valid for all
            services except GET /parties) so that any entities between the
            client and the server do not need to parse the payload for routing
            purposes. If the destination is not known (valid for service GET
            /parties), the field should be left empty.
        - name: FSPIOP-Encryption
          in: header
          schema: *ref_42
          required: false
          description: >-
            The `FSPIOP-Encryption` header field is a non-HTTP standard field
            used by the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema: *ref_43
          required: false
          description: >-
            The `FSPIOP-Signature` header field is a non-HTTP standard field
            used by the API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema: *ref_44
          required: false
          description: >-
            The `FSPIOP-URI` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service URI.
            Required if signature verification is used, for more information,
            see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema: *ref_45
          required: false
          description: >-
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
            used by the API for signature verification, should contain the
            service HTTP method. Required if signature verification is used, for
            more information, see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ConsentPostRequest
              type: object
              description: The object sent in a `POST /consents` request.
              properties: &ref_116
                consentId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: |
                    Common ID between the PISP and FSP for the Consent object
                    decided by the DFSP who creates the Consent
                    This field is REQUIRED for POST /consent.
                consentRequestId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: |
                    The id of the ConsentRequest that was used to initiate the
                    creation of this Consent.
                scopes:
                  type: array
                  items:
                    title: Scope
                    type: object
                    description: Scope + Account Identifier mapping for a Consent.
                    example: |
                      {
                        accountId: "dfsp.username.5678",
                        actions: [ "accounts.transfer", "accounts.getBalance" ]
                      }
                    properties: *ref_49
                    required: *ref_50
              required: &ref_117
                - consentId
                - consentRequestId
                - scopes
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/consents/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      description: >
        The HTTP request `GET /consents/{ID}` is used to get information
        regarding a consent object created or requested earlier. The `{ID}` in
        the URI should contain the `{ID}` that was used in the `POST /consents`.
        summary: GetConsent
      tags:
        - consents
      operationId: GetConsent
      summary: GetConsent
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    patch:
      description: >
        The HTTP request `PATCH /consents/{ID}` is used in account unlinking

        by a hub hosted auth service and by DFSPs in non-hub hosted scenarios

        to notify participants of a consent being revoked.


        - Called by a `auth-service` to notify a PISP and DFSP of consent status
        in hub hosted scenario.

        - Called by a `DFSP` to notify a PISP of consent status in non-hub
        hosted scenario.
      tags:
        - consents
        - sampled
      operationId: PatchConsent
      summary: PatchConsent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ConsentsIDPatchResponse
              description: |
                PATCH /consents/{ID} request object.

                Sent to both the PISP and DFSP when a consent is revoked.
              type: object
              properties: *ref_55
              required: *ref_56
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    put:
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth
        Service.


        - Called by a `auth-service` to request PISP to add the credential
        details.

        - Called by a `PISP` to after signing a challenge. Sent to an
        `auth-service` for verification.

        - Called by a `auth-service` to notify a DFSP and PISP that a credential
        has been verified and registered.
      tags:
        - consents
        - sampled
      operationId: UpdateConsent
      summary: UpdateConsent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPutResponseSigned
                  type: object
                  description: >
                    The HTTP request `PUT /consents/{ID}` is used by the PISP to
                    update a Consent

                    with a signed challenge and register a credential.


                    Called by a `PISP` to after signing a challenge. Sent to an
                    `auth-service` for verification.
                  properties: &ref_120
                    requestId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        The id of the ConsentRequest that was used to initiate
                        the

                        creation of this Consent.
                    participantId:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    initiatorId:
                      allOf:
                        - title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                      description: PISP identifier who uses this Consent.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    credential:
                      title: SignedCredential
                      type: object
                      description: >
                        A credential used to allow a user to prove their
                        identity and access

                        to an account with a DFSP.


                        SignedCredential is a special formatting of the
                        credential to allow us to be

                        more explicit about the `status` field - it should only
                        ever be PENDING when updating

                        a credential.
                      properties: &ref_118
                        id:
                          type: string
                          description: The id of a Credential.
                        type:
                          title: CredentialType
                          type: string
                          enum: &ref_57
                            - FIDO
                          description: |
                            The type of the Credential.
                            - "FIDO" - A FIDO public/private keypair.
                        status:
                          type: string
                          enum:
                            - PENDING
                          description: The challenge has signed but not yet verified.
                        challenge:
                          title: CredentialChallengeSigned
                          type: object
                          description: |
                            The challenge that has been signed by a PISP.
                          properties: &ref_58
                            payload:
                              type: string
                              description: >-
                                Base64 encoded binary of the challenge that must
                                be answered by the PISP.
                            signature:
                              type: string
                              description: >-
                                Base64 encoded binary string or result of the
                                payload signed by the PISP using the private
                                key.
                          required: &ref_59
                            - payload
                            - signature
                          additionalProperties: false
                        payload:
                          type: string
                          description: >-
                            Base64 encoded bytes - The public key of the
                            Public/Private keypair.
                      required: &ref_119
                        - id
                        - type
                        - status
                        - challenge
                        - payload
                      additionalProperties: false
                  required: &ref_121
                    - requestId
                    - participantId
                    - initiatorId
                    - scopes
                    - credential
                - title: ConsentsIDPutResponseUnsigned
                  type: object
                  description: >
                    The HTTP request `PUT /consents/{ID}` is used to request a
                    PISP to sign a challenge.

                    The `{ID}` in the URI should contain the `{ID}` that was
                    used in the `POST /consents`.


                    Called by a `auth-service` to request PISP to add the
                    credential details.
                  properties: &ref_126
                    requestId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        The id of the ConsentRequest that was used to initiate
                        the

                        creation of this Consent.
                    participantId:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    initiatorId:
                      allOf:
                        - title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                      description: PISP identifier who uses this Consent.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    credential:
                      title: UnsignedCredential
                      type: object
                      description: >
                        A credential used to allow a user to prove their
                        identity and access

                        to an account with a DFSP.


                        UnsignedCredential is a special formatting of the
                        credential to allow us to be

                        more explicit about the `status` field - it should only
                        ever be PENDING when updating

                        a credential.
                      properties: &ref_124
                        type:
                          title: CredentialType
                          type: string
                          enum: *ref_57
                          description: |
                            The type of the Credential.
                            - "FIDO" - A FIDO public/private keypair.
                        status:
                          type: string
                          enum:
                            - PENDING
                          description: >-
                            The challenge has initialized but not yet answered
                            by the PISP.
                        challenge:
                          title: CredentialChallengeSigned
                          type: object
                          description: >
                            The challenge issued by a DFSP that must be answered
                            by the PISP.
                          properties: &ref_122
                            payload:
                              type: string
                              description: >-
                                Base64 encoded binary of the challenge that must
                                be answered by the PISP.
                          required: &ref_123
                            - payload
                          additionalProperties: false
                      required: &ref_125
                        - type
                        - status
                        - challenge
                      additionalProperties: false
                  required: &ref_127
                    - requestId
                    - participantId
                    - initiatorId
                    - scopes
                    - credential
                - title: ConsentsIDPutResponseVerified
                  type: object
                  description: >
                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or
                    Auth-Service to

                    update a Consent object once it has been Verified.


                    Called by a `auth-service` to notify a DFSP and PISP that a
                    credential has been verified and registered.
                  properties: &ref_130
                    requestId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        The id of the ConsentRequest that was used to initiate
                        the

                        creation of this Consent.
                    participantId:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    initiatorId:
                      allOf:
                        - title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                      description: PISP identifier who uses this Consent.
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: Scope + Account Identifier mapping for a Consent.
                        example: |
                          {
                            accountId: "dfsp.username.5678",
                            actions: [ "accounts.transfer", "accounts.getBalance" ]
                          }
                        properties: *ref_49
                        required: *ref_50
                    credential:
                      title: VerifiedCredential
                      type: object
                      description: >
                        A credential used to allow a user to prove their
                        identity and access

                        to an account with a DFSP.


                        VerifiedCredential is a special formatting of the
                        credential to allow us to be

                        more explicit about the `status` field - it should only
                        ever be VERIFIED when updating

                        a credential.
                      properties: &ref_128
                        id:
                          type: string
                          description: The id of a Credential.
                        type:
                          title: CredentialType
                          type: string
                          enum: *ref_57
                          description: |
                            The type of the Credential.
                            - "FIDO" - A FIDO public/private keypair.
                        status:
                          type: string
                          enum:
                            - VERIFIED
                          description: >-
                            The Credential is valid, and ready to be used by the
                            PISP.
                        challenge:
                          title: CredentialChallengeSigned
                          type: object
                          description: |
                            The challenge that has been signed by a PISP.
                          properties: *ref_58
                          required: *ref_59
                          additionalProperties: false
                        payload:
                          type: string
                          description: >-
                            Base64 encoded bytes - The public key of the
                            Public/Private keypair.
                      required: &ref_129
                        - type
                        - status
                        - challenge
                      additionalProperties: false
                  required: &ref_131
                    - requestId
                    - participantId
                    - initiatorId
                    - scopes
                    - credential
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      responses:
        '200':
          description: OK
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    delete:
      description: >
        The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a
        previously created consent.


        - Called by a PISP when a user wants to remove their consent.
      operationId: DeleteConsentByID
      tags:
        - consents
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/consents/{ID}/error':
    put:
      tags:
        - consents
      operationId: NotifyErrorConsents
      summary: NotifyErrorConsents
      description: >
        DFSP responds to the PISP if something went wrong with validating or
        storing consent.
      parameters:
        - name: ID
          in: path
          required: true
          schema: *ref_35
          description: The identifier value.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
        - name: Date
          in: header
          schema: *ref_38
          required: true
          description: >-
            The `Date` header field indicates the date when the request was
            sent.
        - name: X-Forwarded-For
          in: header
          schema: *ref_39
          required: false
          description: >-
            The `X-Forwarded-For` header field is an unofficially accepted
            standard used for informational purposes of the originating client
            IP address, as a request might pass multiple proxies, firewalls, and
            so on. Multiple `X-Forwarded-For` values should be expected and
            supported by implementers of the API.


            **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
            7239](https://tools.ietf.org/html/rfc7239). However, to this point
            RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema: *ref_40
          required: true
          description: >-
            The `FSPIOP-Source` header field is a non-HTTP standard field used
            by the API for identifying the sender of the HTTP request. The field
            should be set by the original sender of the request. Required for
            routing and signature verification (see header field
            `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema: *ref_41
          required: false
          description: >-
            The `FSPIOP-Destination` header field is a non-HTTP standard field
            used by the API for HTTP header based routing of requests and
            responses to the destination. The field must be set by the original
            sender of the request if the destination is known (valid for all
            services except GET /parties) so that any entities between the
            client and the server do not need to parse the payload for routing
            purposes. If the destination is not known (valid for service GET
            /parties), the field should be left empty.
        - name: FSPIOP-Encryption
          in: header
          schema: *ref_42
          required: false
          description: >-
            The `FSPIOP-Encryption` header field is a non-HTTP standard field
            used by the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema: *ref_43
          required: false
          description: >-
            The `FSPIOP-Signature` header field is a non-HTTP standard field
            used by the API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema: *ref_44
          required: false
          description: >-
            The `FSPIOP-URI` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service URI.
            Required if signature verification is used, for more information,
            see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema: *ref_45
          required: false
          description: >-
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
            used by the API for signature verification, should contain the
            service HTTP method. Required if signature verification is used, for
            more information, see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_53
              required: *ref_54
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/consents/{ID}/generateChallenge':
    post:
      tags:
        - consents
        - sampled
      operationId: GenerateChallengeRequest
      summary: GenerateChallengeRequest
      description: |
        PISP requests a challenge from the auth service.

        PISP -> Switch
      parameters:
        - name: ID
          in: path
          required: true
          schema: *ref_35
          description: The identifier value.
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
        - name: Date
          in: header
          schema: *ref_38
          required: true
          description: >-
            The `Date` header field indicates the date when the request was
            sent.
        - name: X-Forwarded-For
          in: header
          schema: *ref_39
          required: false
          description: >-
            The `X-Forwarded-For` header field is an unofficially accepted
            standard used for informational purposes of the originating client
            IP address, as a request might pass multiple proxies, firewalls, and
            so on. Multiple `X-Forwarded-For` values should be expected and
            supported by implementers of the API.


            **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
            7239](https://tools.ietf.org/html/rfc7239). However, to this point
            RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema: *ref_40
          required: true
          description: >-
            The `FSPIOP-Source` header field is a non-HTTP standard field used
            by the API for identifying the sender of the HTTP request. The field
            should be set by the original sender of the request. Required for
            routing and signature verification (see header field
            `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema: *ref_41
          required: false
          description: >-
            The `FSPIOP-Destination` header field is a non-HTTP standard field
            used by the API for HTTP header based routing of requests and
            responses to the destination. The field must be set by the original
            sender of the request if the destination is known (valid for all
            services except GET /parties) so that any entities between the
            client and the server do not need to parse the payload for routing
            purposes. If the destination is not known (valid for service GET
            /parties), the field should be left empty.
        - name: FSPIOP-Encryption
          in: header
          schema: *ref_42
          required: false
          description: >-
            The `FSPIOP-Encryption` header field is a non-HTTP standard field
            used by the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema: *ref_43
          required: false
          description: >-
            The `FSPIOP-Signature` header field is a non-HTTP standard field
            used by the API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema: *ref_44
          required: false
          description: >-
            The `FSPIOP-URI` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service URI.
            Required if signature verification is used, for more information,
            see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema: *ref_45
          required: false
          description: >-
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
            used by the API for signature verification, should contain the
            service HTTP method. Required if signature verification is used, for
            more information, see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        description: GenerateChallengeRequest Body
        required: true
        content:
          application/json:
            schema:
              title: ConsentsIDGenerateChallengePostRequest
              type: object
              description: |
                A credential used to allow a user to prove their identity
                and access to an account with a DFSP.
              properties: &ref_132
                type:
                  title: CredentialType
                  type: string
                  enum: *ref_57
                  description: |
                    The type of the Credential.
                    - "FIDO" - A FIDO public/private keypair.
              required: &ref_133
                - type
            example:
              type: FIDO
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  /thirdpartyRequests/transactions:
    parameters:
      - name: Accept
        in: header
        required: true
        schema: *ref_48
        description: >-
          The `Accept` header field indicates the version of the API the client
          would like the server to use.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsPostRequest
              type: object
              description: >-
                The object sent in the POST /thirdpartyRequests/transactions
                request.
              properties: &ref_62
                transactionRequestId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: >
                    Common ID between the FSPs for the transaction request
                    object. The ID should be reused for resends of the same
                    transaction request. A new ID should be generated for each
                    new transaction request.
                payee:
                  allOf:
                    - title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: *ref_8
                      required: *ref_9
                  description: >-
                    Information about the Payee in the proposed financial
                    transaction.
                payer:
                  allOf:
                    - title: PartyIdInfo
                      type: object
                      description: Data model for the complex type PartyIdInfo.
                      properties: &ref_135
                        partyIdType:
                          title: PartyIdTypeTPLink
                          type: string
                          enum: &ref_134
                            - THIRD_PARTY_LINK
                          description: >
                            This is a variant based on FSPIOP `PartyIdType`
                            specification.

                            This validation interface should be use by `POST
                            /thirdpartyRequests/transactions`

                            - THIRD_PARTY_LINK - is the DFSP's internal
                            reference which allows DFSP to find out the
                            corresponding consent
                          example: PERSONAL_ID
                        partyIdentifier:
                          title: PartyIdentifier
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Identifier of the Party.
                          example: '16135551212'
                        partySubIdOrType:
                          title: PartySubIdOrType
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: >-
                            Either a sub-identifier of a PartyIdentifier, or a
                            sub-type of the PartyIdType, normally a
                            PersonalIdentifierType.
                        fspId:
                          title: FspId
                          type: string
                          minLength: 1
                          maxLength: 32
                          description: FSP identifier.
                        extensionList:
                          title: ExtensionList
                          type: object
                          description: >-
                            Data model for the complex type ExtensionList. An
                            optional list of extensions, specific to deployment.
                          properties: *ref_3
                          required: *ref_4
                      required: &ref_136
                        - partyIdType
                        - partyIdentifier
                  description: >-
                    Information about the Payer in the proposed financial
                    transaction.
                amountType:
                  allOf:
                    - title: AmountType
                      type: string
                      enum: &ref_137
                        - SEND
                        - RECEIVE
                      description: >-
                        Below are the allowed values for the enumeration
                        AmountType.

                        - SEND - Amount the Payer would like to send, that is,
                        the amount that should be withdrawn from the Payer
                        account including any fees.

                        - RECEIVE - Amount the Payer would like the Payee to
                        receive, that is, the amount that should be sent to the
                        receiver exclusive of any fees.
                      example: RECEIVE
                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
                amount:
                  allOf:
                    - title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_0
                      required: *ref_1
                  description: Requested amount to be transferred from the Payer to Payee.
                transactionType:
                  allOf:
                    - title: TransactionType
                      type: object
                      description: Data model for the complex type TransactionType.
                      properties: *ref_60
                      required: *ref_61
                  description: Type of transaction.
                expiration:
                  type: string
                  description: >
                    Date and time until when the transaction request is valid.
                    It can be set to get a quick failure in case the peer FSP
                    takes too long to respond.
                  example: '2016-05-24T08:38:08.699-04:00'
              required: &ref_63
                - transactionRequestId
                - payee
                - payer
                - amountType
                - amount
                - transactionType
                - expiration
            example:
              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6
              payee:
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 1234 5678
                  fspId: dfspb
              payer:
                partyIdType: THIRD_PARTY_LINK
                partyIdentifier: qwerty-123456
                fspId: dfspa
              amountType: SEND
              amount:
                amount: '100'
                currency: USD
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
              expiration: '2020-07-15T22:17:28.985-01:00'
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
      operationId: CreateThirdpartyTransactionRequests
      summary: CreateThirdpartyTransactionRequests
      description: >-
        The HTTP request POST `/thirdpartyRequests/transactions` is used by a
        PISP to initiate a 3rd party Transaction request with a DFSP
      tags:
        - thirdpartyRequests
        - sampled
  /thirdpartyRequests/transactions-tsa:
    post:
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsPostRequest
              type: object
              description: >-
                The object sent in the POST /thirdpartyRequests/transactions
                request.
              properties: *ref_62
              required: *ref_63
            example:
              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6
              payee:
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 1234 5678
                  fspId: dfspb
              payer:
                personalInfo:
                  complexName:
                    firstName: Alice
                    lastName: K
                partyIdInfo:
                  partyIdType: THIRD_PARTY_LINK
                  partyIdentifier: qwerty-567890
                  fspId: dfspa
              amountType: SEND
              amount:
                amount: '100'
                currency: USD
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
              expiration: '2020-07-15T22:17:28.985-01:00'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
      operationId: ThirdpartyRequestsTransactionsPost
      summary: ThirdpartyRequestsTransactionsPost
      description: >-
        The HTTP request POST `/thirdpartyRequests/transactions` is used by a
        PISP to initiate a 3rd party Transaction request with a DFSP
      tags:
        - thirdpartyRequests
  '/thirdpartyRequests/transactions/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Accept
        in: header
        required: true
        schema: *ref_48
        description: >-
          The `Accept` header field indicates the version of the API the client
          would like the server to use.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: GetThirdpartyTransactionRequests
      summary: GetThirdpartyTransactionRequests
      description: >
        The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to
        request the 

        retrieval of a third party transaction request.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: UpdateThirdPartyTransactionRequests
      summary: UpdateThirdPartyTransactionRequests
      description: >
        The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by
        the DFSP to inform the client about

        the status of a previously requested thirdparty transaction request.


        Switch(Thirdparty API Adapter) -> PISP
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDPutResponse
              type: object
              description: >-
                The object sent in the PUT /thirdPartyRequests/transactions/{ID}
                request.
              properties: &ref_138
                transactionId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transactionRequestState:
                  title: TransactionRequestState
                  type: string
                  enum: *ref_64
                  description: >-
                    Below are the allowed values for the enumeration.

                    - RECEIVED - Payer FSP has received the transaction from the
                    Payee FSP.

                    - PENDING - Payer FSP has sent the transaction request to
                    the Payer.

                    - ACCEPTED - Payer has approved the transaction.

                    - REJECTED - Payer has rejected the transaction.
                  example: RECEIVED
              required: &ref_139
                - transactionId
                - transactionRequestState
            example:
              transactionId: 11111111-0000-0000-0000-000000000000
              transactionRequestState: RECEIVED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    patch:
      operationId: NotifyThirdpartyTransactionRequests
      summary: NotifyThirdpartyTransactionRequests
      description: >
        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used
        to

        notify a thirdparty of the outcome of a transaction request.


        Switch(Thirdparty API Adapter) -> PISP
      tags:
        - thirdpartyRequests
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDPatchResponse
              type: object
              description: >-
                The object sent in the PATCH
                /thirdpartyRequests/transactions/{ID} callback.
              properties: *ref_65
              required: *ref_66
            example:
              transactionId: 11111111-0000-0000-0000-000000000000
              transactionRequestState: ACCEPTED
              transactionState: COMMITTED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/thirdpartyRequests/transactions/{ID}/error':
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: ThirdpartyTransactionRequestsError
      summary: ThirdpartyTransactionRequestsError
      description: >
        If the server is unable to find the transaction request, or another
        processing error occurs,

        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is
        used.

        The `{ID}` in the URI should contain the `transactionRequestId` that was
        used for the creation of 

        the thirdparty transaction request.
      parameters:
        - name: ID
          in: path
          required: true
          schema: *ref_35
          description: The identifier value.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_36
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
        - name: Content-Type
          in: header
          schema: *ref_37
          required: true
          description: >-
            The `Content-Type` header indicates the specific version of the API
            used to send the payload body.
        - name: Date
          in: header
          schema: *ref_38
          required: true
          description: >-
            The `Date` header field indicates the date when the request was
            sent.
        - name: X-Forwarded-For
          in: header
          schema: *ref_39
          required: false
          description: >-
            The `X-Forwarded-For` header field is an unofficially accepted
            standard used for informational purposes of the originating client
            IP address, as a request might pass multiple proxies, firewalls, and
            so on. Multiple `X-Forwarded-For` values should be expected and
            supported by implementers of the API.


            **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
            7239](https://tools.ietf.org/html/rfc7239). However, to this point
            RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema: *ref_40
          required: true
          description: >-
            The `FSPIOP-Source` header field is a non-HTTP standard field used
            by the API for identifying the sender of the HTTP request. The field
            should be set by the original sender of the request. Required for
            routing and signature verification (see header field
            `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema: *ref_41
          required: false
          description: >-
            The `FSPIOP-Destination` header field is a non-HTTP standard field
            used by the API for HTTP header based routing of requests and
            responses to the destination. The field must be set by the original
            sender of the request if the destination is known (valid for all
            services except GET /parties) so that any entities between the
            client and the server do not need to parse the payload for routing
            purposes. If the destination is not known (valid for service GET
            /parties), the field should be left empty.
        - name: FSPIOP-Encryption
          in: header
          schema: *ref_42
          required: false
          description: >-
            The `FSPIOP-Encryption` header field is a non-HTTP standard field
            used by the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema: *ref_43
          required: false
          description: >-
            The `FSPIOP-Signature` header field is a non-HTTP standard field
            used by the API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema: *ref_44
          required: false
          description: >-
            The `FSPIOP-URI` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service URI.
            Required if signature verification is used, for more information,
            see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema: *ref_45
          required: false
          description: >-
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
            used by the API for signature verification, should contain the
            service HTTP method. Required if signature verification is used, for
            more information, see [the API Signature
            document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_53
              required: *ref_54
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/thirdpartyRequests/transactions/{ID}/authorizations':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: VerifyThirdPartyAuthorization
      summary: VerifyThirdPartyAuthorization
      description: >
        The HTTP request `POST
        /thirdpartyRequests/transactions/{id}/authorizations` is used by the
        DFSP to verify a third party authorization.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest
              type: object
              description: >-
                The object sent in the POST
                /thirdpartyRequests/transactions/{id}/authorizations request.
              properties: &ref_142
                challenge:
                  type: string
                  description: Base64 encoded binary string - the original challenge.
                value:
                  allOf:
                    - type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      description: >-
                        The API data type BinaryString is a JSON String. The
                        string is a base64url  encoding of a string of raw
                        bytes, where padding (character ‘=’) is added at the end
                        of the data if needed to ensure that the string is a
                        multiple of 4 characters. The length restriction
                        indicates the allowed number of characters.
                  description: Base64 encoded binary string - the signed challenge
                consentId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: >
                    Common ID between the PISP and FSP for the Consent object
                    This tells DFSP and auth-service which constent allows the
                    PISP to initiate transaction.
                sourceAccountId:
                  allOf:
                    - title: AccountAddress
                      type: string
                      description: >
                        A long-lived unique account identifier provided by the
                        DFSP. This MUST NOT

                        be Bank Account Number or anything that may expose a
                        User's private bank

                        account information.
                      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                      minLength: 1
                      maxLength: 1023
                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
                status:
                  type: string
                  enum:
                    - PENDING
                  description: >-
                    The status of the authorization. This MUST be PENDING for a
                    POST request
              required: &ref_143
                - challenge
                - value
                - consentId
                - sourceAccountId
                - status
            example:
              challenge: <QuoteResponse object>
              value: <base64 encoded binary - the signed quote response object>
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
              sourceAccountId: dfspa.alice.1234
              status: PENDING
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
    put:
      operationId: UpdateThirdpartyAuthorization
      summary: UpdateThirdpartyAuthorization
      description: >
        The HTTP request `PUT
        /thirdpartyRequests/transactions/{id}/authorizations` is used by the
        auth-service to update a thirdparty authorization after successful
        validation.

        For an unsuccessful authorization result, the `PUT
        /thirdpartyRequests/transactions/{id}/authorizations/error` will be
        called by the auth-service, instead of this endpoint.
      tags:
        - thirdpartyRequests
        - sampled
      requestBody:
        description: The thirdparty authorization details to update
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse
              type: object
              description: >-
                The object sent in the PUT
                /thirdpartyRequests/transactions/{id}/authorizations request.
              properties: &ref_140
                challenge:
                  type: string
                  description: Base64 encoded binary string - the original challenge.
                value:
                  allOf:
                    - type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      description: >-
                        The API data type BinaryString is a JSON String. The
                        string is a base64url  encoding of a string of raw
                        bytes, where padding (character ‘=’) is added at the end
                        of the data if needed to ensure that the string is a
                        multiple of 4 characters. The length restriction
                        indicates the allowed number of characters.
                  description: Base64 encoded binary string - the signed challenge.
                consentId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: >
                    Common ID between the PISP and FSP for the Consent object
                    This tells DFSP and auth-service which consent allows the
                    PISP to initiate transaction.
                sourceAccountId:
                  allOf:
                    - title: AccountAddress
                      type: string
                      description: >
                        A long-lived unique account identifier provided by the
                        DFSP. This MUST NOT

                        be Bank Account Number or anything that may expose a
                        User's private bank

                        account information.
                      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                      minLength: 1
                      maxLength: 1023
                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
                status:
                  type: string
                  enum:
                    - VERIFIED
                  description: >-
                    The status of the authorization. This value must be
                    `VERIFIED` for a PUT request.
              required: &ref_141
                - challenge
                - value
                - consentId
                - sourceAccountId
                - status
            example:
              challenge: <QuoteResponse object>
              value: <base64 encoded binary - the signed quote response object>
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
              sourceAccountId: dfspa.alice.1234
              status: VERIFIED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  /thirdpartyRequests/authorizations:
    post:
      description: >
        The HTTP request `POST /thirdpartyRequests/authorizations` is used to
        request the Payer to enter the applicable credentials in the PISP
        system.
      operationId: PostThirdpartyRequestsAutorizations
      summary: PostThirdpartyRequestsAutorizations
      tags:
        - authorizations
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsAuthorizationsPostRequest
              description: POST /thirdpartyRequests/authorizations request object.
              type: object
              properties: &ref_144
                authorizationRequestId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transactionRequestId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                challenge:
                  type: string
                  description: Base64 encoded bytes - The challenge generated by the DFSP.
                quote:
                  title: QuotesIDPutResponse
                  type: object
                  description: 'The object sent in the PUT /quotes/{ID} callback.'
                  properties: *ref_67
                  required: *ref_68
                transactionType:
                  title: TransactionType
                  type: object
                  description: Data model for the complex type TransactionType.
                  properties: *ref_60
                  required: *ref_61
              required: &ref_145
                - authorizationRequestId
                - transactionRequestId
                - challenge
                - quote
                - transactionType
              additionalProperties: false
            example:
              authorizationRequestId: 33333333-0000-0000-0000-000000000000
              transactionRequestId: 00000000-0000-0000-0000-000000000000
              challenge: <base64 encoded binary - the encoded challenge>
              quote:
                transferAmount:
                  amount: '100'
                  currency: USD
                payeeReceiveAmount:
                  amount: '99'
                  currency: USD
                payeeFspFee:
                  amount: '1'
                  currency: USD
                expiration: '2020-06-15T12:00:00.000'
                ilpPacket: ...
                condition: ...
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/thirdpartyRequests/authorizations/{ID}':
    put:
      description: >
        The callback PUT /thirdpartyRequests/authorizations/{ID} is used to
        inform the client of the

        result of a previously-requested authorization. The ID in the URI should

        contain the one that was used in the POST /authorizations/
        requestBody.transactionRequestId @ OUTBOUND
      operationId: PutThirdpartyRequestsAuthorizationsById
      summary: PutThirdpartyRequestsAuthorizationsById
      tags:
        - authorizations
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            information about result of required (via POST) /authorization
          content:
            application/json:
              schema:
                title: ThirdpartyRequestsAuthorizationsIDPutResponse
                type: object
                description: >-
                  The object sent in the PUT
                  /thirdpartyRequests/authorizations/{ID} callback.
                properties: &ref_146
                  authenticationInfo:
                    title: AuthenticationInfo
                    type: object
                    description: Data model for the complex type AuthenticationInfo.
                    properties: *ref_69
                    required: *ref_70
                  responseType:
                    title: AuthorizationResponse
                    type: string
                    enum: *ref_71
                    description: >-
                      Below are the allowed values for the enumeration.

                      - ENTERED - Consumer entered the authentication value.

                      - REJECTED - Consumer rejected the transaction.

                      - RESEND - Consumer requested to resend the authentication
                      value.
                    example: ENTERED
                required: &ref_147
                  - authenticationInfo
                  - responseType
              example:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: <base64 encoded binary - the signed challenge
                    counter: 1
                responseType: ENTERED
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/thirdpartyRequests/authorizations/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsAuthorizationsByIdAndError
      summary: PutThirdpartyRequestsAuthorizationsByIdAndError
      description: >
        The HTTP request `PUT /thirdpartyRequests/authorizations/{ID}/error` is
        used by the DFSP or PISP to inform

        the other party that something went wrong with a Thirdparty Tranasction
        Authorization Request.


        The PISP may use this to tell the DFSP that the Thirdparty Tranasction
        Authorization Request is invalid or doesn't

        match a `transactionRequestId`.


        The DFSP may use this to tell the PISP that the signed challenge
        returned in `PUT /thirdpartyRequest/authorizations/{ID}`

        was invalid.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_53
              required: *ref_54
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  /thirdpartyRequests/verifications:
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerifications
      summary: PutThirdpartyRequestsVerifications
      description: >
        The HTTP request `POST /thirdpartyRequests/verifications` is used by the
        DFSP to verify a third party authorization.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsPostRequest
              type: object
              description: >-
                The object sent in the POST /thirdpartyRequests/verifications
                request.
              properties: &ref_148
                verificationRequestId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                challenge:
                  type: string
                  description: Base64 encoded bytes - The challenge generated by the DFSP.
                value:
                  type: object
                  properties:
                    authenticationInfo:
                      title: AuthenticationInfo
                      type: object
                      description: Data model for the complex type AuthenticationInfo.
                      properties: *ref_69
                      required: *ref_70
                    responseType:
                      title: AuthorizationResponse
                      type: string
                      enum: *ref_71
                      description: >-
                        Below are the allowed values for the enumeration.

                        - ENTERED - Consumer entered the authentication value.

                        - REJECTED - Consumer rejected the transaction.

                        - RESEND - Consumer requested to resend the
                        authentication value.
                      example: ENTERED
                consentId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: >
                    The id of the stored consent object that contains the
                    credential with which to verify

                    the signed challenge against.
              required: &ref_149
                - verificationRequestId
                - challenge
                - value
                - consentId
            example:
              verificationRequestId: 44444444-0000-0000-0000-000000000000
              challenge: <base64 encoded binary - the encoded challenge>
              value:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: <base64 encoded binary - the signed challenge>
                    counter: '1'
                responseType: ENTERED
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/thirdpartyRequests/verifications/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsById
      summary: PutThirdpartyRequestsVerificationsById
      description: >
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}` is used by
        the Auth-Service to inform

        the DFSP of a successful result in validating the verification of a
        Thirdparty Transaction Request.


        If the validation fails, The Auth-Service MUST use `PUT
        /thirdpartyRequests/verifications/{ID}/error`

        instead.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      requestBody:
        description: The result of validating the Thirdparty Transaction Request
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsIDPutResponse
              type: object
              description: >-
                The object sent in the PUT
                /thirdpartyRequests/verifications/{ID} request.
              properties: &ref_150
                authenticationResponse:
                  type: string
                  enum:
                    - VERIFIED
                  description: The verification passed
              required: &ref_151
                - authenticationResponse
            example:
              authenticationResponse: VERIFIED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
  '/thirdpartyRequests/verifications/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_35
        description: The identifier value.
      - name: Content-Length
        in: header
        required: false
        schema: *ref_36
        description: >-
          The `Content-Length` header field indicates the anticipated size of
          the payload body. Only sent if there is a body.


          **Note:** The API supports a maximum size of 5242880 bytes (5
          Megabytes).
      - name: Content-Type
        in: header
        schema: *ref_37
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_38
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_40
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_44
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_45
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsByIdAndError
      summary: PutThirdpartyRequestsVerificationsByIdAndError
      description: >
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}/error` is
        used by the Auth-Service to inform

        the DFSP of a failure in validating or looking up the verification of a
        Thirdparty Transaction Request.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_48
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_53
              required: *ref_54
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_19
          headers: *ref_20
        '401':
          description: Unauthorized
          content: *ref_21
          headers: *ref_22
        '403':
          description: Forbidden
          content: *ref_23
          headers: *ref_24
        '404':
          description: Not Found
          content: *ref_25
          headers: *ref_26
        '405':
          description: Method Not Allowed
          content: *ref_27
          headers: *ref_28
        '406':
          description: Not Acceptable
          content: *ref_29
          headers: *ref_30
        '501':
          description: Not Implemented
          content: *ref_31
          headers: *ref_32
        '503':
          description: Service Unavailable
          content: *ref_33
          headers: *ref_34
components:
  schemas:
    AuthorizationChannelType:
      title: AuthorizationChannelType
      type: string
      enum: *ref_72
      description: >
        Below are the allowed values for the enumeration
        AuthorizationChannelType.

        - OTP - One-time password generated by the Payer FSP.

        - QRCODE - QR code used as One Time Password.

        - U2F - U2F is a new addition isolated to Thirdparty stream.
    AuthorizationResponseType:
      title: AuthorizationResponseType
      description: |
        Enum containing response information; if the customer entered the
        authentication value, rejected the transaction, or requested a
        resend of the authentication value.
      type: string
      enum: *ref_73
    AuthenticationType:
      title: AuthenticationType
      type: string
      enum: *ref_12
      description: |-
        Below are the allowed values for the enumeration AuthenticationType.
        - OTP - One-time password generated by the Payer FSP.
        - QRCODE - QR code used as One Time Password.
        - U2F - U2F is a new addition isolated to Thirdparty stream.
    Integer:
      title: Integer
      type: string
      pattern: '^[1-9]\d*$'
      description: >-
        The API data type Integer is a JSON String consisting of digits only.
        Negative numbers and leading zeroes are not allowed. The data type is
        always limited to a specific number of digits.
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum: *ref_7
    Amount:
      title: Amount
      type: string
      pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
      description: >-
        The API data type Amount is a JSON String in a canonical format that is
        restricted by a regular expression for interoperability reasons. This
        pattern does not allow any trailing zeroes at all, but allows an amount
        without a minor currency unit. It also only allows four digits in the
        minor currency unit; a negative value is not allowed. Using more than 18
        digits in the major currency unit is not allowed.
      example: '123.45'
    Money:
      title: Money
      type: object
      description: Data model for the complex type Money.
      properties: *ref_0
      required: *ref_1
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
      example: b51ec534-ee48-4575-b6a9-ead2955b8069
    DateTime:
      title: DateTime
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
      description: >-
        The API data type DateTime is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons. The
        format is according to [ISO
        8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed
        in a combined date, time and time zone format. A more readable version
        of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
        "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z
        indicates Zulu time zone, same as UTC).
      example: '2016-05-24T08:38:08.699-04:00'
    Latitude:
      title: Latitude
      type: string
      pattern: >-
        ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Latitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+45.4215'
    Longitude:
      title: Longitude
      type: string
      pattern: >-
        ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Longitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+75.6972'
    GeoCode:
      title: GeoCode
      type: object
      description: >-
        Data model for the complex type GeoCode. Indicates the geographic
        location from where the transaction was initiated.
      properties: *ref_10
      required: *ref_11
    IlpPacket:
      title: IlpPacket
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      minLength: 1
      maxLength: 32768
      description: Information for recipient (transport layer information).
      example: >-
        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
    IlpCondition:
      title: IlpCondition
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Condition that must be attached to the transfer by the Payer.
    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.
    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension.
      properties: *ref_74
      required: *ref_75
    ExtensionList:
      title: ExtensionList
      type: object
      description: >-
        Data model for the complex type ExtensionList. An optional list of
        extensions, specific to deployment.
      properties: *ref_3
      required: *ref_4
    QuotesIDPutResponse:
      title: QuotesIDPutResponse
      type: object
      description: 'The object sent in the PUT /quotes/{ID} callback.'
      properties: *ref_67
      required: *ref_68
    AuthorizationsPostRequest:
      title: AuthorizationsPostRequest
      description: POST /authorizations request object.
      type: object
      properties: *ref_46
      required: *ref_47
      additionalProperties: false
    ConsentStatusType:
      title: ConsentStatusType
      type: string
      enum: *ref_2
      description: |
        The status of the Consent.
        - "REVOKED" - The Consent is no longer valid and has been revoked.
    ConsentsIDPatchResponse:
      title: ConsentsIDPatchResponse
      description: |
        PATCH /consents/{ID} request object.

        Sent to both the PISP and DFSP when a consent is revoked.
      type: object
      properties: *ref_55
      required: *ref_56
    IlpFulfilment:
      title: IlpFulfilment
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Fulfilment that must be attached to the transfer by the Payee.
      example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
    Note:
      title: Note
      type: string
      minLength: 1
      maxLength: 128
      description: Memo assigned to transaction.
      example: Note sent to Payee.
    PartyIdType:
      title: PartyIdType
      type: string
      enum: *ref_76
      description: >
        This is a variant based on FSPIOP `PartyIdType` specification.

        Main difference being the CONSENT and THIRD_PARTY_LINK enums.


        Below are the allowed values for the enumeration.

        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory

        Number, that is, the phone number) is used as reference to a
        participant.

        The MSISDN identifier should be in international format according to the

        [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).

        Optionally, the MSISDN may be prefixed by a single plus sign, indicating
        the

        international prefix.

        - EMAIL - An email is used as reference to a

        participant. The format of the email should be according to the
        informational

        [RFC 3696](https://tools.ietf.org/html/rfc3696).

        - PERSONAL_ID - A personal identifier is used as reference to a
        participant.

        Examples of personal identification are passport number, birth
        certificate

        number, and national registration number. The identifier number is added
        in

        the PartyIdentifier element. The personal identifier type is added in
        the

        PartySubIdOrType element.

        - BUSINESS - A specific Business (for example, an organization or a
        company)

        is used as reference to a participant. The BUSINESS identifier can be in
        any

        format. To make a transaction connected to a specific username or bill
        number

        in a Business, the PartySubIdOrType element should be used.

        - DEVICE - A specific device (for example, a POS or ATM) ID connected to
        a

        specific business or organization is used as reference to a Party.

        For referencing a specific device under a specific business or
        organization,

        use the PartySubIdOrType element.

        - ACCOUNT_ID - A bank account number or FSP account ID should be used as

        reference to a participant. The ACCOUNT_ID identifier can be in any
        format,

        as formats can greatly differ depending on country and FSP.

        - IBAN - A bank account number or FSP account ID is used as reference to
        a

        participant. The IBAN identifier can consist of up to 34 alphanumeric

        characters and should be entered without whitespace.

        - ALIAS An alias is used as reference to a participant. The alias should
        be

        created in the FSP as an alternative reference to an account owner.

        Another example of an alias is a username in the FSP system.

        The ALIAS identifier can be in any format. It is also possible to use
        the

        PartySubIdOrType element for identifying an account under an Alias
        defined

        by the PartyIdentifier.

        - CONSENT - TBD

        - THIRD_PARTY_LINK - TBD
      example: PERSONAL_ID
    PartyIdentifier:
      title: PartyIdentifier
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the Party.
      example: '16135551212'
    PartySubIdOrType:
      title: PartySubIdOrType
      type: string
      minLength: 1
      maxLength: 128
      description: >-
        Either a sub-identifier of a PartyIdentifier, or a sub-type of the
        PartyIdType, normally a PersonalIdentifierType.
    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.
    PartyIdInfo:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties: *ref_5
      required: *ref_6
    ErrorCode:
      title: ErrorCode
      type: string
      pattern: '^[1-9]\d{3}$'
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represent the specific error.
      example: '5100'
    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.
    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties: *ref_14
      required: *ref_15
    PartyResult:
      title: PartyResult
      type: object
      description: Data model for the complex type PartyResult.
      properties: *ref_77
      required: *ref_78
    ParticipantsPostRequest:
      title: ParticipantsPostRequest
      type: object
      description: The object sent in the POST /participants request.
      properties: *ref_79
      required: *ref_80
    AccountAddress:
      title: AccountAddress
      type: string
      description: >
        A long-lived unique account identifier provided by the DFSP. This MUST
        NOT

        be Bank Account Number or anything that may expose a User's private bank

        account information.
      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
      minLength: 1
      maxLength: 1023
    Name:
      title: Name
      type: string
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: >-
        The API data type Name is a JSON String, restricted by a regular
        expression to avoid characters which are generally not used in a name.


        Regular Expression - The regular expression for restricting the Name
        type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a
        string consisting of whitespace only, all Unicode characters are
        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
        and space characters ( ).


        **Note:** In some programming languages, Unicode support must be
        specifically enabled. For example, if Java is used, the flag
        UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
    Account:
      title: Account
      type: object
      description: Data model for the complex type Account.
      properties: *ref_81
      required: *ref_82
    AccountList:
      title: AccountList
      type: object
      description: Data model for the complex type AccountList.
      properties: *ref_83
      required: *ref_84
    MerchantClassificationCode:
      title: MerchantClassificationCode
      type: string
      pattern: '^[\d]{1,4}$'
      description: >-
        A limited set of pre-defined numbers. This list would be a limited set
        of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.
    PartyName:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 128
      description: Name of the Party. Could be a real name or a nickname.
    FirstName:
      title: FirstName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: First name of the Party (Name Type).
      example: Henrik
    MiddleName:
      title: MiddleName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Middle name of the Party (Name Type).
      example: Johannes
    LastName:
      title: LastName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Last name of the Party (Name Type).
      example: Karlsson
    PartyComplexName:
      title: PartyComplexName
      type: object
      description: Data model for the complex type PartyComplexName.
      properties: *ref_85
    DateOfBirth:
      title: DateofBirth (type Date)
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of Birth of the Party.
      example: '1966-06-16'
    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      description: Data model for the complex type PartyPersonalInfo.
      properties: *ref_86
    Party:
      title: Party
      type: object
      description: Data model for the complex type Party.
      properties: *ref_8
      required: *ref_9
    PartiesTypeIDPutResponse:
      title: PartiesTypeIDPutResponse
      type: object
      description: >
        The object sent in the PUT /parties/{Type}/{ID} callback.


        This is a variant based on FSPIOP `PartiesTypeIDPutResponse`
        specification.

        Main difference being that it returns a `Party` with the newly added

        `accounts` property.
      properties: *ref_87
      required: *ref_88
    TransactionRequestState:
      title: TransactionRequestState
      type: string
      enum: *ref_64
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
        - PENDING - Payer FSP has sent the transaction request to the Payer.
        - ACCEPTED - Payer has approved the transaction.
        - REJECTED - Payer has rejected the transaction.
      example: RECEIVED
    TransactionState:
      title: TransactionState
      type: string
      enum: *ref_13
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
        - PENDING - Payee FSP has validated the transaction.
        - COMPLETED - Payee FSP has successfully performed the transaction.
        - REJECTED - Payee FSP has failed to perform the transaction.
      example: RECEIVED
    ThirdpartyRequestsTransactionsIDPatchResponse:
      title: ThirdpartyRequestsTransactionsIDPatchResponse
      type: object
      description: >-
        The object sent in the PATCH /thirdpartyRequests/transactions/{ID}
        callback.
      properties: *ref_65
      required: *ref_66
    TransactionScenario:
      title: TransactionScenario
      type: string
      enum: *ref_89
      description: >-
        Below are the allowed values for the enumeration.

        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a
        normal scenario, electronic funds are transferred from a Business
        account to a Consumer account, and physical cash is given from the
        Consumer to the Business User.

        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
        In a normal scenario, electronic funds are transferred from a Consumer’s
        account to a Business account, and physical cash is given from the
        Business User to the Consumer.

        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to
        Consumer) transaction.

        - PAYMENT - Usually used for performing a transaction from a Consumer to
        a Merchant or Organization, but could also be for a B2B (Business to
        Business) payment. The transaction could be online for a purchase in an
        Internet store, in a physical store where both the Consumer and Business
        User are present, a bill payment, a donation, and so on.

        - REFUND - Used for performing a refund of transaction.
      example: DEPOSIT
    TransactionSubScenario:
      title: TransactionSubScenario
      type: string
      pattern: '^[A-Z_]{1,32}$'
      description: >-
        Possible sub-scenario, defined locally within the scheme (UndefinedEnum
        Type).
      example: LOCALLY_DEFINED_SUBSCENARIO
    TransactionInitiator:
      title: TransactionInitiator
      type: string
      enum: *ref_90
      description: >-
        Below are the allowed values for the enumeration.

        - PAYER - Sender of funds is initiating the transaction. The account to
        send from is either owned by the Payer or is connected to the Payer in
        some way.

        - PAYEE - Recipient of the funds is initiating the transaction by
        sending a transaction request. The Payer must approve the transaction,
        either automatically by a pre-generated OTP or by pre-approval of the
        Payee, or by manually approving in his or her own Device.
      example: PAYEE
    TransactionInitiatorType:
      title: TransactionInitiatorType
      type: string
      enum: *ref_91
      description: |-
        Below are the allowed values for the enumeration.
        - CONSUMER - Consumer is the initiator of the transaction.
        - AGENT - Agent is the initiator of the transaction.
        - BUSINESS - Business is the initiator of the transaction.
        - DEVICE - Device is the initiator of the transaction.
      example: CONSUMER
    RefundReason:
      title: RefundReason
      type: string
      minLength: 1
      maxLength: 128
      description: Reason for the refund.
      example: Free text indicating reason for the refund.
    Refund:
      title: Refund
      type: object
      description: Data model for the complex type Refund.
      properties: *ref_92
      required: *ref_93
    BalanceOfPayments:
      title: BalanceOfPayments
      type: string
      pattern: '^[1-9]\d{2}$'
      description: >-
        (BopCode) The API data type
        [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String
        of 3 characters, consisting of digits only. Negative numbers are not
        allowed. A leading zero is not allowed.
      example: '123'
    TransactionType:
      title: TransactionType
      type: object
      description: Data model for the complex type TransactionType.
      properties: *ref_60
      required: *ref_61
    TransactionRequestsPostRequest:
      title: TransactionRequestsPostRequest
      type: object
      description: The object sent in the POST /transactionRequests request.
      properties: *ref_94
      required: *ref_95
    ErrorInformationResponse:
      title: ErrorInformationResponse
      type: object
      description: >-
        Data model for the complex type object that contains an optional element
        ErrorInformation used along with 4xx and 5xx responses.
      properties: *ref_16
    AccountsIDPutResponse:
      title: AccountsIDPutResponse
      type: array
      items: *ref_96
    ErrorInformationObject:
      title: ErrorInformationObject
      type: object
      description: Data model for the complex type object that contains ErrorInformation.
      properties: *ref_53
      required: *ref_54
    OtpValue:
      title: OtpValue
      type: string
      pattern: '^\d{3,10}$'
      description: >-
        The API data type OtpValue is a JSON String of 3 to 10 characters,
        consisting of digits only. Negative numbers are not allowed. One or more
        leading zeros are allowed.
    QRCODE:
      title: QRCODE
      type: string
      minLength: 1
      maxLength: 64
      description: QR code used as a One Time Password.
    U2FPIN:
      title: U2FPIN
      type: string
      pattern: '^\S{1,64}$'
      minLength: 1
      maxLength: 64
      description: >
        U2F challenge-response, where payer FSP verifies if the response
        provided by end-user device matches the previously registered key.
    U2FPinValue:
      title: U2FPinValue
      type: object
      description: >
        U2F challenge-response, where payer FSP verifies if the response
        provided by end-user device matches the previously registered key.
      properties: *ref_97
      required: *ref_98
    AuthenticationValue:
      title: AuthenticationValue
      anyOf: *ref_99
      pattern: '^\d{3,10}$|^\S{1,64}$'
      description: >-
        Contains the authentication value. The format depends on the
        authentication type used in the AuthenticationInfo complex type.
    AuthenticationInfo:
      title: AuthenticationInfo
      type: object
      description: Data model for the complex type AuthenticationInfo.
      properties: *ref_69
      required: *ref_70
    AuthorizationResponse:
      title: AuthorizationResponse
      type: string
      enum: *ref_71
      description: |-
        Below are the allowed values for the enumeration.
        - ENTERED - Consumer entered the authentication value.
        - REJECTED - Consumer rejected the transaction.
        - RESEND - Consumer requested to resend the authentication value.
      example: ENTERED
    AuthorizationsIDPutResponse:
      title: AuthorizationsIDPutResponse
      type: object
      description: 'The object sent in the PUT /authorizations/{ID} callback.'
      properties: *ref_100
      required: *ref_101
    ConsentScopeType:
      title: ConsentScopeType
      type: string
      enum: *ref_102
      description: |
        The scopes requested for a ConsentRequest.
        - "accounts.getBalance" - Get the balance of a given account.
        - "accounts.transfer" - Initiate a transfer from an account.
    Scope:
      title: Scope
      type: object
      description: Scope + Account Identifier mapping for a Consent.
      example: |
        {
          accountId: "dfsp.username.5678",
          actions: [ "accounts.transfer", "accounts.getBalance" ]
        }
      properties: *ref_49
      required: *ref_50
    ConsentRequestChannelType:
      title: ConsentRequestChannelType
      type: string
      enum: *ref_103
      description: |
        The auth channel being used for the consentRequest.
        - "WEB" - The Web auth channel.
        - "OTP" - The OTP auth channel.
    ConsentRequestsPostRequest:
      title: ConsentRequestsPostRequest
      type: object
      description: The object sent in a `POST /consentRequests` request.
      properties: *ref_104
      required: *ref_105
    ConsentRequestChannelTypeWeb:
      title: ConsentRequestChannelTypeWeb
      type: string
      enum: *ref_51
      description: |
        The web auth channel being used for PUT consentRequest/{ID} request.
    ConsentRequestsIDPutResponseWeb:
      title: ConsentRequestsIDPutResponseWeb
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the request consent phase of the account linking web
        flow,

        the result is the PISP being instructed on a specific URL where this

        supposed user should be redirected. This URL should be a place where

        the user can prove their identity (e.g., by logging in).
      properties: *ref_106
      required: *ref_107
      additionalProperties: false
    ConsentRequestsIDPutResponseWebAuth:
      title: ConsentRequestsIDPutResponseWebAuth
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the authentication phase of the account linking flow,

        the user is expected to prove their identity to the DFSP by passing a
        OTP

        or secret to the PISP.
      properties: *ref_108
      required: *ref_109
      additionalProperties: false
    ConsentRequestChannelTypeOTP:
      title: ConsentRequestChannelTypeOTP
      type: string
      enum: *ref_52
      description: |
        The OTP auth channel being used for PUT consentRequest/{ID} request.
    ConsentRequestsIDPutResponseOTP:
      title: ConsentRequestsIDPutResponseOTP
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the request consent phase of the account linking OTP/SMS
        flow.
      properties: *ref_110
      required: *ref_111
      additionalProperties: false
    ConsentRequestsIDPutResponseOTPAuth:
      title: ConsentRequestsIDPutResponseOTPAuth
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the authentication phase of the account linking flow,

        the user is expected to prove their identity to the DFSP by passing a
        OTP

        or secret to the PISP.
      properties: *ref_112
      required: *ref_113
      additionalProperties: false
    ConsentRequestsIDPatchRequest:
      title: ConsentRequestsIDPatchRequest
      type: object
      description: 'The object sent in a `PATCH /consentRequests/{ID}` request.'
      properties: *ref_114
      required: *ref_115
    ConsentsPostRequest:
      title: ConsentPostRequest
      type: object
      description: The object sent in a `POST /consents` request.
      properties: *ref_116
      required: *ref_117
    CredentialType:
      title: CredentialType
      type: string
      enum: *ref_57
      description: |
        The type of the Credential.
        - "FIDO" - A FIDO public/private keypair.
    CredentialChallengeSigned:
      title: CredentialChallengeSigned
      type: object
      description: |
        The challenge that has been signed by a PISP.
      properties: *ref_58
      required: *ref_59
      additionalProperties: false
    SignedCredential:
      title: SignedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        SignedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be PENDING
        when updating

        a credential.
      properties: *ref_118
      required: *ref_119
      additionalProperties: false
    ConsentsIDPutResponseSigned:
      title: ConsentsIDPutResponseSigned
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the PISP to update a
        Consent

        with a signed challenge and register a credential.


        Called by a `PISP` to after signing a challenge. Sent to an
        `auth-service` for verification.
      properties: *ref_120
      required: *ref_121
    CredentialChallengeUnsigned:
      title: CredentialChallengeSigned
      type: object
      description: |
        The challenge issued by a DFSP that must be answered by the PISP.
      properties: *ref_122
      required: *ref_123
      additionalProperties: false
    UnsignedCredential:
      title: UnsignedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        UnsignedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be PENDING
        when updating

        a credential.
      properties: *ref_124
      required: *ref_125
      additionalProperties: false
    ConsentsIDPutResponseUnsigned:
      title: ConsentsIDPutResponseUnsigned
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used to request a PISP to sign
        a challenge.

        The `{ID}` in the URI should contain the `{ID}` that was used in the
        `POST /consents`.


        Called by a `auth-service` to request PISP to add the credential
        details.
      properties: *ref_126
      required: *ref_127
    VerifiedCredential:
      title: VerifiedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        VerifiedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be VERIFIED
        when updating

        a credential.
      properties: *ref_128
      required: *ref_129
      additionalProperties: false
    ConsentsIDPutResponseVerified:
      title: ConsentsIDPutResponseVerified
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the DFSP or
        Auth-Service to

        update a Consent object once it has been Verified.


        Called by a `auth-service` to notify a DFSP and PISP that a credential
        has been verified and registered.
      properties: *ref_130
      required: *ref_131
    ConsentsIDGenerateChallengePostRequest:
      title: ConsentsIDGenerateChallengePostRequest
      type: object
      description: |
        A credential used to allow a user to prove their identity
        and access to an account with a DFSP.
      properties: *ref_132
      required: *ref_133
    PartyIdTypeTPLink:
      title: PartyIdTypeTPLink
      type: string
      enum: *ref_134
      description: >
        This is a variant based on FSPIOP `PartyIdType` specification.

        This validation interface should be use by `POST
        /thirdpartyRequests/transactions`

        - THIRD_PARTY_LINK - is the DFSP's internal reference which allows DFSP
        to find out the corresponding consent
      example: PERSONAL_ID
    PartyIdInfoTPLink:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties: *ref_135
      required: *ref_136
    AmountType:
      title: AmountType
      type: string
      enum: *ref_137
      description: >-
        Below are the allowed values for the enumeration AmountType.

        - SEND - Amount the Payer would like to send, that is, the amount that
        should be withdrawn from the Payer account including any fees.

        - RECEIVE - Amount the Payer would like the Payee to receive, that is,
        the amount that should be sent to the receiver exclusive of any fees.
      example: RECEIVE
    ThirdpartyRequestsTransactionsPostRequest:
      title: ThirdpartyRequestsTransactionsPostRequest
      type: object
      description: The object sent in the POST /thirdpartyRequests/transactions request.
      properties: *ref_62
      required: *ref_63
    ThirdpartyRequestsTransactionsIDPutResponse:
      title: ThirdpartyRequestsTransactionsIDPutResponse
      type: object
      description: >-
        The object sent in the PUT /thirdPartyRequests/transactions/{ID}
        request.
      properties: *ref_138
      required: *ref_139
    BinaryString:
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      description: >-
        The API data type BinaryString is a JSON String. The string is a
        base64url  encoding of a string of raw bytes, where padding (character
        ‘=’) is added at the end of the data if needed to ensure that the string
        is a multiple of 4 characters. The length restriction indicates the
        allowed number of characters.
    ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse:
      title: ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse
      type: object
      description: >-
        The object sent in the PUT
        /thirdpartyRequests/transactions/{id}/authorizations request.
      properties: *ref_140
      required: *ref_141
    ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest:
      title: ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest
      type: object
      description: >-
        The object sent in the POST
        /thirdpartyRequests/transactions/{id}/authorizations request.
      properties: *ref_142
      required: *ref_143
    ThirdpartyRequestsAuthorizationsPostRequest:
      title: ThirdpartyRequestsAuthorizationsPostRequest
      description: POST /thirdpartyRequests/authorizations request object.
      type: object
      properties: *ref_144
      required: *ref_145
      additionalProperties: false
    ThirdpartyRequestsAuthorizationsIDPutResponse:
      title: ThirdpartyRequestsAuthorizationsIDPutResponse
      type: object
      description: >-
        The object sent in the PUT /thirdpartyRequests/authorizations/{ID}
        callback.
      properties: *ref_146
      required: *ref_147
    ThirdpartyRequestsVerificationsPostRequest:
      title: ThirdpartyRequestsVerificationsPostRequest
      type: object
      description: The object sent in the POST /thirdpartyRequests/verifications request.
      properties: *ref_148
      required: *ref_149
    ThirdpartyRequestsVerificationsIDPutResponse:
      title: ThirdpartyRequestsVerificationsIDPutResponse
      type: object
      description: >-
        The object sent in the PUT /thirdpartyRequests/verifications/{ID}
        request.
      properties: *ref_150
      required: *ref_151
  parameters:
    ID:
      name: ID
      in: path
      required: true
      schema: *ref_35
      description: The identifier value.
    Date:
      name: Date
      in: header
      schema: *ref_38
      required: true
      description: The `Date` header field indicates the date when the request was sent.
    X-Forwarded-For:
      name: X-Forwarded-For
      in: header
      schema: *ref_39
      required: false
      description: >-
        The `X-Forwarded-For` header field is an unofficially accepted standard
        used for informational purposes of the originating client IP address, as
        a request might pass multiple proxies, firewalls, and so on. Multiple
        `X-Forwarded-For` values should be expected and supported by
        implementers of the API.


        **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
        7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
        7239 is less-used and supported than `X-Forwarded-For`.
    FSPIOP-Source:
      name: FSPIOP-Source
      in: header
      schema: *ref_40
      required: true
      description: >-
        The `FSPIOP-Source` header field is a non-HTTP standard field used by
        the API for identifying the sender of the HTTP request. The field should
        be set by the original sender of the request. Required for routing and
        signature verification (see header field `FSPIOP-Signature`).
    FSPIOP-Destination:
      name: FSPIOP-Destination
      in: header
      schema: *ref_41
      required: false
      description: >-
        The `FSPIOP-Destination` header field is a non-HTTP standard field used
        by the API for HTTP header based routing of requests and responses to
        the destination. The field must be set by the original sender of the
        request if the destination is known (valid for all services except GET
        /parties) so that any entities between the client and the server do not
        need to parse the payload for routing purposes. If the destination is
        not known (valid for service GET /parties), the field should be left
        empty.
    FSPIOP-Encryption:
      name: FSPIOP-Encryption
      in: header
      schema: *ref_42
      required: false
      description: >-
        The `FSPIOP-Encryption` header field is a non-HTTP standard field used
        by the API for applying end-to-end encryption of the request.
    FSPIOP-Signature:
      name: FSPIOP-Signature
      in: header
      schema: *ref_43
      required: false
      description: >-
        The `FSPIOP-Signature` header field is a non-HTTP standard field used by
        the API for applying an end-to-end request signature.
    FSPIOP-URI:
      name: FSPIOP-URI
      in: header
      schema: *ref_44
      required: false
      description: >-
        The `FSPIOP-URI` header field is a non-HTTP standard field used by the
        API for signature verification, should contain the service URI. Required
        if signature verification is used, for more information, see [the API
        Signature
        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    FSPIOP-HTTP-Method:
      name: FSPIOP-HTTP-Method
      in: header
      schema: *ref_45
      required: false
      description: >-
        The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used
        by the API for signature verification, should contain the service HTTP
        method. Required if signature verification is used, for more
        information, see [the API Signature
        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    Accept:
      name: Accept
      in: header
      required: true
      schema: *ref_48
      description: >-
        The `Accept` header field indicates the version of the API the client
        would like the server to use.
    Content-Length:
      name: Content-Length
      in: header
      required: false
      schema: *ref_36
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Content-Type:
      name: Content-Type
      in: header
      schema: *ref_37
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
  responses:
    '200':
      description: OK
    '202':
      description: Accepted
    '400':
      description: Bad Request
      content: *ref_19
      headers: *ref_20
    '401':
      description: Unauthorized
      content: *ref_21
      headers: *ref_22
    '403':
      description: Forbidden
      content: *ref_23
      headers: *ref_24
    '404':
      description: Not Found
      content: *ref_25
      headers: *ref_26
    '405':
      description: Method Not Allowed
      content: *ref_27
      headers: *ref_28
    '406':
      description: Not Acceptable
      content: *ref_29
      headers: *ref_30
    '501':
      description: Not Implemented
      content: *ref_31
      headers: *ref_32
    '503':
      description: Service Unavailable
      content: *ref_33
      headers: *ref_34
  headers:
    Content-Length:
      required: false
      schema: *ref_17
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Content-Type:
      schema: *ref_18
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
