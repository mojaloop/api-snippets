openapi: 3.0.2
info:
  version: '0.1'
  title: Thirdparty Snippets
  description: |
    Based on sequence diagrams
    (https://github.com/mojaloop/pisp/tree/master/docs/out).
    This is a work in progress.
  license:
    name: TBD
servers:
  - url: '{protocol}://hostname:<port>/switch/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
paths:
  /interface:
    post:
      description: >-
        Essential path to include schema definitions that are not used so that
        these definitions get included into the openapi-cli bundle api
        definition so that they get converted into typescript definitions.
      operationId: test
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - title: ParticipantsIDPutResponse
                  type: object
                  description: 'The object sent in the PUT /participants/{ID} callback.'
                  properties: &ref_62
                    partyList:
                      type: array
                      items:
                        title: PartyResult
                        type: object
                        description: Data model for the complex type PartyResult.
                        properties: &ref_7
                          partyId:
                            title: PartyIdInfo
                            type: object
                            description: Data model for the complex type PartyIdInfo.
                            properties: &ref_2
                              partyIdType:
                                title: PartyIdType
                                type: string
                                enum: &ref_77
                                  - MSISDN
                                  - EMAIL
                                  - PERSONAL_ID
                                  - BUSINESS
                                  - DEVICE
                                  - ACCOUNT_ID
                                  - IBAN
                                  - ALIAS
                                  - CONSENT
                                  - THIRD_PARTY_LINK
                                description: >
                                  Below are the allowed values for the
                                  enumeration.

                                  - MSISDN - An MSISDN (Mobile Station
                                  International Subscriber Directory

                                  Number, that is, the phone number) is used as
                                  reference to a participant.

                                  The MSISDN identifier should be in
                                  international format according to the

                                  [ITU-T E.164
                                  standard](https://www.itu.int/rec/T-REC-E.164/en).

                                  Optionally, the MSISDN may be prefixed by a
                                  single plus sign, indicating the

                                  international prefix.

                                  - EMAIL - An email is used as reference to a

                                  participant. The format of the email should be
                                  according to the informational

                                  [RFC
                                  3696](https://tools.ietf.org/html/rfc3696).

                                  - PERSONAL_ID - A personal identifier is used
                                  as reference to a participant.

                                  Examples of personal identification are
                                  passport number, birth certificate

                                  number, and national registration number. The
                                  identifier number is added in 

                                  the PartyIdentifier element. The personal
                                  identifier type is added in the

                                  PartySubIdOrType element.

                                  - BUSINESS - A specific Business (for example,
                                  an organization or a company)

                                  is used as reference to a participant. The
                                  BUSINESS identifier can be in any

                                  format. To make a transaction connected to a
                                  specific username or bill number

                                  in a Business, the PartySubIdOrType element
                                  should be used.

                                  - DEVICE - A specific device (for example, a
                                  POS or ATM) ID connected to a

                                  specific business or organization is used as
                                  reference to a Party.

                                  For referencing a specific device under a
                                  specific business or organization,

                                  use the PartySubIdOrType element.

                                  - ACCOUNT_ID - A bank account number or FSP
                                  account ID should be used as

                                  reference to a participant. The ACCOUNT_ID
                                  identifier can be in any format,

                                  as formats can greatly differ depending on
                                  country and FSP.

                                  - IBAN - A bank account number or FSP account
                                  ID is used as reference to a

                                  participant. The IBAN identifier can consist
                                  of up to 34 alphanumeric

                                  characters and should be entered without
                                  whitespace.

                                  - ALIAS An alias is used as reference to a
                                  participant. The alias should be

                                  created in the FSP as an alternative reference
                                  to an account owner.

                                  Another example of an alias is a username in
                                  the FSP system.

                                  The ALIAS identifier can be in any format. It
                                  is also possible to use the

                                  PartySubIdOrType element for identifying an
                                  account under an Alias defined

                                  by the PartyIdentifier.

                                  - CONSENT - A Consent represents an agreement
                                  between a PISP, a Customer and

                                  a DFSP which allows the PISP permission to
                                  perform actions on behalf of the 

                                  customer. A Consent has an authoritative
                                  source: either the DFSP who issued 

                                  the Consent, or an Auth Service which
                                  administers the Consent.

                                  - THIRD_PARTY_LINK - A Third Party Link
                                  represents an agreement between a PISP,

                                  a DFSP, and a specific Customer's account at
                                  the DFSP. The content of the link 

                                  is created by the DFSP at the time when it
                                  gives permission to the PISP for 

                                  specific access to a given account.
                                example: PERSONAL_ID
                              partyIdentifier:
                                title: PartyIdentifier
                                type: string
                                minLength: 1
                                maxLength: 128
                                description: Identifier of the Party.
                                example: '16135551212'
                              partySubIdOrType:
                                title: PartySubIdOrType
                                type: string
                                minLength: 1
                                maxLength: 128
                                description: >-
                                  Either a sub-identifier of a PartyIdentifier,
                                  or a sub-type of the PartyIdType, normally a
                                  PersonalIdentifierType.
                              fspId:
                                title: FspId
                                type: string
                                minLength: 1
                                maxLength: 32
                                description: FSP identifier.
                              extensionList:
                                title: ExtensionList
                                type: object
                                description: >-
                                  Data model for the complex type ExtensionList.
                                  An optional list of extensions, specific to
                                  deployment.
                                properties: &ref_0
                                  extension:
                                    type: array
                                    items:
                                      title: Extension
                                      type: object
                                      description: >-
                                        Data model for the complex type
                                        Extension.
                                      properties: &ref_78
                                        key:
                                          title: ExtensionKey
                                          type: string
                                          minLength: 1
                                          maxLength: 32
                                          description: Extension key.
                                        value:
                                          title: ExtensionValue
                                          type: string
                                          minLength: 1
                                          maxLength: 128
                                          description: Extension value.
                                      required: &ref_79
                                        - key
                                        - value
                                    minItems: 1
                                    maxItems: 16
                                    description: Number of Extension elements.
                                required: &ref_1
                                  - extension
                            required: &ref_3
                              - partyIdType
                              - partyIdentifier
                          errorInformation:
                            title: ErrorInformation
                            type: object
                            description: Data model for the complex type ErrorInformation.
                            properties: &ref_13
                              errorCode:
                                title: ErrorCode
                                type: string
                                pattern: '^[1-9]\d{3}$'
                                description: >-
                                  The API data type ErrorCode is a JSON String
                                  of four characters, consisting of digits only.
                                  Negative numbers are not allowed. A leading
                                  zero is not allowed. Each error code in the
                                  API is a four-digit number, for example, 1234,
                                  where the first number (1 in the example)
                                  represents the high-level error category, the
                                  second number (2 in the example) represents
                                  the low-level error category, and the last two
                                  numbers (34 in the example) represent the
                                  specific error.
                                example: '5100'
                              errorDescription:
                                title: ErrorDescription
                                type: string
                                minLength: 1
                                maxLength: 128
                                description: Error description string.
                              extensionList:
                                title: ExtensionList
                                type: object
                                description: >-
                                  Data model for the complex type ExtensionList.
                                  An optional list of extensions, specific to
                                  deployment.
                                properties: *ref_0
                                required: *ref_1
                            required: &ref_14
                              - errorCode
                              - errorDescription
                        required: &ref_8
                          - partyId
                      minItems: 1
                      maxItems: 10000
                      description: >-
                        List of PartyResult elements that were either created or
                        failed to be created.
                    currency:
                      title: Currency
                      description: >-
                        The currency codes defined in [ISO
                        4217](https://www.iso.org/iso-4217-currency-codes.html)
                        as three-letter alphabetic codes are used as the
                        standard naming representation for currencies.
                      type: string
                      minLength: 3
                      maxLength: 3
                      enum: &ref_4
                        - AED
                        - AFN
                        - ALL
                        - AMD
                        - ANG
                        - AOA
                        - ARS
                        - AUD
                        - AWG
                        - AZN
                        - BAM
                        - BBD
                        - BDT
                        - BGN
                        - BHD
                        - BIF
                        - BMD
                        - BND
                        - BOB
                        - BRL
                        - BSD
                        - BTN
                        - BWP
                        - BYN
                        - BZD
                        - CAD
                        - CDF
                        - CHF
                        - CLP
                        - CNY
                        - COP
                        - CRC
                        - CUC
                        - CUP
                        - CVE
                        - CZK
                        - DJF
                        - DKK
                        - DOP
                        - DZD
                        - EGP
                        - ERN
                        - ETB
                        - EUR
                        - FJD
                        - FKP
                        - GBP
                        - GEL
                        - GGP
                        - GHS
                        - GIP
                        - GMD
                        - GNF
                        - GTQ
                        - GYD
                        - HKD
                        - HNL
                        - HRK
                        - HTG
                        - HUF
                        - IDR
                        - ILS
                        - IMP
                        - INR
                        - IQD
                        - IRR
                        - ISK
                        - JEP
                        - JMD
                        - JOD
                        - JPY
                        - KES
                        - KGS
                        - KHR
                        - KMF
                        - KPW
                        - KRW
                        - KWD
                        - KYD
                        - KZT
                        - LAK
                        - LBP
                        - LKR
                        - LRD
                        - LSL
                        - LYD
                        - MAD
                        - MDL
                        - MGA
                        - MKD
                        - MMK
                        - MNT
                        - MOP
                        - MRO
                        - MUR
                        - MVR
                        - MWK
                        - MXN
                        - MYR
                        - MZN
                        - NAD
                        - NGN
                        - NIO
                        - NOK
                        - NPR
                        - NZD
                        - OMR
                        - PAB
                        - PEN
                        - PGK
                        - PHP
                        - PKR
                        - PLN
                        - PYG
                        - QAR
                        - RON
                        - RSD
                        - RUB
                        - RWF
                        - SAR
                        - SBD
                        - SCR
                        - SDG
                        - SEK
                        - SGD
                        - SHP
                        - SLL
                        - SOS
                        - SPL
                        - SRD
                        - STD
                        - SVC
                        - SYP
                        - SZL
                        - THB
                        - TJS
                        - TMT
                        - TND
                        - TOP
                        - TRY
                        - TTD
                        - TVD
                        - TWD
                        - TZS
                        - UAH
                        - UGX
                        - USD
                        - UYU
                        - UZS
                        - VEF
                        - VND
                        - VUV
                        - WST
                        - XAF
                        - XCD
                        - XDR
                        - XOF
                        - XPF
                        - XTS
                        - XXX
                        - YER
                        - ZAR
                        - ZMW
                        - ZWD
                  required: &ref_63
                    - partyList
                - title: PartiesTypeIDPutResponse
                  type: object
                  description: >
                    The object sent in the PUT /parties/{Type}/{ID} callback.


                    This is a variant based on FSPIOP `PartiesTypeIDPutResponse`
                    specification.

                    Main difference being that it returns a `Party` with the
                    newly added

                    `accounts` property.
                  properties: &ref_82
                    party:
                      title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: &ref_9
                        partyIdInfo:
                          title: PartyIdInfo
                          type: object
                          description: Data model for the complex type PartyIdInfo.
                          properties: *ref_2
                          required: *ref_3
                        merchantClassificationCode:
                          title: MerchantClassificationCode
                          type: string
                          pattern: '^[\d]{1,4}$'
                          description: >-
                            A limited set of pre-defined numbers. This list
                            would be a limited set of numbers identifying a set
                            of popular merchant types like School Fees, Pubs and
                            Restaurants, Groceries, etc.
                        name:
                          title: PartyName
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: >-
                            Name of the Party. Could be a real name or a
                            nickname.
                        personalInfo:
                          title: PartyPersonalInfo
                          type: object
                          description: Data model for the complex type PartyPersonalInfo.
                          properties: &ref_81
                            complexName:
                              title: PartyComplexName
                              type: object
                              description: >-
                                Data model for the complex type
                                PartyComplexName.
                              properties: &ref_80
                                firstName:
                                  title: FirstName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: >-
                                    ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                                    .,''-]{1,128}$
                                  description: First name of the Party (Name Type).
                                  example: Henrik
                                middleName:
                                  title: MiddleName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: >-
                                    ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                                    .,''-]{1,128}$
                                  description: Middle name of the Party (Name Type).
                                  example: Johannes
                                lastName:
                                  title: LastName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: >-
                                    ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
                                    .,''-]{1,128}$
                                  description: Last name of the Party (Name Type).
                                  example: Karlsson
                            dateOfBirth:
                              title: DateofBirth (type Date)
                              type: string
                              pattern: >-
                                ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
                              description: Date of Birth of the Party.
                              example: '1966-06-16'
                      required: &ref_10
                        - partyIdInfo
                  required: &ref_83
                    - party
                - title: QuotesIDPutResponse
                  type: object
                  description: 'The object sent in the PUT /quotes/{ID} callback.'
                  properties: &ref_84
                    transferAmount:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: &ref_5
                        currency:
                          title: Currency
                          description: >-
                            The currency codes defined in [ISO
                            4217](https://www.iso.org/iso-4217-currency-codes.html)
                            as three-letter alphabetic codes are used as the
                            standard naming representation for currencies.
                          type: string
                          minLength: 3
                          maxLength: 3
                          enum: *ref_4
                        amount:
                          title: Amount
                          type: string
                          pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
                          description: >-
                            The API data type Amount is a JSON String in a
                            canonical format that is restricted by a regular
                            expression for interoperability reasons. This
                            pattern does not allow any trailing zeroes at all,
                            but allows an amount without a minor currency unit.
                            It also only allows four digits in the minor
                            currency unit; a negative value is not allowed.
                            Using more than 18 digits in the major currency unit
                            is not allowed.
                          example: '123.45'
                      required: &ref_6
                        - currency
                        - amount
                    payeeReceiveAmount:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                    payeeFspFee:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                    payeeFspCommission:
                      title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                    expiration:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                    geoCode:
                      title: GeoCode
                      type: object
                      description: >-
                        Data model for the complex type GeoCode. Indicates the
                        geographic location from where the transaction was
                        initiated.
                      properties: &ref_11
                        latitude:
                          title: Latitude
                          type: string
                          pattern: >-
                            ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
                          description: >-
                            The API data type Latitude is a JSON String in a
                            lexical format that is restricted by a regular
                            expression for interoperability reasons.
                          example: '+45.4215'
                        longitude:
                          title: Longitude
                          type: string
                          pattern: >-
                            ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
                          description: >-
                            The API data type Longitude is a JSON String in a
                            lexical format that is restricted by a regular
                            expression for interoperability reasons.
                          example: '+75.6972'
                      required: &ref_12
                        - latitude
                        - longitude
                    ilpPacket:
                      title: IlpPacket
                      type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      minLength: 1
                      maxLength: 32768
                      description: Information for recipient (transport layer information).
                      example: >-
                        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                    condition:
                      title: IlpCondition
                      type: string
                      pattern: '^[A-Za-z0-9-_]{43}$'
                      maxLength: 48
                      description: >-
                        Condition that must be attached to the transfer by the
                        Payer.
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_85
                    - transferAmount
                    - expiration
                    - ilpPacket
                    - condition
                - title: ThirdpartyRequestsTransactionsIDPatchResponse
                  type: object
                  description: >-
                    Used by: DFSP

                    The issuing PISP will expect a response to their request for
                    a transfer which describes the finalized state of the
                    requested transfer.

                    This response will be given by a PATCH call on the
                    /thirdpartyRequests/transactions/{ID} resource.

                    The {ID} given in the query string should be the
                    transactionRequestId which was originally used by the PISP
                    to identify the transaction request.

                    https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
                  properties: &ref_70
                    completedTimestamp:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                    transactionRequestState:
                      title: TransactionRequestState
                      type: string
                      enum: &ref_69
                        - RECEIVED
                        - PENDING
                        - ACCEPTED
                        - REJECTED
                      description: >-
                        Below are the allowed values for the enumeration.

                        - RECEIVED - Payer FSP has received the transaction from
                        the Payee FSP.

                        - PENDING - Payer FSP has sent the transaction request
                        to the Payer.

                        - ACCEPTED - Payer has approved the transaction.

                        - REJECTED - Payer has rejected the transaction.
                      example: RECEIVED
                    transactionState:
                      title: TransactionState
                      type: string
                      enum: &ref_86
                        - RECEIVED
                        - PENDING
                        - COMPLETED
                        - REJECTED
                      description: >-
                        Below are the allowed values for the enumeration.

                        - RECEIVED - Payee FSP has received the transaction from
                        the Payer FSP.

                        - PENDING - Payee FSP has validated the transaction.

                        - COMPLETED - Payee FSP has successfully performed the
                        transaction.

                        - REJECTED - Payee FSP has failed to perform the
                        transaction.
                      example: RECEIVED
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_71
                    - transactionRequestState
                    - transactionState
                - title: AuthorizationResponseType
                  description: >
                    Enum containing authorization response information; if the
                    customer 

                    accepted the terms of the transfer, or rejected the terms.
                  type: string
                  enum: &ref_87
                    - ACCEPTED
                    - REJECTED
                - title: ConsentStatusIssued
                  type: string
                  enum: &ref_51
                    - ISSUED
                  description: |-
                    Allowed values for the enumeration ConsentStatus
                    - ISSUED - The consent has been issued by the DFSP
                - title: IlpFulfilment
                  type: string
                  pattern: '^[A-Za-z0-9-_]{43}$'
                  maxLength: 48
                  description: >-
                    Fulfilment that must be attached to the transfer by the
                    Payee.
                  example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                - title: Integer
                  type: string
                  pattern: '^[1-9]\d*$'
                  description: >-
                    The API data type Integer is a JSON String consisting of
                    digits only. Negative numbers and leading zeroes are not
                    allowed. The data type is always limited to a specific
                    number of digits.
                - title: Note
                  type: string
                  minLength: 1
                  maxLength: 128
                  description: Memo assigned to transaction.
                  example: Note sent to Payee.
                - title: PartyIdInfo
                  type: object
                  description: Data model for the complex type PartyIdInfo.
                  properties: &ref_89
                    partyIdType:
                      title: PartyIdTypeTPLink
                      type: string
                      enum: &ref_88
                        - THIRD_PARTY_LINK
                      description: >
                        - THIRD_PARTY_LINK - is the DFSP's internal reference
                        which allows DFSP to find out the corresponding consent
                      example: PERSONAL_ID
                    partyIdentifier:
                      title: PartyIdentifier
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Identifier of the Party.
                      example: '16135551212'
                    partySubIdOrType:
                      title: PartySubIdOrType
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: >-
                        Either a sub-identifier of a PartyIdentifier, or a
                        sub-type of the PartyIdType, normally a
                        PersonalIdentifierType.
                    fspId:
                      title: FspId
                      type: string
                      minLength: 1
                      maxLength: 32
                      description: FSP identifier.
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_90
                    - partyIdType
                    - partyIdentifier
                - title: PartyResult
                  type: object
                  description: Data model for the complex type PartyResult.
                  properties: *ref_7
                  required: *ref_8
                - title: ServiceType
                  type: string
                  description: >-
                    The ServiceType enumeration describes the types of role for
                    which a DFSP may query using the /services resource.

                    Below are the allowed values for the enumeration ServiceType
                    - THIRD_PARTY_DFSP - Enum used to query for DFSP's that have
                    thirdparty features enabled. - PISP - Enum used to query for
                    PISPs. - AUTH_SERVICE - Participants which provide
                    Authentication Services.

                    https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3229-servicetype
                  enum: &ref_91
                    - THIRD_PARTY_DFSP
                    - PISP
                    - AUTH_SERVICE
                - title: ParticipantsPostRequest
                  type: object
                  description: The object sent in the POST /participants request.
                  properties: &ref_60
                    requestId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    partyList:
                      type: array
                      items:
                        title: PartyIdInfo
                        type: object
                        description: Data model for the complex type PartyIdInfo.
                        properties: *ref_2
                        required: *ref_3
                      minItems: 1
                      maxItems: 10000
                      description: >
                        List of PartyIdInfo elements that the client would like
                        to update

                        or create FSP information about.
                    currency:
                      title: Currency
                      description: >-
                        The currency codes defined in [ISO
                        4217](https://www.iso.org/iso-4217-currency-codes.html)
                        as three-letter alphabetic codes are used as the
                        standard naming representation for currencies.
                      type: string
                      minLength: 3
                      maxLength: 3
                      enum: *ref_4
                  required: &ref_61
                    - requestId
                    - partyList
                - title: QuotesPostRequest
                  type: object
                  description: The object sent in the POST /quotes request.
                  properties: &ref_97
                    quoteId:
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    transactionId:
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    transactionRequestId:
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                    payee:
                      description: Data model for the complex type Party.
                      title: Party
                      type: object
                      properties: *ref_9
                      required: *ref_10
                    payer:
                      description: Data model for the complex type Party.
                      title: Party
                      type: object
                      properties: *ref_9
                      required: *ref_10
                    amountType:
                      description: >-
                        Below are the allowed values for the enumeration
                        AmountType.

                        - SEND - Amount the Payer would like to send, that is,
                        the amount that should be withdrawn from the Payer
                        account including any fees.

                        - RECEIVE - Amount the Payer would like the Payee to
                        receive, that is, the amount that should be sent to the
                        receiver exclusive of any fees.
                      example: RECEIVE
                      title: AmountType
                      type: string
                      enum: &ref_66
                        - SEND
                        - RECEIVE
                    amount:
                      description: Data model for the complex type Money.
                      title: Money
                      type: object
                      properties: *ref_5
                      required: *ref_6
                    fees:
                      description: Data model for the complex type Money.
                      title: Money
                      type: object
                      properties: *ref_5
                      required: *ref_6
                    transactionType:
                      description: Data model for the complex type TransactionType.
                      title: TransactionType
                      type: object
                      properties: &ref_67
                        scenario:
                          title: TransactionScenario
                          type: string
                          enum: &ref_92
                            - DEPOSIT
                            - WITHDRAWAL
                            - TRANSFER
                            - PAYMENT
                            - REFUND
                          description: >-
                            Below are the allowed values for the enumeration.

                            - DEPOSIT - Used for performing a Cash-In (deposit)
                            transaction. In a normal scenario, electronic funds
                            are transferred from a Business account to a
                            Consumer account, and physical cash is given from
                            the Consumer to the Business User.

                            - WITHDRAWAL - Used for performing a Cash-Out
                            (withdrawal) transaction. In a normal scenario,
                            electronic funds are transferred from a Consumer’s
                            account to a Business account, and physical cash is
                            given from the Business User to the Consumer.

                            - TRANSFER - Used for performing a P2P (Peer to
                            Peer, or Consumer to Consumer) transaction.

                            - PAYMENT - Usually used for performing a
                            transaction from a Consumer to a Merchant or
                            Organization, but could also be for a B2B (Business
                            to Business) payment. The transaction could be
                            online for a purchase in an Internet store, in a
                            physical store where both the Consumer and Business
                            User are present, a bill payment, a donation, and so
                            on.

                            - REFUND - Used for performing a refund of
                            transaction.
                          example: DEPOSIT
                        subScenario:
                          title: TransactionSubScenario
                          type: string
                          pattern: '^[A-Z_]{1,32}$'
                          description: >-
                            Possible sub-scenario, defined locally within the
                            scheme (UndefinedEnum Type).
                          example: LOCALLY_DEFINED_SUBSCENARIO
                        initiator:
                          title: TransactionInitiator
                          type: string
                          enum: &ref_93
                            - PAYER
                            - PAYEE
                          description: >-
                            Below are the allowed values for the enumeration.

                            - PAYER - Sender of funds is initiating the
                            transaction. The account to send from is either
                            owned by the Payer or is connected to the Payer in
                            some way.

                            - PAYEE - Recipient of the funds is initiating the
                            transaction by sending a transaction request. The
                            Payer must approve the transaction, either
                            automatically by a pre-generated OTP or by
                            pre-approval of the Payee, or by manually approving
                            in his or her own Device.
                          example: PAYEE
                        initiatorType:
                          title: TransactionInitiatorType
                          type: string
                          enum: &ref_94
                            - CONSUMER
                            - AGENT
                            - BUSINESS
                            - DEVICE
                          description: >-
                            Below are the allowed values for the enumeration.

                            - CONSUMER - Consumer is the initiator of the
                            transaction.

                            - AGENT - Agent is the initiator of the transaction.

                            - BUSINESS - Business is the initiator of the
                            transaction.

                            - DEVICE - Device is the initiator of the
                            transaction.
                          example: CONSUMER
                        refundInfo:
                          title: Refund
                          type: object
                          description: Data model for the complex type Refund.
                          properties: &ref_95
                            originalTransactionId:
                              title: CorrelationId
                              type: string
                              pattern: >-
                                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                              description: >-
                                Identifier that correlates all messages of the
                                same sequence. The API data type UUID
                                (Universally Unique Identifier) is a JSON String
                                in canonical format, conforming to [RFC
                                4122](https://tools.ietf.org/html/rfc4122), that
                                is restricted by a regular expression for
                                interoperability reasons. A UUID is always 36
                                characters long, 32 hexadecimal symbols and 4
                                dashes (‘-‘).
                              example: b51ec534-ee48-4575-b6a9-ead2955b8069
                            refundReason:
                              title: RefundReason
                              type: string
                              minLength: 1
                              maxLength: 128
                              description: Reason for the refund.
                              example: Free text indicating reason for the refund.
                          required: &ref_96
                            - originalTransactionId
                        balanceOfPayments:
                          title: BalanceOfPayments
                          type: string
                          pattern: '^[1-9]\d{2}$'
                          description: >-
                            (BopCode) The API data type
                            [BopCode](https://www.imf.org/external/np/sta/bopcode/)
                            is a JSON String of 3 characters, consisting of
                            digits only. Negative numbers are not allowed. A
                            leading zero is not allowed.
                          example: '123'
                      required: &ref_68
                        - scenario
                        - initiator
                        - initiatorType
                    geoCode:
                      description: >-
                        Data model for the complex type GeoCode. Indicates the
                        geographic location from where the transaction was
                        initiated.
                      title: GeoCode
                      type: object
                      properties: *ref_11
                      required: *ref_12
                    note:
                      description: Memo assigned to transaction.
                      example: Note sent to Payee.
                      title: Note
                      type: string
                      minLength: 1
                      maxLength: 128
                    expiration:
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                    extensionList:
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      title: ExtensionList
                      type: object
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_98
                    - quoteId
                    - transactionId
                    - payee
                    - payer
                    - amountType
                    - amount
                    - transactionType
      responses:
        '200':
          description: Ok
  '/accounts/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: &ref_34
          type: string
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: &ref_35
          type: string
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: &ref_36
          type: string
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: &ref_37
          type: string
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: &ref_38
          type: string
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: &ref_39
          type: string
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: &ref_40
          type: string
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: &ref_41
          type: string
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: &ref_42
          type: string
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: &ref_43
          type: string
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      operationId: GetAccountsByUserId
      summary: GetAccountsByUserId
      description: >
        The HTTP request `GET /accounts/{ID}` is used to retrieve the list of
        potential accounts available for linking.
      tags:
        - accounts
        - sampled
      parameters:
        - name: Accept
          in: header
          required: true
          schema: &ref_45
            type: string
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: &ref_18
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: &ref_15
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties: *ref_13
                    required: *ref_14
          headers: &ref_19
            Content-Length:
              required: false
              schema: &ref_16
                type: integer
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: &ref_17
                type: string
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '401':
          description: Unauthorized
          content: &ref_20
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_21
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '403':
          description: Forbidden
          content: &ref_22
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_23
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '404':
          description: Not Found
          content: &ref_24
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_25
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '405':
          description: Method Not Allowed
          content: &ref_26
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_27
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '406':
          description: Not Acceptable
          content: &ref_28
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_29
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '501':
          description: Not Implemented
          content: &ref_30
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_31
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
        '503':
          description: Service Unavailable
          content: &ref_32
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: >-
                  Data model for the complex type object that contains an
                  optional element ErrorInformation used along with 4xx and 5xx
                  responses.
                properties: *ref_15
          headers: &ref_33
            Content-Length:
              required: false
              schema: *ref_16
              description: >-
                The `Content-Length` header field indicates the anticipated size
                of the payload body. Only sent if there is a body.


                **Note:** The API supports a maximum size of 5242880 bytes (5
                Megabytes).
            Content-Type:
              schema: *ref_17
              required: true
              description: >-
                The `Content-Type` header indicates the specific version of the
                API used to send the payload body.
    put:
      description: >
        The HTTP request `PUT /accounts/{ID}` is used to return the list of
        potential accounts available for linking
      operationId: UpdateAccountsByUserId
      summary: UpdateAccountsByUserId
      tags:
        - accounts
        - sampled
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: &ref_44
            type: integer
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: AccountsIDPutResponse
              type: object
              description: >-
                Callback and data model information for GET /accounts/{ID}:

                Callback - PUT /accounts/{ID} Error Callback - PUT
                /accounts/{ID}/error Data Model - Empty body

                The PUT /accounts/{ID} response is used to inform the requester
                of the result of a request for accounts information. The
                identifier ID given in the call are the values given in the
                original request.

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31121--put-accountsid
              properties: &ref_102
                accountList:
                  title: AccountList
                  type: array
                  description: >-
                    The AccountList data model is used to hold information about
                    the accounts that a party controls.

                    https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3213-accountlist
                  items: &ref_101
                    title: Account
                    type: object
                    description: >-
                      Data model for the complex type Account.

                      https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3211-account
                    properties: &ref_99
                      accountNickname:
                        title: Name
                        type: string
                        pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                        description: >-
                          The API data type Name is a JSON String, restricted by
                          a regular expression to avoid characters which are
                          generally not used in a name.


                          Regular Expression - The regular expression for
                          restricting the Name type is "^(?!\s*$)[\w
                          .,'-]{1,128}$". The restriction does not allow a
                          string consisting of whitespace only, all Unicode
                          characters are allowed, as well as the period (.)
                          (apostrophe (‘), dash (-), comma (,) and space
                          characters ( ).


                          **Note:** In some programming languages, Unicode
                          support must be specifically enabled. For example, if
                          Java is used, the flag UNICODE_CHARACTER_CLASS must be
                          enabled to allow Unicode characters.
                      address:
                        title: AccountAddress
                        type: string
                        description: >-
                          The AccountAddress data type is a variable length
                          string with a maximum size of 1023 characters and
                          consists of:

                          Alphanumeric characters, upper or lower case.
                          (Addresses are case-sensitive so that they can contain
                          data encoded in formats such as base64url.)

                          - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.)
                          Addresses MUST NOT end in a period (.) character

                          An entity providing accounts to parties (i.e. a
                          participant) can provide any value for an
                          AccountAddress that is meaningful to that entity. It
                          does not need to provide an address that makes the
                          account identifiable outside the entity's domain.

                          IMPORTANT: The policy for defining addresses and the
                          life-cycle of these is at the discretion of the
                          address space owner (the payer DFSP in this case).

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
                        pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                        minLength: 1
                        maxLength: 1023
                      currency:
                        title: Currency
                        description: >-
                          The currency codes defined in [ISO
                          4217](https://www.iso.org/iso-4217-currency-codes.html)
                          as three-letter alphabetic codes are used as the
                          standard naming representation for currencies.
                        type: string
                        minLength: 3
                        maxLength: 3
                        enum: *ref_4
                    required: &ref_100
                      - accountNickname
                      - address
                      - currency
                  minItems: 1
                  maxItems: 256
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_103
                - accounts
            example:
              - accountNickname: dfspa.user.nickname1
                id: dfspa.username.1234
                currency: ZAR
              - accountNickname: dfspa.user.nickname2
                id: dfspa.username.5678
                currency: USD
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/accounts/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      description: >
        The HTTP request `PUT /accounts/{ID}/error` is used to return error
        information
      operationId: UpdateAccountsByUserIdError
      summary: UpdateAccountsByUserIdError
      tags:
        - accounts
        - sampled
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: &ref_48
                errorInformation:
                  title: ErrorInformation
                  type: object
                  description: Data model for the complex type ErrorInformation.
                  properties: *ref_13
                  required: *ref_14
              required: &ref_49
                - errorInformation
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  /health:
    get:
      tags:
        - health
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
      operationId: HealthGet
      summary: Health check endpoint
      description: >-
        The HTTP request GET /health is used to return the current status of the
        API.
  /metrics:
    get:
      tags:
        - health
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request GET /metrics is used to return metrics for the API.
  /consentRequests:
    parameters:
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      tags:
        - consentRequests
        - sampled
      operationId: CreateConsentRequest
      summary: CreateConsentRequest
      description: >
        The HTTP request **POST /consentRequests** is used to request a DFSP to
        grant access to one or more

        accounts owned by a customer of the DFSP for the PISP who sends the
        request.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: The consentRequest to create
        required: true
        content:
          application/json:
            schema:
              title: ConsentRequestsPostRequest
              type: object
              description: >-
                Used by: PISP

                The HTTP request POST /consentRequests is used to request a DFSP
                to grant access to one or more accounts owned by a customer of
                the DFSP for the PISP who sends the request.

                Callback and data model for POST /consentRequests:

                Callback: PUT /consentRequests/{ID} Error callback: PUT
                /consentRequests/{ID}/error Data model - see below url

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31212-post-consentrequests
              properties: &ref_106
                consentRequestId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                userId:
                  type: string
                  description: >-
                    The identifier used in the **GET /accounts/**_{ID}_. Used by
                    the DFSP to correlate an account lookup to a
                    `consentRequest`
                  minLength: 1
                  maxLength: 128
                scopes:
                  type: array
                  minLength: 1
                  maxLength: 256
                  items:
                    title: Scope
                    type: object
                    description: >-
                      The Scope element contains an identifier defining, in the
                      terms of a DFSP, an account on which access types can be
                      requested or granted. It also defines the access types
                      which are requested or granted.

                      https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                    properties: &ref_46
                      address:
                        title: AccountAddress
                        type: string
                        description: >-
                          The AccountAddress data type is a variable length
                          string with a maximum size of 1023 characters and
                          consists of:

                          Alphanumeric characters, upper or lower case.
                          (Addresses are case-sensitive so that they can contain
                          data encoded in formats such as base64url.)

                          - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.)
                          Addresses MUST NOT end in a period (.) character

                          An entity providing accounts to parties (i.e. a
                          participant) can provide any value for an
                          AccountAddress that is meaningful to that entity. It
                          does not need to provide an address that makes the
                          account identifiable outside the entity's domain.

                          IMPORTANT: The policy for defining addresses and the
                          life-cycle of these is at the discretion of the
                          address space owner (the payer DFSP in this case).

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
                        pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                        minLength: 1
                        maxLength: 1023
                      actions:
                        type: array
                        minItems: 1
                        maxItems: 32
                        items:
                          title: ScopeAction
                          type: string
                          description: >
                            The ScopeAction element contains an access type
                            which a PISP can request

                            from a DFSP, or which a DFSP can grant to a PISP.

                            It must be a member of the appropriate enumeration.


                            - ACCOUNTS_GET_BALANCE: PISP can request a balance
                            for the linked account

                            - ACCOUNTS_TRANSFER: PISP can request a transfer of
                            funds from the linked account in the DFSP

                            - ACCOUNTS_STATEMENT: PISP can request a statement
                            of individual transactions on a user's account
                          enum: &ref_104
                            - ACCOUNTS_GET_BALANCE
                            - ACCOUNTS_TRANSFER
                            - ACCOUNTS_STATEMENT
                    required: &ref_47
                      - address
                      - actions
                authChannels:
                  type: array
                  minLength: 1
                  maxLength: 256
                  items:
                    title: ConsentRequestChannelType
                    type: string
                    enum: &ref_105
                      - WEB
                      - OTP
                    description: >
                      The auth channel being used for the consent request.

                      - WEB - DFSP can support authorization via a web-based
                      login.

                      - OTP - DFSP can support authorization via a One Time PIN.
                callbackUri:
                  title: Uri
                  type: string
                  pattern: '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?'
                  minLength: 1
                  maxLength: 512
                  description: >
                    The API data type Uri is a JSON string in a canonical format
                    that is restricted by a regular expression for
                    interoperability reasons.
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_107
                - consentRequestId
                - userId
                - scopes
                - authChannels
                - callbackUri
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/consentRequests/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      operationId: GetConsentRequestsById
      summary: GetConsentRequestsById
      description: >
        The HTTP request `GET /consentRequests/{ID}` is used to get information
        about a previously

        requested consent. The *{ID}* in the URI should contain the
        consentRequestId that was assigned to the

        request by the PISP when the PISP originated the request.
      tags:
        - consentRequests
        - sampled
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      tags:
        - consentRequests
        - sampled
      operationId: UpdateConsentRequest
      summary: UpdateConsentRequest
      description: >
        A DFSP uses this callback to (1) inform the PISP that the consentRequest
        has been accepted,

        and (2) communicate to the PISP which `authChannel` it should use to
        authenticate their user

        with.


        When a PISP requests a series of permissions from a DFSP on behalf of a
        DFSP’s customer, not all

        the permissions requested may be granted by the DFSP. Conversely, the
        out-of-band authorization

        process  may result in additional privileges being granted by the
        account holder to the PISP. The

        **PUT /consentRequests/**_{ID}_ resource returns the current state of
        the permissions relating to a

        particular authorization request.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentRequestsIDPutResponseWeb
                  type: object
                  description: >
                    The object sent in a `PUT /consentRequests/{ID}` request.


                    Schema used in the request consent phase of the account
                    linking web flow,

                    the result is the PISP being instructed on a specific URL
                    where this

                    supposed user should be redirected. This URL should be a
                    place where

                    the user can prove their identity (e.g., by logging in).
                  properties: &ref_109
                    scopes:
                      type: array
                      minLength: 1
                      maxLength: 256
                      items:
                        title: Scope
                        type: object
                        description: >-
                          The Scope element contains an identifier defining, in
                          the terms of a DFSP, an account on which access types
                          can be requested or granted. It also defines the
                          access types which are requested or granted.

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                        properties: *ref_46
                        required: *ref_47
                    authChannels:
                      type: array
                      minLength: 1
                      maxLength: 1
                      items:
                        title: ConsentRequestChannelTypeWeb
                        type: string
                        enum: &ref_108
                          - WEB
                        description: >
                          The web auth channel being used for `PUT
                          /consentRequest/{ID}` request.
                    callbackUri:
                      title: Uri
                      type: string
                      pattern: >-
                        ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
                      minLength: 1
                      maxLength: 512
                      description: >
                        The API data type Uri is a JSON string in a canonical
                        format that is restricted by a regular expression for
                        interoperability reasons.
                    authUri:
                      title: Uri
                      type: string
                      pattern: >-
                        ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
                      minLength: 1
                      maxLength: 512
                      description: >
                        The API data type Uri is a JSON string in a canonical
                        format that is restricted by a regular expression for
                        interoperability reasons.
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_110
                    - scopes
                    - authChannels
                    - callbackUri
                    - authUri
                  additionalProperties: false
                - title: ConsentRequestsIDPutResponseOTP
                  type: object
                  description: >
                    The object sent in a `PUT /consentRequests/{ID}` request.


                    Schema used in the request consent phase of the account
                    linking OTP/SMS flow.
                  properties: &ref_112
                    scopes:
                      type: array
                      minLength: 1
                      maxLength: 256
                      items:
                        title: Scope
                        type: object
                        description: >-
                          The Scope element contains an identifier defining, in
                          the terms of a DFSP, an account on which access types
                          can be requested or granted. It also defines the
                          access types which are requested or granted.

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                        properties: *ref_46
                        required: *ref_47
                    authChannels:
                      type: array
                      minLength: 1
                      maxLength: 1
                      items:
                        title: ConsentRequestChannelTypeOTP
                        type: string
                        enum: &ref_111
                          - OTP
                        description: >
                          The OTP auth channel being used for `PUT
                          /consentRequests/{ID}` request.
                    callbackUri:
                      title: Uri
                      type: string
                      pattern: >-
                        ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
                      minLength: 1
                      maxLength: 512
                      description: >
                        The API data type Uri is a JSON string in a canonical
                        format that is restricted by a regular expression for
                        interoperability reasons.
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_113
                    - scopes
                    - authChannels
                  additionalProperties: false
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    patch:
      tags:
        - consentRequests
        - sampled
      operationId: PatchConsentRequest
      summary: PatchConsentRequest
      description: >
        After the user completes an out-of-band authorization with the DFSP, the
        PISP will receive a token which they can use to prove to the DFSP that
        the user trusts this PISP.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ConsentRequestsIDPatchRequest
              type: object
              description: >-
                Used by: PISP

                After the user completes an out-of-band authorization with the
                DFSP, the PISP will receive a token which they can use to prove
                to the DFSP that the user trusts this PISP.

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31222-patch-consentrequestsid
              properties: &ref_114
                authToken:
                  type: string
                  pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                  description: >-
                    The API data type BinaryString is a JSON String. The string
                    is a base64url  encoding of a string of raw bytes, where
                    padding (character ‘=’) is added at the end of the data if
                    needed to ensure that the string is a multiple of 4
                    characters. The length restriction indicates the allowed
                    number of characters.
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_115
                - authToken
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/consentRequests/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - consentRequests
      operationId: NotifyErrorConsentRequests
      summary: NotifyErrorConsentRequests
      description: >
        DFSP responds to the PISP if something went wrong with validating an OTP
        or secret.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  /consents:
    parameters:
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      tags:
        - consents
        - sampled
      operationId: PostConsents
      summary: PostConsents
      description: >
        The **POST /consents** request is used to request the creation of a
        consent for interactions between a PISP and the DFSP who owns the
        account which a PISP’s customer wants to allow the PISP access to.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentPostRequestAUTH
                  type: object
                  description: >
                    The object sent in a `POST /consents` request to the
                    Auth-Service

                    by a DFSP to store registered Consent and credential
                  properties: &ref_117
                    consentId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        Common ID between the PISP and FSP for the Consent
                        object

                        determined by the DFSP who creates the Consent.
                    consentRequestId:
                      title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    scopes:
                      minLength: 1
                      maxLength: 256
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: >-
                          The Scope element contains an identifier defining, in
                          the terms of a DFSP, an account on which access types
                          can be requested or granted. It also defines the
                          access types which are requested or granted.

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                        properties: *ref_46
                        required: *ref_47
                    credential:
                      allOf:
                        - title: SignedCredential
                          type: object
                          description: >
                            A credential used to allow a user to prove their
                            identity and access

                            to an account with a DFSP.


                            SignedCredential is a special formatting of the
                            credential to allow us to be

                            more explicit about the `status` field - it should
                            only ever be PENDING when

                            updating a credential.
                          properties: &ref_52
                            credentialType:
                              title: CredentialType
                              type: string
                              enum: &ref_54
                                - FIDO
                                - GENERIC
                              description: >-
                                The type of the Credential. - "FIDO" - The
                                credential is based on a FIDO challenge. Its
                                payload is a FIDOPublicKeyCredentialAttestation
                                object. - "GENERIC" - The credential is based on
                                a simple public key validation. Its payload is a
                                GenericCredential object.

                                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3226-credentialtype
                            status:
                              title: CredentialStatusPending
                              type: string
                              enum: &ref_116
                                - PENDING
                              description: >
                                The status of the Credential.

                                - "PENDING" - The credential has been created,
                                but has not been verified
                            genericPayload:
                              title: GenericCredential
                              type: object
                              description: >
                                A publicKey + signature of a challenge for a
                                generic public/private keypair.
                              properties: &ref_56
                                publicKey:
                                  type: string
                                  pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                                  description: >-
                                    The API data type BinaryString is a JSON
                                    String. The string is a base64url  encoding
                                    of a string of raw bytes, where padding
                                    (character ‘=’) is added at the end of the
                                    data if needed to ensure that the string is
                                    a multiple of 4 characters. The length
                                    restriction indicates the allowed number of
                                    characters.
                                signature:
                                  type: string
                                  pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                                  description: >-
                                    The API data type BinaryString is a JSON
                                    String. The string is a base64url  encoding
                                    of a string of raw bytes, where padding
                                    (character ‘=’) is added at the end of the
                                    data if needed to ensure that the string is
                                    a multiple of 4 characters. The length
                                    restriction indicates the allowed number of
                                    characters.
                              required: &ref_57
                                - publicKey
                                - signature
                              additionalProperties: false
                            fidoPayload:
                              title: FIDOPublicKeyCredentialAttestation
                              type: object
                              description: >
                                A data model representing a FIDO Attestation
                                result. Derived from 

                                [`PublicKeyCredential`
                                Interface](https://w3c.github.io/webauthn/#iface-pkcredential).


                                The `PublicKeyCredential` interface represents
                                the below fields with

                                a Type of Javascript
                                [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).

                                For this API, we represent ArrayBuffers as
                                base64 encoded utf-8 strings.
                              properties: &ref_58
                                id:
                                  type: string
                                  description: >
                                    credential id: identifier of pair of keys,
                                    base64 encoded

                                    https://w3c.github.io/webauthn/#ref-for-dom-credential-id
                                  minLength: 59
                                  maxLength: 118
                                rawId:
                                  type: string
                                  description: >
                                    raw credential id: identifier of pair of
                                    keys, base64 encoded
                                  minLength: 59
                                  maxLength: 118
                                response:
                                  type: object
                                  description: |
                                    AuthenticatorAttestationResponse
                                  properties:
                                    clientDataJSON:
                                      type: string
                                      description: |
                                        JSON string with client data
                                      minLength: 121
                                      maxLength: 512
                                    attestationObject:
                                      type: string
                                      description: |
                                        CBOR.encoded attestation object
                                      minLength: 306
                                      maxLength: 2048
                                  required:
                                    - clientDataJSON
                                    - attestationObject
                                  additionalProperties: false
                                type:
                                  type: string
                                  description: >-
                                    response type, we need only the type of
                                    public-key
                                  enum:
                                    - public-key
                              required: &ref_59
                                - id
                                - response
                                - type
                              additionalProperties: false
                          required: &ref_53
                            - credentialType
                            - status
                          additionalProperties: false
                    status:
                      title: ConsentStatus
                      type: string
                      enum: &ref_50
                        - ISSUED
                        - REVOKED
                      description: |-
                        Allowed values for the enumeration ConsentStatus
                        - ISSUED - The consent has been issued by the DFSP
                        - REVOKED - The consent has been revoked
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_118
                    - consentId
                    - scopes
                    - credential
                    - status
                  additionalProperties: false
                - title: ConsentPostRequestPISP
                  type: object
                  description: >
                    The provisional Consent object sent by the DFSP in `POST
                    /consents`.
                  properties: &ref_119
                    consentId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        Common ID between the PISP and the Payer DFSP for the
                        consent object. The ID

                        should be reused for re-sends of the same consent. A new
                        ID should be generated

                        for each new consent.
                    consentRequestId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        The ID given to the original consent request on which
                        this consent is based.
                    scopes:
                      type: array
                      minLength: 1
                      maxLength: 256
                      items:
                        title: Scope
                        type: object
                        description: >-
                          The Scope element contains an identifier defining, in
                          the terms of a DFSP, an account on which access types
                          can be requested or granted. It also defines the
                          access types which are requested or granted.

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                        properties: *ref_46
                        required: *ref_47
                    status:
                      title: ConsentStatus
                      type: string
                      enum: *ref_50
                      description: |-
                        Allowed values for the enumeration ConsentStatus
                        - ISSUED - The consent has been issued by the DFSP
                        - REVOKED - The consent has been revoked
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_120
                    - consentId
                    - consentRequestId
                    - scopes
                    - status
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/consents/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      description: >
        The **GET /consents/**_{ID}_ resource allows a party to enquire after
        the status of a consent. The *{ID}* used in the URI of the request
        should be the consent request ID which was used to identify the consent
        when it was created.
      tags:
        - consents
      operationId: GetConsent
      summary: GetConsent
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    patch:
      description: >
        The HTTP request `PATCH /consents/{ID}` is used


        - In account linking in the Credential Registration phase. Used by a
        DFSP
          to notify a PISP a credential has been verified and registered with an
          Auth service.

        - In account unlinking by a hub hosted auth service and by DFSPs
          in non-hub hosted scenarios to notify participants of a consent being revoked.

          Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.
          Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.
      tags:
        - consents
        - sampled
      operationId: PatchConsentByID
      summary: PatchConsentByID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPatchResponseVerified
                  description: >
                    PATCH /consents/{ID} request object.


                    Sent by the DFSP to the PISP when a consent is issued and
                    verified.

                    Used in the "Register Credential" part of the Account
                    linking flow.
                  type: object
                  properties: &ref_127
                    credential:
                      type: object
                      properties:
                        status:
                          title: CredentialStatusVerified
                          type: string
                          enum: &ref_55
                            - VERIFIED
                          description: |
                            The status of the Credential.
                            - "VERIFIED" - The Credential is valid and verified.
                      required:
                        - status
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_128
                    - credential
                - title: ConsentsIDPatchResponseRevoked
                  description: |
                    PATCH /consents/{ID} request object.

                    Sent to both the PISP and DFSP when a consent is revoked.
                    Used in the "Unlinking" part of the Account Unlinking flow.
                  type: object
                  properties: &ref_130
                    status:
                      title: ConsentStatusRevoked
                      type: string
                      enum: &ref_129
                        - REVOKED
                      description: |-
                        Allowed values for the enumeration ConsentStatus
                        - REVOKED - The consent has been revoked
                    revokedAt:
                      title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_131
                    - status
                    - revokedAt
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth
        Service.


        - Called by a `PISP` to after signing a challenge. Sent to an DFSP for
        verification.

        - Called by a `auth-service` to notify a DFSP that a credential has been
        verified and registered.
      tags:
        - consents
        - sampled
      operationId: PutConsentByID
      summary: PutConsentByID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ConsentsIDPutResponseSigned
                  type: object
                  description: >
                    The HTTP request `PUT /consents/{ID}` is used by the PISP to
                    update a Consent with a signed challenge and register a
                    credential.

                    Called by a `PISP` to after signing a challenge. Sent to a
                    DFSP for verification.
                  properties: &ref_121
                    status:
                      title: ConsentStatusIssued
                      type: string
                      enum: *ref_51
                      description: |-
                        Allowed values for the enumeration ConsentStatus
                        - ISSUED - The consent has been issued by the DFSP
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: >-
                          The Scope element contains an identifier defining, in
                          the terms of a DFSP, an account on which access types
                          can be requested or granted. It also defines the
                          access types which are requested or granted.

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                        properties: *ref_46
                        required: *ref_47
                    credential:
                      title: SignedCredential
                      type: object
                      description: >
                        A credential used to allow a user to prove their
                        identity and access

                        to an account with a DFSP.


                        SignedCredential is a special formatting of the
                        credential to allow us to be

                        more explicit about the `status` field - it should only
                        ever be PENDING when

                        updating a credential.
                      properties: *ref_52
                      required: *ref_53
                      additionalProperties: false
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_122
                    - scopes
                    - credential
                  additionalProperties: false
                - title: ConsentsIDPutResponseVerified
                  type: object
                  description: >
                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or
                    Auth-Service to update a Consent object once it has been
                    Verified.

                    Called by a `auth-service` to notify a DFSP that a
                    credential has been verified and registered.
                  properties: &ref_125
                    status:
                      title: ConsentStatusIssued
                      type: string
                      enum: *ref_51
                      description: |-
                        Allowed values for the enumeration ConsentStatus
                        - ISSUED - The consent has been issued by the DFSP
                    scopes:
                      type: array
                      items:
                        title: Scope
                        type: object
                        description: >-
                          The Scope element contains an identifier defining, in
                          the terms of a DFSP, an account on which access types
                          can be requested or granted. It also defines the
                          access types which are requested or granted.

                          https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
                        properties: *ref_46
                        required: *ref_47
                    credential:
                      title: VerifiedCredential
                      type: object
                      description: >
                        A credential used to allow a user to prove their
                        identity and access

                        to an account with a DFSP.


                        VerifiedCredential is a special formatting of Credential
                        to allow us to be

                        more explicit about the `status` field - it should only
                        ever be VERIFIED when

                        updating a credential.
                      properties: &ref_123
                        credentialType:
                          title: CredentialType
                          type: string
                          enum: *ref_54
                          description: >-
                            The type of the Credential. - "FIDO" - The
                            credential is based on a FIDO challenge. Its payload
                            is a FIDOPublicKeyCredentialAttestation object. -
                            "GENERIC" - The credential is based on a simple
                            public key validation. Its payload is a
                            GenericCredential object.

                            https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3226-credentialtype
                        status:
                          title: CredentialStatusVerified
                          type: string
                          enum: *ref_55
                          description: |
                            The status of the Credential.
                            - "VERIFIED" - The Credential is valid and verified.
                        genericPayload:
                          title: GenericCredential
                          type: object
                          description: >
                            A publicKey + signature of a challenge for a generic
                            public/private keypair.
                          properties: *ref_56
                          required: *ref_57
                          additionalProperties: false
                        fidoPayload:
                          title: FIDOPublicKeyCredentialAttestation
                          type: object
                          description: >
                            A data model representing a FIDO Attestation result.
                            Derived from 

                            [`PublicKeyCredential`
                            Interface](https://w3c.github.io/webauthn/#iface-pkcredential).


                            The `PublicKeyCredential` interface represents the
                            below fields with

                            a Type of Javascript
                            [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).

                            For this API, we represent ArrayBuffers as base64
                            encoded utf-8 strings.
                          properties: *ref_58
                          required: *ref_59
                          additionalProperties: false
                      required: &ref_124
                        - credentialType
                        - status
                      additionalProperties: false
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_126
                    - scopes
                    - credential
                  additionalProperties: false
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      responses:
        '200':
          description: OK
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    delete:
      description: >
        Used by PISP, DFSP


        The **DELETE /consents/**_{ID}_ request is used to request the
        revocation of a previously agreed consent.

        For tracing and auditing purposes, the switch should be sure not to
        delete the consent physically;

        instead, information relating to the consent should be marked as deleted
        and requests relating to the

        consent should not be honoured.
      operationId: DeleteConsentByID
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      tags:
        - consents
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/consents/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - consents
      operationId: NotifyErrorConsents
      summary: NotifyErrorConsents
      description: >
        DFSP responds to the PISP if something went wrong with validating or
        storing consent.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  /participants:
    parameters:
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      description: >-
        The HTTP request `POST /participants` is used to create information in
        the server regarding the provided list of identities. This request
        should be used for bulk creation of FSP information for more than one
        Party. The optional currency parameter should indicate that each
        provided Party supports the currency.
      summary: Create bulk participant information
      tags:
        - participants
      operationId: Participants1
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Participant information to be created.
        required: true
        content:
          application/json:
            schema:
              title: ParticipantsPostRequest
              type: object
              description: The object sent in the POST /participants request.
              properties: *ref_60
              required: *ref_61
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/participants/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      description: >-
        The callback `PUT /participants/{ID}` is used to inform the client of
        the result of the creation of the provided list of identities.
      summary: Return bulk participant information
      tags:
        - participants
        - sampled
      operationId: PutParticipantsByID
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Participant information returned.
        required: true
        content:
          application/json:
            schema:
              title: ParticipantsIDPutResponse
              type: object
              description: 'The object sent in the PUT /participants/{ID} callback.'
              properties: *ref_62
              required: *ref_63
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/participants/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      description: >-
        If there is an error during FSP information creation in the server, the
        error callback `PUT /participants/{ID}/error` is used. The `{ID}` in the
        URI should contain the requestId that was used for the creation of the
        participant information.
      summary: Return bulk participant information error
      tags:
        - participants
        - sampled
      operationId: PutParticipantsByIDAndError
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/participants/{Type}/{ID}':
    parameters:
      - name: Type
        in: path
        required: true
        schema: &ref_64
          type: string
        description: >-
          The type of the party identifier. For example, `MSISDN`,
          `PERSONAL_ID`.
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      description: >-
        The HTTP request `POST /participants/{Type}/{ID}` (or `POST
        /participants/{Type}/{ID}/{SubId}`) is used to create information in the
        server regarding the provided identity, defined by `{Type}`, `{ID}`, and
        optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789`
        or `POST /participants/BUSINESS/shoecompany/employee1`). An
        ExtensionList element has been added to this reqeust in version v1.1
      summary: Create participant information
      tags:
        - participants
      operationId: ParticipantsByIDAndType
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Participant information to be created.
        required: true
        content:
          application/json:
            schema:
              title: ParticipantsTypeIDSubIDPostRequest
              type: object
              description: >-
                The object sent in the POST /participants/{Type}/{ID}/{SubId}
                and /participants/{Type}/{ID} requests. An additional optional
                ExtensionList element has been added as part of v1.1 changes.
              properties: &ref_133
                fspId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
                currency:
                  title: Currency
                  description: >-
                    The currency codes defined in [ISO
                    4217](https://www.iso.org/iso-4217-currency-codes.html) as
                    three-letter alphabetic codes are used as the standard
                    naming representation for currencies.
                  type: string
                  minLength: 3
                  maxLength: 3
                  enum: *ref_4
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_134
                - fspId
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    get:
      description: >-
        The HTTP request `GET /participants/{Type}/{ID}` (or `GET
        /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the
        requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`,
        is located (for example, `GET /participants/MSISDN/123456789`, or `GET
        /participants/BUSINESS/shoecompany/employee1`). This HTTP request should
        support a query string for filtering of currency. To use filtering of
        currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ`
        should be used, where `XYZ` is the requested currency.
      summary: Look up participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      description: >-
        The callback `PUT /participants/{Type}/{ID}` (or `PUT
        /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a
        successful result of the lookup, creation, or deletion of the FSP
        information related to the Party. If the FSP information is deleted, the
        fspId element should be empty; otherwise the element should include the
        FSP information for the Party.
      summary: Return participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID3
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Participant information returned.
        required: true
        content:
          application/json:
            schema:
              title: ParticipantsTypeIDPutResponse
              type: object
              description: >-
                The object sent in the PUT /participants/{Type}/{ID}/{SubId} and
                /participants/{Type}/{ID} callbacks.
              properties: &ref_132
                fspId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    delete:
      description: >-
        The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE
        /participants/{Type}/{ID}/{SubId}`) is used to delete information in the
        server regarding the provided identity, defined by `{Type}` and `{ID}`)
        (for example, `DELETE /participants/MSISDN/123456789`), and optionally
        `{SubId}`. This HTTP request should support a query string to delete FSP
        information regarding a specific currency only. To delete a specific
        currency only, the HTTP request `DELETE
        /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is
        the requested currency.


        **Note:** The Account Lookup System should verify that it is the Party’s
        current FSP that is deleting the FSP information.
      summary: Delete participant information
      tags:
        - participants
      operationId: ParticipantsByTypeAndID2
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/participants/{Type}/{ID}/error':
    parameters:
      - name: Type
        in: path
        required: true
        schema: *ref_64
        description: >-
          The type of the party identifier. For example, `MSISDN`,
          `PERSONAL_ID`.
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      description: >-
        If the server is unable to find, create or delete the associated FSP of
        the provided identity, or another processing error occurred, the error
        callback `PUT /participants/{Type}/{ID}/error` (or `PUT
        /participants/{Type}/{ID}/{SubId}/error`) is used.
      summary: Return participant information error
      tags:
        - participants
      operationId: ParticipantsErrorByTypeAndID
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/services/{ServiceType}':
    parameters:
      - name: ServiceType
        in: path
        required: true
        schema: &ref_65
          type: string
        description: 'The type of the service identifier. For example, `THIRD_PARTY_DFSP`'
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      operationId: GetServicesByServiceType
      summary: GetServicesByServiceType
      description: >
        The HTTP request `GET /services/{ServiceType}` is used to retrieve the
        list of participants

        that support a specified service.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      tags:
        - services
        - sampled
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      description: >
        The HTTP request `PUT /services/{ServiceType}` is used to return list of
        participants

        that support a specified service.
      operationId: PutServicesByServiceType
      summary: PutServicesByServiceType
      tags:
        - services
        - sampled
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ServicesServiceTypePutResponse
              type: object
              description: >-
                Used by: Switch

                The callback PUT /services/{ServiceType} is used to inform the
                client of a successful result of the service information lookup.

                Callback and data model information for GET
                /services/{ServiceType}:

                Callback - PUT /services/{ServiceType} Error Callback - PUT
                /services/{ServiceType}/error Data Model - Empty body

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31531-put-servicesservicetype
              properties: &ref_135
                providers:
                  type: array
                  minLength: 0
                  maxLength: 256
                  items:
                    title: FspId
                    type: string
                    minLength: 1
                    maxLength: 32
                    description: FSP identifier.
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_136
                - providers
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/services/{ServiceType}/error':
    parameters:
      - name: ServiceType
        in: path
        required: true
        schema: *ref_65
        description: 'The type of the service identifier. For example, `THIRD_PARTY_DFSP`'
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      description: >
        The HTTP request `PUT /services/{ServiceType}/error` is used to return
        error information
      operationId: PutServicesByServiceTypeAndError
      summary: PutServicesByServiceTypeAndError
      tags:
        - services
        - sampled
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Details of the error returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  /thirdpartyRequests/transactions:
    parameters:
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      operationId: ThirdpartyRequestsTransactionsPost
      summary: ThirdpartyRequestsTransactionsPost
      description: >-
        The HTTP request POST `/thirdpartyRequests/transactions` is used by a
        PISP to initiate a 3rd party Transaction request with a DFSP
      tags:
        - thirdpartyRequests
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsPostRequest
              type: object
              description: >-
                Used by: PISP

                The HTTP request POST /thirdpartyRequests/transactions is used
                to request the creation of a transaction request on the server
                for the transfer described in the request.

                Callback and data model information for POST
                /thirdpartyRequests/transactions:

                Callback - PUT /thirdpartyRequests/transactions/{ID} Error
                Callback - PUT /thirdpartyRequests/transactions/{ID}/error Data
                Model - See link below

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31712-post-thirdpartyrequeststransactions
              properties: &ref_137
                transactionRequestId:
                  allOf:
                    - title: CorrelationId
                      type: string
                      pattern: >-
                        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                      description: >-
                        Identifier that correlates all messages of the same
                        sequence. The API data type UUID (Universally Unique
                        Identifier) is a JSON String in canonical format,
                        conforming to [RFC
                        4122](https://tools.ietf.org/html/rfc4122), that is
                        restricted by a regular expression for interoperability
                        reasons. A UUID is always 36 characters long, 32
                        hexadecimal symbols and 4 dashes (‘-‘).
                      example: b51ec534-ee48-4575-b6a9-ead2955b8069
                  description: >
                    Common ID between the PISP and the Payer DFSP for the
                    transaction request object. The ID should be reused for
                    resends of the same transaction request. A new ID should be
                    generated for each new transaction request.
                payee:
                  allOf:
                    - title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: *ref_9
                      required: *ref_10
                  description: >-
                    Information about the Payee in the proposed financial
                    transaction.
                payer:
                  allOf:
                    - title: PartyIdInfo
                      type: object
                      description: Data model for the complex type PartyIdInfo.
                      properties: *ref_2
                      required: *ref_3
                  description: >-
                    Information about the Payer in the proposed financial
                    transaction.
                amountType:
                  allOf:
                    - title: AmountType
                      type: string
                      enum: *ref_66
                      description: >-
                        Below are the allowed values for the enumeration
                        AmountType.

                        - SEND - Amount the Payer would like to send, that is,
                        the amount that should be withdrawn from the Payer
                        account including any fees.

                        - RECEIVE - Amount the Payer would like the Payee to
                        receive, that is, the amount that should be sent to the
                        receiver exclusive of any fees.
                      example: RECEIVE
                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
                amount:
                  allOf:
                    - title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                  description: Requested amount to be transferred from the Payer to Payee.
                transactionType:
                  allOf:
                    - title: TransactionType
                      type: object
                      description: Data model for the complex type TransactionType.
                      properties: *ref_67
                      required: *ref_68
                  description: Type of transaction.
                note:
                  type: string
                  minLength: 1
                  maxLength: 256
                  description: A memo that will be attached to the transaction.
                expiration:
                  type: string
                  description: >
                    Date and time until when the transaction request is valid.
                    It can be set to get a quick failure in case the peer FSP
                    takes too long to respond.
                  example: '2016-05-24T08:38:08.699-04:00'
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_138
                - transactionRequestId
                - payee
                - payer
                - amountType
                - amount
                - transactionType
                - expiration
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/thirdpartyRequests/transactions/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: GetThirdpartyTransactionRequests
      summary: GetThirdpartyTransactionRequests
      description: >
        The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to
        request the

        retrieval of a third party transaction request.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: UpdateThirdPartyTransactionRequests
      summary: UpdateThirdPartyTransactionRequests
      description: >
        The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by
        the DFSP to inform the client about

        the status of a previously requested thirdparty transaction request.


        Switch(Thirdparty API Adapter) -> PISP
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDPutResponse
              type: object
              description: >-
                Used by: DFSP

                After a PISP requests the creation of a Third Party Transaction
                request (POST /thirdpartyRequests/transactions) or the status of
                a previously created Third Party Transaction request (GET
                /thirdpartyRequests/transactions/{ID}), the DFSP will send this
                callback.

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31721-put-thirdpartyrequeststransactionsid
              properties: &ref_139
                transactionRequestState:
                  title: TransactionRequestState
                  type: string
                  enum: *ref_69
                  description: >-
                    Below are the allowed values for the enumeration.

                    - RECEIVED - Payer FSP has received the transaction from the
                    Payee FSP.

                    - PENDING - Payer FSP has sent the transaction request to
                    the Payer.

                    - ACCEPTED - Payer has approved the transaction.

                    - REJECTED - Payer has rejected the transaction.
                  example: RECEIVED
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_140
                - transactionRequestState
            example:
              transactionRequestState: RECEIVED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    patch:
      operationId: NotifyThirdpartyTransactionRequests
      summary: NotifyThirdpartyTransactionRequests
      description: >
        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used
        to

        notify a thirdparty of the outcome of a transaction request.


        Switch(Thirdparty API Adapter) -> PISP
      tags:
        - thirdpartyRequests
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionsIDPatchResponse
              type: object
              description: >-
                Used by: DFSP

                The issuing PISP will expect a response to their request for a
                transfer which describes the finalized state of the requested
                transfer.

                This response will be given by a PATCH call on the
                /thirdpartyRequests/transactions/{ID} resource.

                The {ID} given in the query string should be the
                transactionRequestId which was originally used by the PISP to
                identify the transaction request.

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
              properties: *ref_70
              required: *ref_71
            example:
              transactionRequestState: ACCEPTED
              transactionState: COMMITTED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/thirdpartyRequests/transactions/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: ThirdpartyTransactionRequestsError
      summary: ThirdpartyTransactionRequestsError
      description: >
        If the server is unable to find the transaction request, or another
        processing error occurs,

        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is
        used.

        The `{ID}` in the URI should contain the `transactionRequestId` that was
        used for the creation of

        the thirdparty transaction request.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  /thirdpartyRequests/authorizations:
    parameters:
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      description: >
        The HTTP request **POST /thirdpartyRequests/authorizations** is used to
        request the validation by a customer for the transfer described in the
        request.
      operationId: PostThirdpartyRequestsAuthorizations
      summary: PostThirdpartyRequestsAuthorizations
      tags:
        - authorizations
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsAuthorizationsPostRequest
              description: >-
                Used by: DFSP

                The HTTP request POST /thirdpartyRequests/authorizations is used
                to request the validation by a customer for the transfer
                described in the request.

                Callback and data model information for POST
                /thirdpartyRequests/authorizations:

                Callback - PUT /thirdpartyRequests/authorizations/{ID} Error
                Callback - PUT /thirdpartyRequests/authorizations/{ID}/error
                Data Model - See below url

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
              type: object
              properties: &ref_141
                authorizationRequestId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transactionRequestId:
                  title: CorrelationId
                  type: string
                  pattern: >-
                    ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                  description: >-
                    Identifier that correlates all messages of the same
                    sequence. The API data type UUID (Universally Unique
                    Identifier) is a JSON String in canonical format, conforming
                    to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is
                    restricted by a regular expression for interoperability
                    reasons. A UUID is always 36 characters long, 32 hexadecimal
                    symbols and 4 dashes (‘-‘).
                  example: b51ec534-ee48-4575-b6a9-ead2955b8069
                challenge:
                  type: string
                  description: The challenge that the PISP's client is to sign
                transferAmount:
                  allOf:
                    - title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                  description: >-
                    The amount that will be debited from the sending customer's
                    account as a consequence of the transaction.
                payeeReceiveAmount:
                  allOf:
                    - title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                  description: >-
                    The amount that will be credited to the receiving customer's
                    account as a consequence of the transaction.
                fees:
                  allOf:
                    - title: Money
                      type: object
                      description: Data model for the complex type Money.
                      properties: *ref_5
                      required: *ref_6
                  description: >-
                    The amount of fees that the paying customer will be charged
                    as part of the transaction.
                payer:
                  allOf:
                    - title: PartyIdInfo
                      type: object
                      description: Data model for the complex type PartyIdInfo.
                      properties: *ref_2
                      required: *ref_3
                  description: >-
                    Information about the Payer type, id, sub-type/id, FSP Id in
                    the proposed financial transaction.
                payee:
                  allOf:
                    - title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties: *ref_9
                      required: *ref_10
                  description: >-
                    Information about the Payee in the proposed financial
                    transaction.
                transactionType:
                  title: TransactionType
                  type: object
                  description: Data model for the complex type TransactionType.
                  properties: *ref_67
                  required: *ref_68
                expiration:
                  allOf:
                    - title: DateTime
                      type: string
                      pattern: >-
                        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
                      description: >-
                        The API data type DateTime is a JSON String in a lexical
                        format that is restricted by a regular expression for
                        interoperability reasons. The format is according to
                        [ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                        expressed in a combined date, time and time zone format.
                        A more readable version of the format is
                        yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
                        "2016-05-24T08:38:08.699-04:00",
                        "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time
                        zone, same as UTC).
                      example: '2016-05-24T08:38:08.699-04:00'
                  description: >-
                    The time by which the transfer must be completed, set by the
                    payee DFSP.
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_142
                - authorizationRequestId
                - transactionRequestId
                - challenge
                - transferAmount
                - payeeReceiveAmount
                - fees
                - payer
                - payee
                - transactionType
                - expiration
              additionalProperties: false
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/thirdpartyRequests/authorizations/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      description: >
        The HTTP request **GET /thirdpartyRequests/authorizations/**_{ID}_ is
        used to get information relating

        to a previously issued authorization request. The *{ID}* in the request
        should match the

        `authorizationRequestId` which was given when the authorization request
        was created.
      operationId: GetThirdpartyRequestsAuthorizationsById
      summary: GetThirdpartyRequestsAuthorizationsById
      tags:
        - authorizations
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      description: >
        After receiving the **POST /thirdpartyRequests/authorizations**, the
        PISP will present the details of the

        transaction to their user, and request that the client sign the
        `challenge` field using the credential

        they previously registered.


        The signed challenge will be sent back by the PISP in **PUT
        /thirdpartyRequests/authorizations/**_{ID}_:
      operationId: PutThirdpartyRequestsAuthorizationsById
      summary: PutThirdpartyRequestsAuthorizationsById
      tags:
        - authorizations
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Signed authorization object
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ThirdpartyRequestsAuthorizationsIDPutResponseRejected
                  type: object
                  description: >-
                    The object sent in the PUT
                    /thirdpartyRequests/authorizations/{ID} callback.
                  properties: &ref_144
                    responseType:
                      title: AuthorizationResponseTypeRejected
                      description: |
                        The customer rejected the terms of the transfer.
                      type: string
                      enum: &ref_143
                        - REJECTED
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_145
                    - responseType
                - title: ThirdpartyRequestsAuthorizationsIDPutResponseFIDO
                  type: object
                  description: >-
                    The object sent in the PUT
                    /thirdpartyRequests/authorizations/{ID} callback.
                  properties: &ref_148
                    responseType:
                      title: AuthorizationResponseType
                      description: |
                        The customer accepted the terms of the transfer
                      type: string
                      enum: &ref_72
                        - ACCEPTED
                    signedPayload:
                      title: SignedPayloadFIDO
                      type: object
                      properties: &ref_146
                        signedPayloadType:
                          title: SignedPayloadTypeFIDO
                          type: string
                          enum: &ref_73
                            - FIDO
                          description: >-
                            Describes a challenge that has been signed with FIDO
                            Attestation flows
                        fidoSignedPayload:
                          title: FIDOPublicKeyCredentialAssertion
                          type: object
                          description: >
                            A data model representing a FIDO Assertion result.

                            Derived from PublicKeyCredential Interface in
                            WebAuthN.


                            The PublicKeyCredential interface represents the
                            below fields with a Type of

                            Javascript ArrayBuffer.

                            For this API, we represent ArrayBuffers as base64
                            encoded utf-8 strings.


                            https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
                          properties: &ref_74
                            id:
                              type: string
                              description: >
                                credential id: identifier of pair of keys,
                                base64 encoded

                                https://w3c.github.io/webauthn/#ref-for-dom-credential-id
                              minLength: 59
                              maxLength: 118
                            rawId:
                              type: string
                              description: >
                                raw credential id: identifier of pair of keys,
                                base64 encoded.
                              minLength: 59
                              maxLength: 118
                            response:
                              type: object
                              description: |
                                AuthenticatorAssertionResponse
                              properties:
                                authenticatorData:
                                  type: string
                                  description: |
                                    Authenticator data object.
                                  minLength: 49
                                  maxLength: 256
                                clientDataJSON:
                                  type: string
                                  description: |
                                    JSON string with client data.
                                  minLength: 121
                                  maxLength: 512
                                signature:
                                  type: string
                                  description: >
                                    The signature generated by the private key
                                    associated with this credential.
                                  minLength: 59
                                  maxLength: 256
                                userHandle:
                                  type: string
                                  description: >
                                    This field is optionally provided by the
                                    authenticator, and

                                    represents the user.id that was supplied
                                    during registration.
                                  minLength: 1
                                  maxLength: 88
                              required:
                                - authenticatorData
                                - clientDataJSON
                                - signature
                              additionalProperties: false
                            type:
                              type: string
                              description: >-
                                response type, we need only the type of
                                public-key
                              enum:
                                - public-key
                          required: &ref_75
                            - id
                            - rawId
                            - response
                            - type
                          additionalProperties: false
                      required: &ref_147
                        - signedPayloadType
                        - fidoSignedPayload
                      additionalProperties: false
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_149
                    - responseType
                    - signedPayload
                  additionalProperties: false
                - title: ThirdpartyRequestsAuthorizationsIDPutResponseGeneric
                  type: object
                  description: >-
                    The object sent in the PUT
                    /thirdpartyRequests/authorizations/{ID} callback.
                  properties: &ref_152
                    responseType:
                      title: AuthorizationResponseType
                      description: |
                        The customer accepted the terms of the transfer
                      type: string
                      enum: *ref_72
                    signedPayload:
                      title: SignedPayloadGeneric
                      type: object
                      properties: &ref_150
                        signedPayloadType:
                          title: SignedPayloadTypeGeneric
                          type: string
                          enum: &ref_76
                            - GENERIC
                          description: >-
                            Describes a challenge that has been signed with a
                            private key
                        genericSignedPayload:
                          type: string
                          pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                          description: >-
                            The API data type BinaryString is a JSON String. The
                            string is a base64url  encoding of a string of raw
                            bytes, where padding (character ‘=’) is added at the
                            end of the data if needed to ensure that the string
                            is a multiple of 4 characters. The length
                            restriction indicates the allowed number of
                            characters.
                      required: &ref_151
                        - signedPayloadType
                        - genericSignedPayload
                      additionalProperties: false
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_153
                    - responseType
                    - signedPayload
                  additionalProperties: false
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/thirdpartyRequests/authorizations/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsAuthorizationsByIdAndError
      summary: PutThirdpartyRequestsAuthorizationsByIdAndError
      description: >
        The HTTP request `PUT /thirdpartyRequests/authorizations/{ID}/error` is
        used by the DFSP or PISP to inform

        the other party that something went wrong with a Thirdparty Transaction
        Authorization Request.


        The PISP may use this to tell the DFSP that the Thirdparty Transaction
        Authorization Request is invalid or doesn't

        match a `transactionRequestId`.


        The DFSP may use this to tell the PISP that the signed challenge
        returned in `PUT /thirdpartyRequest/authorizations/{ID}`

        was invalid.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  /thirdpartyRequests/verifications:
    parameters:
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PostThirdpartyRequestsVerifications
      summary: PostThirdpartyRequestsVerifications
      description: >
        The HTTP request `POST /thirdpartyRequests/verifications` is used by the
        DFSP to verify a third party authorization.
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: ThirdpartyRequestsVerificationsPostRequestFIDO
                  type: object
                  description: >-
                    The object sent in the POST
                    /thirdpartyRequests/verifications request.
                  properties: &ref_154
                    verificationRequestId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    challenge:
                      type: string
                      description: >-
                        Base64 encoded bytes - The challenge generated by the
                        DFSP.
                    consentId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        The id of the stored consent object that contains the
                        credential with which to verify

                        the signed challenge against.
                    signedPayloadType:
                      title: SignedPayloadTypeFIDO
                      type: string
                      enum: *ref_73
                      description: >-
                        Describes a challenge that has been signed with FIDO
                        Attestation flows
                    fidoSignedPayload:
                      title: FIDOPublicKeyCredentialAssertion
                      type: object
                      description: >
                        A data model representing a FIDO Assertion result.

                        Derived from PublicKeyCredential Interface in WebAuthN.


                        The PublicKeyCredential interface represents the below
                        fields with a Type of

                        Javascript ArrayBuffer.

                        For this API, we represent ArrayBuffers as base64
                        encoded utf-8 strings.


                        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
                      properties: *ref_74
                      required: *ref_75
                      additionalProperties: false
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_155
                    - verificationRequestId
                    - challenge
                    - consentId
                    - signedPayloadType
                    - fidoSignedPayload
                - title: ThirdpartyRequestsVerificationsPostRequestGeneric
                  type: object
                  description: >-
                    The object sent in the POST
                    /thirdpartyRequests/verifications request.
                  properties: &ref_156
                    verificationRequestId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                    challenge:
                      type: string
                      description: >-
                        Base64 encoded bytes - The challenge generated by the
                        DFSP.
                    consentId:
                      allOf:
                        - title: CorrelationId
                          type: string
                          pattern: >-
                            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
                          description: >-
                            Identifier that correlates all messages of the same
                            sequence. The API data type UUID (Universally Unique
                            Identifier) is a JSON String in canonical format,
                            conforming to [RFC
                            4122](https://tools.ietf.org/html/rfc4122), that is
                            restricted by a regular expression for
                            interoperability reasons. A UUID is always 36
                            characters long, 32 hexadecimal symbols and 4 dashes
                            (‘-‘).
                          example: b51ec534-ee48-4575-b6a9-ead2955b8069
                      description: >
                        The id of the stored consent object that contains the
                        credential with which to verify

                        the signed challenge against.
                    signedPayloadType:
                      title: SignedPayloadTypeGeneric
                      type: string
                      enum: *ref_76
                      description: >-
                        Describes a challenge that has been signed with a
                        private key
                    genericSignedPayload:
                      type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      description: >-
                        The API data type BinaryString is a JSON String. The
                        string is a base64url  encoding of a string of raw
                        bytes, where padding (character ‘=’) is added at the end
                        of the data if needed to ensure that the string is a
                        multiple of 4 characters. The length restriction
                        indicates the allowed number of characters.
                    extensionList:
                      title: ExtensionList
                      type: object
                      description: >-
                        Data model for the complex type ExtensionList. An
                        optional list of extensions, specific to deployment.
                      properties: *ref_0
                      required: *ref_1
                  required: &ref_157
                    - verificationRequestId
                    - challenge
                    - consentId
                    - signedPayloadType
                    - genericSignedPayload
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/thirdpartyRequests/verifications/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    get:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: GetThirdpartyRequestsVerificationsById
      summary: GetThirdpartyRequestsVerificationsById
      description: >
        The HTTP request `/thirdpartyRequests/verifications/{ID}` is used to get

        information regarding a previously created or requested authorization.
        The *{ID}*

        in the URI should contain the verification request ID
      parameters:
        - name: Accept
          in: header
          required: true
          schema: *ref_45
          description: >-
            The `Accept` header field indicates the version of the API the
            client would like the server to use.
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsById
      summary: PutThirdpartyRequestsVerificationsById
      description: >-
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}` is used by
        the Auth-Service to inform the DFSP of a successful result in validating
        the verification of a Thirdparty Transaction Request.

        If the validation fails, the auth-service will send back `PUT
        /thirdpartyRequests/verifications/{ID}` with `authenticationResponse:
        'REJECTED'`.

        In unplanned error cases the Auth-Service MUST use `PUT
        /thirdpartyRequests/verifications/{ID}/error`.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: The result of validating the Thirdparty Transaction Request
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsVerificationsIDPutResponse
              type: object
              description: >-
                Used by: Auth Service

                The callback PUT /thirdpartyRequests/verifications/{ID} is used
                to inform the client of the result of an authorization check.
                The {ID} in the URI should contain the authorizationRequestId
                which was used to request the check, or the {ID} that was used
                in the GET /thirdpartyRequests/verifications/{ID}.

                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31821-put-thirdpartyrequestsverificationsid
              properties: &ref_159
                authenticationResponse:
                  title: AuthenticationResponse
                  type: string
                  enum: &ref_158
                    - VERIFIED
                  description: >-
                    The AuthenticationResponse enumeration describes the result
                    of authenticating verification request.

                    Below are the allowed values for the enumeration
                    AuthenticationResponse. - VERIFIED - The challenge was
                    correctly signed.
                extensionList:
                  title: ExtensionList
                  type: object
                  description: >-
                    Data model for the complex type ExtensionList. An optional
                    list of extensions, specific to deployment.
                  properties: *ref_0
                  required: *ref_1
              required: &ref_160
                - authenticationResponse
            example:
              authenticationResponse: VERIFIED
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
  '/thirdpartyRequests/verifications/{ID}/error':
    parameters:
      - name: ID
        in: path
        required: true
        schema: *ref_34
        description: The identifier value.
      - name: Content-Type
        in: header
        schema: *ref_35
        required: true
        description: >-
          The `Content-Type` header indicates the specific version of the API
          used to send the payload body.
      - name: Date
        in: header
        schema: *ref_36
        required: true
        description: The `Date` header field indicates the date when the request was sent.
      - name: X-Forwarded-For
        in: header
        schema: *ref_37
        required: false
        description: >-
          The `X-Forwarded-For` header field is an unofficially accepted
          standard used for informational purposes of the originating client IP
          address, as a request might pass multiple proxies, firewalls, and so
          on. Multiple `X-Forwarded-For` values should be expected and supported
          by implementers of the API.


          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
          7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
          7239 is less-used and supported than `X-Forwarded-For`.
      - name: FSPIOP-Source
        in: header
        schema: *ref_38
        required: true
        description: >-
          The `FSPIOP-Source` header field is a non-HTTP standard field used by
          the API for identifying the sender of the HTTP request. The field
          should be set by the original sender of the request. Required for
          routing and signature verification (see header field
          `FSPIOP-Signature`).
      - name: FSPIOP-Destination
        in: header
        schema: *ref_39
        required: false
        description: >-
          The `FSPIOP-Destination` header field is a non-HTTP standard field
          used by the API for HTTP header based routing of requests and
          responses to the destination. The field must be set by the original
          sender of the request if the destination is known (valid for all
          services except GET /parties) so that any entities between the client
          and the server do not need to parse the payload for routing purposes.
          If the destination is not known (valid for service GET /parties), the
          field should be left empty.
      - name: FSPIOP-Encryption
        in: header
        schema: *ref_40
        required: false
        description: >-
          The `FSPIOP-Encryption` header field is a non-HTTP standard field used
          by the API for applying end-to-end encryption of the request.
      - name: FSPIOP-Signature
        in: header
        schema: *ref_41
        required: false
        description: >-
          The `FSPIOP-Signature` header field is a non-HTTP standard field used
          by the API for applying an end-to-end request signature.
      - name: FSPIOP-URI
        in: header
        schema: *ref_42
        required: false
        description: >-
          The `FSPIOP-URI` header field is a non-HTTP standard field used by the
          API for signature verification, should contain the service URI.
          Required if signature verification is used, for more information, see
          [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      - name: FSPIOP-HTTP-Method
        in: header
        schema: *ref_43
        required: false
        description: >-
          The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field
          used by the API for signature verification, should contain the service
          HTTP method. Required if signature verification is used, for more
          information, see [the API Signature
          document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: PutThirdpartyRequestsVerificationsByIdAndError
      summary: PutThirdpartyRequestsVerificationsByIdAndError
      description: >
        The HTTP request `PUT /thirdpartyRequests/verifications/{ID}/error` is
        used by the Auth-Service to inform

        the DFSP of a failure in validating or looking up the verification of a
        Thirdparty Transaction Request.
      parameters:
        - name: Content-Length
          in: header
          required: false
          schema: *ref_44
          description: >-
            The `Content-Length` header field indicates the anticipated size of
            the payload body. Only sent if there is a body.


            **Note:** The API supports a maximum size of 5242880 bytes (5
            Megabytes).
      requestBody:
        description: Error information returned.
        required: true
        content:
          application/json:
            schema:
              title: ErrorInformationObject
              type: object
              description: >-
                Data model for the complex type object that contains
                ErrorInformation.
              properties: *ref_48
              required: *ref_49
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content: *ref_18
          headers: *ref_19
        '401':
          description: Unauthorized
          content: *ref_20
          headers: *ref_21
        '403':
          description: Forbidden
          content: *ref_22
          headers: *ref_23
        '404':
          description: Not Found
          content: *ref_24
          headers: *ref_25
        '405':
          description: Method Not Allowed
          content: *ref_26
          headers: *ref_27
        '406':
          description: Not Acceptable
          content: *ref_28
          headers: *ref_29
        '501':
          description: Not Implemented
          content: *ref_30
          headers: *ref_31
        '503':
          description: Service Unavailable
          content: *ref_32
          headers: *ref_33
components:
  schemas:
    PartyIdType:
      title: PartyIdType
      type: string
      enum: *ref_77
      description: >
        Below are the allowed values for the enumeration.

        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory

        Number, that is, the phone number) is used as reference to a
        participant.

        The MSISDN identifier should be in international format according to the

        [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).

        Optionally, the MSISDN may be prefixed by a single plus sign, indicating
        the

        international prefix.

        - EMAIL - An email is used as reference to a

        participant. The format of the email should be according to the
        informational

        [RFC 3696](https://tools.ietf.org/html/rfc3696).

        - PERSONAL_ID - A personal identifier is used as reference to a
        participant.

        Examples of personal identification are passport number, birth
        certificate

        number, and national registration number. The identifier number is added
        in 

        the PartyIdentifier element. The personal identifier type is added in
        the

        PartySubIdOrType element.

        - BUSINESS - A specific Business (for example, an organization or a
        company)

        is used as reference to a participant. The BUSINESS identifier can be in
        any

        format. To make a transaction connected to a specific username or bill
        number

        in a Business, the PartySubIdOrType element should be used.

        - DEVICE - A specific device (for example, a POS or ATM) ID connected to
        a

        specific business or organization is used as reference to a Party.

        For referencing a specific device under a specific business or
        organization,

        use the PartySubIdOrType element.

        - ACCOUNT_ID - A bank account number or FSP account ID should be used as

        reference to a participant. The ACCOUNT_ID identifier can be in any
        format,

        as formats can greatly differ depending on country and FSP.

        - IBAN - A bank account number or FSP account ID is used as reference to
        a

        participant. The IBAN identifier can consist of up to 34 alphanumeric

        characters and should be entered without whitespace.

        - ALIAS An alias is used as reference to a participant. The alias should
        be

        created in the FSP as an alternative reference to an account owner.

        Another example of an alias is a username in the FSP system.

        The ALIAS identifier can be in any format. It is also possible to use
        the

        PartySubIdOrType element for identifying an account under an Alias
        defined

        by the PartyIdentifier.

        - CONSENT - A Consent represents an agreement between a PISP, a Customer
        and

        a DFSP which allows the PISP permission to perform actions on behalf of
        the 

        customer. A Consent has an authoritative source: either the DFSP who
        issued 

        the Consent, or an Auth Service which administers the Consent.

        - THIRD_PARTY_LINK - A Third Party Link represents an agreement between
        a PISP,

        a DFSP, and a specific Customer's account at the DFSP. The content of
        the link 

        is created by the DFSP at the time when it gives permission to the PISP
        for 

        specific access to a given account.
      example: PERSONAL_ID
    PartyIdentifier:
      title: PartyIdentifier
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the Party.
      example: '16135551212'
    PartySubIdOrType:
      title: PartySubIdOrType
      type: string
      minLength: 1
      maxLength: 128
      description: >-
        Either a sub-identifier of a PartyIdentifier, or a sub-type of the
        PartyIdType, normally a PersonalIdentifierType.
    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.
    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.
    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension.
      properties: *ref_78
      required: *ref_79
    ExtensionList:
      title: ExtensionList
      type: object
      description: >-
        Data model for the complex type ExtensionList. An optional list of
        extensions, specific to deployment.
      properties: *ref_0
      required: *ref_1
    PartyIdInfo:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties: *ref_2
      required: *ref_3
    ErrorCode:
      title: ErrorCode
      type: string
      pattern: '^[1-9]\d{3}$'
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represent the specific error.
      example: '5100'
    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.
    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties: *ref_13
      required: *ref_14
    PartyResult:
      title: PartyResult
      type: object
      description: Data model for the complex type PartyResult.
      properties: *ref_7
      required: *ref_8
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum: *ref_4
    ParticipantsIDPutResponse:
      title: ParticipantsIDPutResponse
      type: object
      description: 'The object sent in the PUT /participants/{ID} callback.'
      properties: *ref_62
      required: *ref_63
    MerchantClassificationCode:
      title: MerchantClassificationCode
      type: string
      pattern: '^[\d]{1,4}$'
      description: >-
        A limited set of pre-defined numbers. This list would be a limited set
        of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.
    PartyName:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 128
      description: Name of the Party. Could be a real name or a nickname.
    FirstName:
      title: FirstName
      type: string
      minLength: 1
      maxLength: 128
      pattern: >-
        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
        .,''-]{1,128}$
      description: First name of the Party (Name Type).
      example: Henrik
    MiddleName:
      title: MiddleName
      type: string
      minLength: 1
      maxLength: 128
      pattern: >-
        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
        .,''-]{1,128}$
      description: Middle name of the Party (Name Type).
      example: Johannes
    LastName:
      title: LastName
      type: string
      minLength: 1
      maxLength: 128
      pattern: >-
        ^(?!\s*$)[\p{L}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}
        .,''-]{1,128}$
      description: Last name of the Party (Name Type).
      example: Karlsson
    PartyComplexName:
      title: PartyComplexName
      type: object
      description: Data model for the complex type PartyComplexName.
      properties: *ref_80
    DateOfBirth:
      title: DateofBirth (type Date)
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of Birth of the Party.
      example: '1966-06-16'
    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      description: Data model for the complex type PartyPersonalInfo.
      properties: *ref_81
    Party:
      title: Party
      type: object
      description: Data model for the complex type Party.
      properties: *ref_9
      required: *ref_10
    PartiesTypeIDPutResponse:
      title: PartiesTypeIDPutResponse
      type: object
      description: >
        The object sent in the PUT /parties/{Type}/{ID} callback.


        This is a variant based on FSPIOP `PartiesTypeIDPutResponse`
        specification.

        Main difference being that it returns a `Party` with the newly added

        `accounts` property.
      properties: *ref_82
      required: *ref_83
    Amount:
      title: Amount
      type: string
      pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
      description: >-
        The API data type Amount is a JSON String in a canonical format that is
        restricted by a regular expression for interoperability reasons. This
        pattern does not allow any trailing zeroes at all, but allows an amount
        without a minor currency unit. It also only allows four digits in the
        minor currency unit; a negative value is not allowed. Using more than 18
        digits in the major currency unit is not allowed.
      example: '123.45'
    Money:
      title: Money
      type: object
      description: Data model for the complex type Money.
      properties: *ref_5
      required: *ref_6
    DateTime:
      title: DateTime
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
      description: >-
        The API data type DateTime is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons. The
        format is according to [ISO
        8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed
        in a combined date, time and time zone format. A more readable version
        of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
        "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z
        indicates Zulu time zone, same as UTC).
      example: '2016-05-24T08:38:08.699-04:00'
    Latitude:
      title: Latitude
      type: string
      pattern: >-
        ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Latitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+45.4215'
    Longitude:
      title: Longitude
      type: string
      pattern: >-
        ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Longitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+75.6972'
    GeoCode:
      title: GeoCode
      type: object
      description: >-
        Data model for the complex type GeoCode. Indicates the geographic
        location from where the transaction was initiated.
      properties: *ref_11
      required: *ref_12
    IlpPacket:
      title: IlpPacket
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      minLength: 1
      maxLength: 32768
      description: Information for recipient (transport layer information).
      example: >-
        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
    IlpCondition:
      title: IlpCondition
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Condition that must be attached to the transfer by the Payer.
    QuotesIDPutResponse:
      title: QuotesIDPutResponse
      type: object
      description: 'The object sent in the PUT /quotes/{ID} callback.'
      properties: *ref_84
      required: *ref_85
    TransactionRequestState:
      title: TransactionRequestState
      type: string
      enum: *ref_69
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
        - PENDING - Payer FSP has sent the transaction request to the Payer.
        - ACCEPTED - Payer has approved the transaction.
        - REJECTED - Payer has rejected the transaction.
      example: RECEIVED
    TransactionState:
      title: TransactionState
      type: string
      enum: *ref_86
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
        - PENDING - Payee FSP has validated the transaction.
        - COMPLETED - Payee FSP has successfully performed the transaction.
        - REJECTED - Payee FSP has failed to perform the transaction.
      example: RECEIVED
    ThirdpartyRequestsTransactionsIDPatchResponse:
      title: ThirdpartyRequestsTransactionsIDPatchResponse
      type: object
      description: >-
        Used by: DFSP

        The issuing PISP will expect a response to their request for a transfer
        which describes the finalized state of the requested transfer.

        This response will be given by a PATCH call on the
        /thirdpartyRequests/transactions/{ID} resource.

        The {ID} given in the query string should be the transactionRequestId
        which was originally used by the PISP to identify the transaction
        request.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
      properties: *ref_70
      required: *ref_71
    AuthorizationResponseType:
      title: AuthorizationResponseType
      description: |
        Enum containing authorization response information; if the customer 
        accepted the terms of the transfer, or rejected the terms.
      type: string
      enum: *ref_87
    ConsentStatusIssued:
      title: ConsentStatusIssued
      type: string
      enum: *ref_51
      description: |-
        Allowed values for the enumeration ConsentStatus
        - ISSUED - The consent has been issued by the DFSP
    IlpFulfilment:
      title: IlpFulfilment
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Fulfilment that must be attached to the transfer by the Payee.
      example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
    Integer:
      title: Integer
      type: string
      pattern: '^[1-9]\d*$'
      description: >-
        The API data type Integer is a JSON String consisting of digits only.
        Negative numbers and leading zeroes are not allowed. The data type is
        always limited to a specific number of digits.
    Note:
      title: Note
      type: string
      minLength: 1
      maxLength: 128
      description: Memo assigned to transaction.
      example: Note sent to Payee.
    PartyIdTypeTPLink:
      title: PartyIdTypeTPLink
      type: string
      enum: *ref_88
      description: >
        - THIRD_PARTY_LINK - is the DFSP's internal reference which allows DFSP
        to find out the corresponding consent
      example: PERSONAL_ID
    PartyIdInfoTPLink:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties: *ref_89
      required: *ref_90
    ServiceType:
      title: ServiceType
      type: string
      description: >-
        The ServiceType enumeration describes the types of role for which a DFSP
        may query using the /services resource.

        Below are the allowed values for the enumeration ServiceType -
        THIRD_PARTY_DFSP - Enum used to query for DFSP's that have thirdparty
        features enabled. - PISP - Enum used to query for PISPs. - AUTH_SERVICE
        - Participants which provide Authentication Services.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3229-servicetype
      enum: *ref_91
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
      example: b51ec534-ee48-4575-b6a9-ead2955b8069
    ParticipantsPostRequest:
      title: ParticipantsPostRequest
      type: object
      description: The object sent in the POST /participants request.
      properties: *ref_60
      required: *ref_61
    AmountType:
      title: AmountType
      type: string
      enum: *ref_66
      description: >-
        Below are the allowed values for the enumeration AmountType.

        - SEND - Amount the Payer would like to send, that is, the amount that
        should be withdrawn from the Payer account including any fees.

        - RECEIVE - Amount the Payer would like the Payee to receive, that is,
        the amount that should be sent to the receiver exclusive of any fees.
      example: RECEIVE
    TransactionScenario:
      title: TransactionScenario
      type: string
      enum: *ref_92
      description: >-
        Below are the allowed values for the enumeration.

        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a
        normal scenario, electronic funds are transferred from a Business
        account to a Consumer account, and physical cash is given from the
        Consumer to the Business User.

        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
        In a normal scenario, electronic funds are transferred from a Consumer’s
        account to a Business account, and physical cash is given from the
        Business User to the Consumer.

        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to
        Consumer) transaction.

        - PAYMENT - Usually used for performing a transaction from a Consumer to
        a Merchant or Organization, but could also be for a B2B (Business to
        Business) payment. The transaction could be online for a purchase in an
        Internet store, in a physical store where both the Consumer and Business
        User are present, a bill payment, a donation, and so on.

        - REFUND - Used for performing a refund of transaction.
      example: DEPOSIT
    TransactionSubScenario:
      title: TransactionSubScenario
      type: string
      pattern: '^[A-Z_]{1,32}$'
      description: >-
        Possible sub-scenario, defined locally within the scheme (UndefinedEnum
        Type).
      example: LOCALLY_DEFINED_SUBSCENARIO
    TransactionInitiator:
      title: TransactionInitiator
      type: string
      enum: *ref_93
      description: >-
        Below are the allowed values for the enumeration.

        - PAYER - Sender of funds is initiating the transaction. The account to
        send from is either owned by the Payer or is connected to the Payer in
        some way.

        - PAYEE - Recipient of the funds is initiating the transaction by
        sending a transaction request. The Payer must approve the transaction,
        either automatically by a pre-generated OTP or by pre-approval of the
        Payee, or by manually approving in his or her own Device.
      example: PAYEE
    TransactionInitiatorType:
      title: TransactionInitiatorType
      type: string
      enum: *ref_94
      description: |-
        Below are the allowed values for the enumeration.
        - CONSUMER - Consumer is the initiator of the transaction.
        - AGENT - Agent is the initiator of the transaction.
        - BUSINESS - Business is the initiator of the transaction.
        - DEVICE - Device is the initiator of the transaction.
      example: CONSUMER
    RefundReason:
      title: RefundReason
      type: string
      minLength: 1
      maxLength: 128
      description: Reason for the refund.
      example: Free text indicating reason for the refund.
    Refund:
      title: Refund
      type: object
      description: Data model for the complex type Refund.
      properties: *ref_95
      required: *ref_96
    BalanceOfPayments:
      title: BalanceOfPayments
      type: string
      pattern: '^[1-9]\d{2}$'
      description: >-
        (BopCode) The API data type
        [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String
        of 3 characters, consisting of digits only. Negative numbers are not
        allowed. A leading zero is not allowed.
      example: '123'
    TransactionType:
      title: TransactionType
      type: object
      description: Data model for the complex type TransactionType.
      properties: *ref_67
      required: *ref_68
    QuotesPostRequest:
      title: QuotesPostRequest
      type: object
      description: The object sent in the POST /quotes request.
      properties: *ref_97
      required: *ref_98
    ErrorInformationResponse:
      title: ErrorInformationResponse
      type: object
      description: >-
        Data model for the complex type object that contains an optional element
        ErrorInformation used along with 4xx and 5xx responses.
      properties: *ref_15
    Name:
      title: Name
      type: string
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: >-
        The API data type Name is a JSON String, restricted by a regular
        expression to avoid characters which are generally not used in a name.


        Regular Expression - The regular expression for restricting the Name
        type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a
        string consisting of whitespace only, all Unicode characters are
        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
        and space characters ( ).


        **Note:** In some programming languages, Unicode support must be
        specifically enabled. For example, if Java is used, the flag
        UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
    AccountAddress:
      title: AccountAddress
      type: string
      description: >-
        The AccountAddress data type is a variable length string with a maximum
        size of 1023 characters and consists of:

        Alphanumeric characters, upper or lower case. (Addresses are
        case-sensitive so that they can contain data encoded in formats such as
        base64url.)

        - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.) Addresses MUST
        NOT end in a period (.) character

        An entity providing accounts to parties (i.e. a participant) can provide
        any value for an AccountAddress that is meaningful to that entity. It
        does not need to provide an address that makes the account identifiable
        outside the entity's domain.

        IMPORTANT: The policy for defining addresses and the life-cycle of these
        is at the discretion of the address space owner (the payer DFSP in this
        case).

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
      minLength: 1
      maxLength: 1023
    Account:
      title: Account
      type: object
      description: >-
        Data model for the complex type Account.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3211-account
      properties: *ref_99
      required: *ref_100
    AccountList:
      title: AccountList
      type: array
      description: >-
        The AccountList data model is used to hold information about the
        accounts that a party controls.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3213-accountlist
      items: *ref_101
      minItems: 1
      maxItems: 256
    AccountsIDPutResponse:
      title: AccountsIDPutResponse
      type: object
      description: >-
        Callback and data model information for GET /accounts/{ID}:

        Callback - PUT /accounts/{ID} Error Callback - PUT /accounts/{ID}/error
        Data Model - Empty body

        The PUT /accounts/{ID} response is used to inform the requester of the
        result of a request for accounts information. The identifier ID given in
        the call are the values given in the original request.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31121--put-accountsid
      properties: *ref_102
      required: *ref_103
    ErrorInformationObject:
      title: ErrorInformationObject
      type: object
      description: Data model for the complex type object that contains ErrorInformation.
      properties: *ref_48
      required: *ref_49
    ScopeAction:
      title: ScopeAction
      type: string
      description: >
        The ScopeAction element contains an access type which a PISP can request

        from a DFSP, or which a DFSP can grant to a PISP.

        It must be a member of the appropriate enumeration.


        - ACCOUNTS_GET_BALANCE: PISP can request a balance for the linked
        account

        - ACCOUNTS_TRANSFER: PISP can request a transfer of funds from the
        linked account in the DFSP

        - ACCOUNTS_STATEMENT: PISP can request a statement of individual
        transactions on a user's account
      enum: *ref_104
    Scope:
      title: Scope
      type: object
      description: >-
        The Scope element contains an identifier defining, in the terms of a
        DFSP, an account on which access types can be requested or granted. It
        also defines the access types which are requested or granted.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
      properties: *ref_46
      required: *ref_47
    ConsentRequestChannelType:
      title: ConsentRequestChannelType
      type: string
      enum: *ref_105
      description: |
        The auth channel being used for the consent request.
        - WEB - DFSP can support authorization via a web-based login.
        - OTP - DFSP can support authorization via a One Time PIN.
    Uri:
      title: Uri
      type: string
      pattern: '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?'
      minLength: 1
      maxLength: 512
      description: >
        The API data type Uri is a JSON string in a canonical format that is
        restricted by a regular expression for interoperability reasons.
    ConsentRequestsPostRequest:
      title: ConsentRequestsPostRequest
      type: object
      description: >-
        Used by: PISP

        The HTTP request POST /consentRequests is used to request a DFSP to
        grant access to one or more accounts owned by a customer of the DFSP for
        the PISP who sends the request.

        Callback and data model for POST /consentRequests:

        Callback: PUT /consentRequests/{ID} Error callback: PUT
        /consentRequests/{ID}/error Data model - see below url

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31212-post-consentrequests
      properties: *ref_106
      required: *ref_107
    ConsentRequestChannelTypeWeb:
      title: ConsentRequestChannelTypeWeb
      type: string
      enum: *ref_108
      description: |
        The web auth channel being used for `PUT /consentRequest/{ID}` request.
    ConsentRequestsIDPutResponseWeb:
      title: ConsentRequestsIDPutResponseWeb
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the request consent phase of the account linking web
        flow,

        the result is the PISP being instructed on a specific URL where this

        supposed user should be redirected. This URL should be a place where

        the user can prove their identity (e.g., by logging in).
      properties: *ref_109
      required: *ref_110
      additionalProperties: false
    ConsentRequestChannelTypeOTP:
      title: ConsentRequestChannelTypeOTP
      type: string
      enum: *ref_111
      description: |
        The OTP auth channel being used for `PUT /consentRequests/{ID}` request.
    ConsentRequestsIDPutResponseOTP:
      title: ConsentRequestsIDPutResponseOTP
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the request consent phase of the account linking OTP/SMS
        flow.
      properties: *ref_112
      required: *ref_113
      additionalProperties: false
    BinaryString:
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      description: >-
        The API data type BinaryString is a JSON String. The string is a
        base64url  encoding of a string of raw bytes, where padding (character
        ‘=’) is added at the end of the data if needed to ensure that the string
        is a multiple of 4 characters. The length restriction indicates the
        allowed number of characters.
    ConsentRequestsIDPatchRequest:
      title: ConsentRequestsIDPatchRequest
      type: object
      description: >-
        Used by: PISP

        After the user completes an out-of-band authorization with the DFSP, the
        PISP will receive a token which they can use to prove to the DFSP that
        the user trusts this PISP.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31222-patch-consentrequestsid
      properties: *ref_114
      required: *ref_115
    CredentialType:
      title: CredentialType
      type: string
      enum: *ref_54
      description: >-
        The type of the Credential. - "FIDO" - The credential is based on a FIDO
        challenge. Its payload is a FIDOPublicKeyCredentialAttestation object. -
        "GENERIC" - The credential is based on a simple public key validation.
        Its payload is a GenericCredential object.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3226-credentialtype
    CredentialStatusPending:
      title: CredentialStatusPending
      type: string
      enum: *ref_116
      description: |
        The status of the Credential.
        - "PENDING" - The credential has been created, but has not been verified
    GenericCredential:
      title: GenericCredential
      type: object
      description: >
        A publicKey + signature of a challenge for a generic public/private
        keypair.
      properties: *ref_56
      required: *ref_57
      additionalProperties: false
    FIDOPublicKeyCredentialAttestation:
      title: FIDOPublicKeyCredentialAttestation
      type: object
      description: >
        A data model representing a FIDO Attestation result. Derived from 

        [`PublicKeyCredential`
        Interface](https://w3c.github.io/webauthn/#iface-pkcredential).


        The `PublicKeyCredential` interface represents the below fields with

        a Type of Javascript
        [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).

        For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
      properties: *ref_58
      required: *ref_59
      additionalProperties: false
    SignedCredential:
      title: SignedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        SignedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be PENDING
        when

        updating a credential.
      properties: *ref_52
      required: *ref_53
      additionalProperties: false
    ConsentStatus:
      title: ConsentStatus
      type: string
      enum: *ref_50
      description: |-
        Allowed values for the enumeration ConsentStatus
        - ISSUED - The consent has been issued by the DFSP
        - REVOKED - The consent has been revoked
    ConsentsPostRequestAUTH:
      title: ConsentPostRequestAUTH
      type: object
      description: |
        The object sent in a `POST /consents` request to the Auth-Service
        by a DFSP to store registered Consent and credential
      properties: *ref_117
      required: *ref_118
      additionalProperties: false
    ConsentsPostRequestPISP:
      title: ConsentPostRequestPISP
      type: object
      description: |
        The provisional Consent object sent by the DFSP in `POST /consents`.
      properties: *ref_119
      required: *ref_120
    ConsentsIDPutResponseSigned:
      title: ConsentsIDPutResponseSigned
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the PISP to update a
        Consent with a signed challenge and register a credential.

        Called by a `PISP` to after signing a challenge. Sent to a DFSP for
        verification.
      properties: *ref_121
      required: *ref_122
      additionalProperties: false
    CredentialStatusVerified:
      title: CredentialStatusVerified
      type: string
      enum: *ref_55
      description: |
        The status of the Credential.
        - "VERIFIED" - The Credential is valid and verified.
    VerifiedCredential:
      title: VerifiedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        VerifiedCredential is a special formatting of Credential to allow us to
        be

        more explicit about the `status` field - it should only ever be VERIFIED
        when

        updating a credential.
      properties: *ref_123
      required: *ref_124
      additionalProperties: false
    ConsentsIDPutResponseVerified:
      title: ConsentsIDPutResponseVerified
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the DFSP or
        Auth-Service to update a Consent object once it has been Verified.

        Called by a `auth-service` to notify a DFSP that a credential has been
        verified and registered.
      properties: *ref_125
      required: *ref_126
      additionalProperties: false
    ConsentsIDPatchResponseVerified:
      title: ConsentsIDPatchResponseVerified
      description: |
        PATCH /consents/{ID} request object.

        Sent by the DFSP to the PISP when a consent is issued and verified.
        Used in the "Register Credential" part of the Account linking flow.
      type: object
      properties: *ref_127
      required: *ref_128
    ConsentStatusRevoked:
      title: ConsentStatusRevoked
      type: string
      enum: *ref_129
      description: |-
        Allowed values for the enumeration ConsentStatus
        - REVOKED - The consent has been revoked
    ConsentsIDPatchResponseRevoked:
      title: ConsentsIDPatchResponseRevoked
      description: |
        PATCH /consents/{ID} request object.

        Sent to both the PISP and DFSP when a consent is revoked.
        Used in the "Unlinking" part of the Account Unlinking flow.
      type: object
      properties: *ref_130
      required: *ref_131
    ParticipantsTypeIDPutResponse:
      title: ParticipantsTypeIDPutResponse
      type: object
      description: >-
        The object sent in the PUT /participants/{Type}/{ID}/{SubId} and
        /participants/{Type}/{ID} callbacks.
      properties: *ref_132
    ParticipantsTypeIDSubIDPostRequest:
      title: ParticipantsTypeIDSubIDPostRequest
      type: object
      description: >-
        The object sent in the POST /participants/{Type}/{ID}/{SubId} and
        /participants/{Type}/{ID} requests. An additional optional ExtensionList
        element has been added as part of v1.1 changes.
      properties: *ref_133
      required: *ref_134
    ServicesServiceTypePutResponse:
      title: ServicesServiceTypePutResponse
      type: object
      description: >-
        Used by: Switch

        The callback PUT /services/{ServiceType} is used to inform the client of
        a successful result of the service information lookup.

        Callback and data model information for GET /services/{ServiceType}:

        Callback - PUT /services/{ServiceType} Error Callback - PUT
        /services/{ServiceType}/error Data Model - Empty body

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31531-put-servicesservicetype
      properties: *ref_135
      required: *ref_136
    ThirdpartyRequestsTransactionsPostRequest:
      title: ThirdpartyRequestsTransactionsPostRequest
      type: object
      description: >-
        Used by: PISP

        The HTTP request POST /thirdpartyRequests/transactions is used to
        request the creation of a transaction request on the server for the
        transfer described in the request.

        Callback and data model information for POST
        /thirdpartyRequests/transactions:

        Callback - PUT /thirdpartyRequests/transactions/{ID} Error Callback -
        PUT /thirdpartyRequests/transactions/{ID}/error Data Model - See link
        below

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31712-post-thirdpartyrequeststransactions
      properties: *ref_137
      required: *ref_138
    ThirdpartyRequestsTransactionsIDPutResponse:
      title: ThirdpartyRequestsTransactionsIDPutResponse
      type: object
      description: >-
        Used by: DFSP

        After a PISP requests the creation of a Third Party Transaction request
        (POST /thirdpartyRequests/transactions) or the status of a previously
        created Third Party Transaction request (GET
        /thirdpartyRequests/transactions/{ID}), the DFSP will send this
        callback.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31721-put-thirdpartyrequeststransactionsid
      properties: *ref_139
      required: *ref_140
    ThirdpartyRequestsAuthorizationsPostRequest:
      title: ThirdpartyRequestsAuthorizationsPostRequest
      description: >-
        Used by: DFSP

        The HTTP request POST /thirdpartyRequests/authorizations is used to
        request the validation by a customer for the transfer described in the
        request.

        Callback and data model information for POST
        /thirdpartyRequests/authorizations:

        Callback - PUT /thirdpartyRequests/authorizations/{ID} Error Callback -
        PUT /thirdpartyRequests/authorizations/{ID}/error Data Model - See below
        url

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
      type: object
      properties: *ref_141
      required: *ref_142
      additionalProperties: false
    AuthorizationResponseTypeRejected:
      title: AuthorizationResponseTypeRejected
      description: |
        The customer rejected the terms of the transfer.
      type: string
      enum: *ref_143
    ThirdpartyRequestsAuthorizationsIDPutResponseRejected:
      title: ThirdpartyRequestsAuthorizationsIDPutResponseRejected
      type: object
      description: >-
        The object sent in the PUT /thirdpartyRequests/authorizations/{ID}
        callback.
      properties: *ref_144
      required: *ref_145
    AuthorizationResponseTypeAccepted:
      title: AuthorizationResponseType
      description: |
        The customer accepted the terms of the transfer
      type: string
      enum: *ref_72
    SignedPayloadTypeFIDO:
      title: SignedPayloadTypeFIDO
      type: string
      enum: *ref_73
      description: Describes a challenge that has been signed with FIDO Attestation flows
    FIDOPublicKeyCredentialAssertion:
      title: FIDOPublicKeyCredentialAssertion
      type: object
      description: >
        A data model representing a FIDO Assertion result.

        Derived from PublicKeyCredential Interface in WebAuthN.


        The PublicKeyCredential interface represents the below fields with a
        Type of

        Javascript ArrayBuffer.

        For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.


        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
      properties: *ref_74
      required: *ref_75
      additionalProperties: false
    SignedPayloadFIDO:
      title: SignedPayloadFIDO
      type: object
      properties: *ref_146
      required: *ref_147
      additionalProperties: false
    ThirdpartyRequestsAuthorizationsIDPutResponseFIDO:
      title: ThirdpartyRequestsAuthorizationsIDPutResponseFIDO
      type: object
      description: >-
        The object sent in the PUT /thirdpartyRequests/authorizations/{ID}
        callback.
      properties: *ref_148
      required: *ref_149
      additionalProperties: false
    SignedPayloadTypeGeneric:
      title: SignedPayloadTypeGeneric
      type: string
      enum: *ref_76
      description: Describes a challenge that has been signed with a private key
    SignedPayloadGeneric:
      title: SignedPayloadGeneric
      type: object
      properties: *ref_150
      required: *ref_151
      additionalProperties: false
    ThirdpartyRequestsAuthorizationsIDPutResponseGeneric:
      title: ThirdpartyRequestsAuthorizationsIDPutResponseGeneric
      type: object
      description: >-
        The object sent in the PUT /thirdpartyRequests/authorizations/{ID}
        callback.
      properties: *ref_152
      required: *ref_153
      additionalProperties: false
    ThirdpartyRequestsVerificationsPostRequestFIDO:
      title: ThirdpartyRequestsVerificationsPostRequestFIDO
      type: object
      description: The object sent in the POST /thirdpartyRequests/verifications request.
      properties: *ref_154
      required: *ref_155
    ThirdpartyRequestsVerificationsPostRequestGeneric:
      title: ThirdpartyRequestsVerificationsPostRequestGeneric
      type: object
      description: The object sent in the POST /thirdpartyRequests/verifications request.
      properties: *ref_156
      required: *ref_157
    AuthenticationResponse:
      title: AuthenticationResponse
      type: string
      enum: *ref_158
      description: >-
        The AuthenticationResponse enumeration describes the result of
        authenticating verification request.

        Below are the allowed values for the enumeration AuthenticationResponse.
        - VERIFIED - The challenge was correctly signed.
    ThirdpartyRequestsVerificationsIDPutResponse:
      title: ThirdpartyRequestsVerificationsIDPutResponse
      type: object
      description: >-
        Used by: Auth Service

        The callback PUT /thirdpartyRequests/verifications/{ID} is used to
        inform the client of the result of an authorization check. The {ID} in
        the URI should contain the authorizationRequestId which was used to
        request the check, or the {ID} that was used in the GET
        /thirdpartyRequests/verifications/{ID}.

        https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31821-put-thirdpartyrequestsverificationsid
      properties: *ref_159
      required: *ref_160
  parameters:
    ID:
      name: ID
      in: path
      required: true
      schema: *ref_34
      description: The identifier value.
    Content-Type:
      name: Content-Type
      in: header
      schema: *ref_35
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
    Date:
      name: Date
      in: header
      schema: *ref_36
      required: true
      description: The `Date` header field indicates the date when the request was sent.
    X-Forwarded-For:
      name: X-Forwarded-For
      in: header
      schema: *ref_37
      required: false
      description: >-
        The `X-Forwarded-For` header field is an unofficially accepted standard
        used for informational purposes of the originating client IP address, as
        a request might pass multiple proxies, firewalls, and so on. Multiple
        `X-Forwarded-For` values should be expected and supported by
        implementers of the API.


        **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
        7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC
        7239 is less-used and supported than `X-Forwarded-For`.
    FSPIOP-Source:
      name: FSPIOP-Source
      in: header
      schema: *ref_38
      required: true
      description: >-
        The `FSPIOP-Source` header field is a non-HTTP standard field used by
        the API for identifying the sender of the HTTP request. The field should
        be set by the original sender of the request. Required for routing and
        signature verification (see header field `FSPIOP-Signature`).
    FSPIOP-Destination:
      name: FSPIOP-Destination
      in: header
      schema: *ref_39
      required: false
      description: >-
        The `FSPIOP-Destination` header field is a non-HTTP standard field used
        by the API for HTTP header based routing of requests and responses to
        the destination. The field must be set by the original sender of the
        request if the destination is known (valid for all services except GET
        /parties) so that any entities between the client and the server do not
        need to parse the payload for routing purposes. If the destination is
        not known (valid for service GET /parties), the field should be left
        empty.
    FSPIOP-Encryption:
      name: FSPIOP-Encryption
      in: header
      schema: *ref_40
      required: false
      description: >-
        The `FSPIOP-Encryption` header field is a non-HTTP standard field used
        by the API for applying end-to-end encryption of the request.
    FSPIOP-Signature:
      name: FSPIOP-Signature
      in: header
      schema: *ref_41
      required: false
      description: >-
        The `FSPIOP-Signature` header field is a non-HTTP standard field used by
        the API for applying an end-to-end request signature.
    FSPIOP-URI:
      name: FSPIOP-URI
      in: header
      schema: *ref_42
      required: false
      description: >-
        The `FSPIOP-URI` header field is a non-HTTP standard field used by the
        API for signature verification, should contain the service URI. Required
        if signature verification is used, for more information, see [the API
        Signature
        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    FSPIOP-HTTP-Method:
      name: FSPIOP-HTTP-Method
      in: header
      schema: *ref_43
      required: false
      description: >-
        The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used
        by the API for signature verification, should contain the service HTTP
        method. Required if signature verification is used, for more
        information, see [the API Signature
        document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
    Accept:
      name: Accept
      in: header
      required: true
      schema: *ref_45
      description: >-
        The `Accept` header field indicates the version of the API the client
        would like the server to use.
    Content-Length:
      name: Content-Length
      in: header
      required: false
      schema: *ref_44
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Type:
      name: Type
      in: path
      required: true
      schema: *ref_64
      description: 'The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.'
    ServiceType:
      name: ServiceType
      in: path
      required: true
      schema: *ref_65
      description: 'The type of the service identifier. For example, `THIRD_PARTY_DFSP`'
  responses:
    '200':
      description: OK
    '202':
      description: Accepted
    '400':
      description: Bad Request
      content: *ref_18
      headers: *ref_19
    '401':
      description: Unauthorized
      content: *ref_20
      headers: *ref_21
    '403':
      description: Forbidden
      content: *ref_22
      headers: *ref_23
    '404':
      description: Not Found
      content: *ref_24
      headers: *ref_25
    '405':
      description: Method Not Allowed
      content: *ref_26
      headers: *ref_27
    '406':
      description: Not Acceptable
      content: *ref_28
      headers: *ref_29
    '501':
      description: Not Implemented
      content: *ref_30
      headers: *ref_31
    '503':
      description: Service Unavailable
      content: *ref_32
      headers: *ref_33
  headers:
    Content-Length:
      required: false
      schema: *ref_16
      description: >-
        The `Content-Length` header field indicates the anticipated size of the
        payload body. Only sent if there is a body.


        **Note:** The API supports a maximum size of 5242880 bytes (5
        Megabytes).
    Content-Type:
      schema: *ref_17
      required: true
      description: >-
        The `Content-Type` header indicates the specific version of the API used
        to send the payload body.
