openapi: 3.0.2
info:
  version: '0.1'
  title: Thirdparty Snippets
  description: |
    Based on sequence diagrams
    (https://github.com/mojaloop/pisp/tree/master/docs/out).
    This is a work in progress.
  license:
    name: TBD
servers:
  - url: '{protocol}://hostname:<port>/switch/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
components:
  schemas:
    Account:
      title: Account
      type: object
      description: Data model for the complex type Account.
      properties:
        address:
          $ref: '#/components/schemas/AccountAddress'
        currency:
          title: Currency
          description: |
            The currency codes defined in
            [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
            as three-letter alphabetic codes are used as the standard naming representation for currencies.
          type: string
          minLength: 3
          maxLength: 3
          enum:
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BRL
            - BSD
            - BTN
            - BWP
            - BYN
            - BZD
            - CAD
            - CDF
            - CHF
            - CLP
            - CNY
            - COP
            - CRC
            - CUC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - GBP
            - GEL
            - GGP
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - IMP
            - INR
            - IQD
            - IRR
            - ISK
            - JEP
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KMF
            - KPW
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRO
            - MUR
            - MVR
            - MWK
            - MXN
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLL
            - SOS
            - SPL
            - SRD
            - STD
            - SVC
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TVD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - UYU
            - UZS
            - VEF
            - VND
            - VUV
            - WST
            - XAF
            - XCD
            - XDR
            - XOF
            - XPF
            - YER
            - ZAR
            - ZMW
            - ZWD
          example: USD
        description:
          title: Name
          type: string
          pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
          description: |
            The API data type Name is a JSON String, restricted by a regular expression
            to avoid characters which are generally not used in a name.
            Regular Expression - The regular expression for restricting the
            Name type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not
            allow a string consisting of whitespace only, all Unicode characters are
            allowed, as well as the period (.) (apostrophe (â€˜), dash (-), comma (,)
            and space characters ( ).
            **Note:** In some programming languages,
            Unicode support must be specifically enabled. For example, if Java is used,
            the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
      required:
        - currency
    AccountAddress:
      title: AccountAddress
      type: string
      description: |
        A long-lived unique account identifier provided by the DFSP. This MUST NOT
        be Bank Account Number or anything that may expose a User's private bank
        account information.
      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
      minLength: 1
      maxLength: 1023
    AccountList:
      title: AccountList
      type: object
      description: Data model for the complex type AccountList.
      properties:
        account:
          type: array
          items:
            $ref: '#/components/schemas/Account'
          minItems: 1
          maxItems: 32
          description: Accounts associated with the Party.
      required:
        - account
    AuthorizationChannelType:
      title: AuthorizationChannelType
      type: string
      enum:
        - OTP
        - QRCODE
        - U2F
      description: |
        Below are the allowed values for the enumeration AuthorizationChannelType.
        - OTP - One-time password generated by the Payer FSP.
        - QRCODE - QR code used as One Time Password.
        - U2F - U2F is a new addition isolated to Thirdparty stream.

        This is based on FSPIOP `AuthenticationType` with U2F added.
      example: U2F
    AuthorizationResponseType:
      title: AuthorizationResponseType
      description: |
        Enum containing response information; if the customer entered the
        authentication value, rejected the transaction, or requested a
        resend of the authentication value.
      type: string
      enum:
        - ENTERED
        - REJECTED
        - RESEND
    AuthorizationsPostRequest:
      title: AuthorizationsPostRequest
      description: POST /authorizations request object.
      type: object
      properties:
        authenticationType:
          $ref: '#/components/schemas/AuthorizationChannelType'
        retriesLeft:
          title: Integer
          type: string
          pattern: '^[1-9]\d*$'
          description: |
            The API data type Integer is a JSON String consisting of digits only.
            Negative numbers and leading zeroes are not allowed.
            The data type is always limited to a specific number of digits.
        amount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties:
            currency:
              $ref: '#/components/schemas/Account/properties/currency'
            amount:
              title: Amount
              type: string
              pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
              description: |
                The API data type Amount is a JSON String in a canonical format that is
                restricted by a regular expression for interoperability reasons.
                This pattern does not allow any trailing zeroes at all, but allows an amount
                without a minor currency unit. It also only allows four digits in the minor
                currency unit; a negative value is not allowed. Using more than 18 digits
                in the major currency unit is not allowed.
              example: 123.45
          required:
            - currency
            - amount
        transactionId:
          $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
        transactionRequestId:
          $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
        quote:
          title: QuotesIDPutResponse
          type: object
          description: 'The object sent in the PUT /quotes/{ID} callback.'
          properties:
            transferAmount:
              $ref: '#/components/schemas/AuthorizationsPostRequest/properties/amount'
            payeeReceiveAmount:
              $ref: '#/components/schemas/AuthorizationsPostRequest/properties/amount'
            payeeFspFee:
              $ref: '#/components/schemas/AuthorizationsPostRequest/properties/amount'
            payeeFspCommission:
              $ref: '#/components/schemas/AuthorizationsPostRequest/properties/amount'
            expiration:
              $ref: '#/components/schemas/ConsentsPostRequest/properties/revokedAt'
            geoCode:
              title: GeoCode
              type: object
              description: |
                Data model for the complex type GeoCode.
                Indicates the geographic location from where the transaction was initiated.
              properties:
                latitude:
                  title: Latitude
                  type: string
                  pattern: '^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$'
                  description: |
                    The API data type Latitude is a JSON String in a lexical format that is
                    restricted by a regular expression for interoperability reasons.
                  example: '+45.4215'
                longitude:
                  title: Longitude
                  type: string
                  pattern: '^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$'
                  description: |
                    The API data type Longitude is a JSON String in a lexical format that
                    is restricted by a regular expression for interoperability reasons.
                  example: '+75.6972'
              required:
                - latitude
                - longitude
            ilpPacket:
              title: IlpPacket
              type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              minLength: 1
              maxLength: 32768
              description: Information for recipient (transport layer information).
              example: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
            condition:
              title: IlpCondition
              type: string
              pattern: '^[A-Za-z0-9-_]{43}$'
              maxLength: 48
              description: Condition that must be attached to the transfer by the Payer.
              example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
            extensionList:
              $ref: '#/components/schemas/ThirdpartyRequestsTransactionsIDPatchResponse/properties/extensionList'
          required:
            - transferAmount
            - expiration
            - ilpPacket
            - condition
      required:
        - authenticationType
        - retriesLeft
        - amount
        - transactionId
        - transactionRequestId
        - quote
      additionalProperties: false
    ConsentRequestChannelType:
      title: ConsentRequestChannelType
      type: string
      enum:
        - WEB
        - OTP
      description: |
        The auth channel being used for the consentRequest.
        - "WEB" - The Web auth channel.
        - "OTP" - The OTP auth channel.
    ConsentRequestChannelTypeOTP:
      title: ConsentRequestChannelTypeOTP
      type: string
      enum:
        - OTP
      description: |
        The OTP auth channel being used for PUT consentRequest/{ID} request.
    ConsentRequestChannelTypeWeb:
      title: ConsentRequestChannelTypeWeb
      type: string
      enum:
        - WEB
      description: |
        The web auth channel being used for PUT consentRequest/{ID} request.
    ConsentRequestsIDPutResponseOTP:
      title: ConsentRequestsIDPutResponseOTP
      type: object
      description: |
        The object sent in a `PUT /consentRequests/{ID}` request.

        Schema used in the request consent phase of the account linking OTP/SMS flow.
      properties:
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf.
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        authChannels:
          type: array
          items:
            $ref: '#/components/schemas/ConsentRequestChannelTypeOTP'
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
      additionalProperties: false
    ConsentRequestsIDPutResponseOTPAuth:
      title: ConsentRequestsIDPutResponseOTPAuth
      type: object
      description: |
        The object sent in a `PUT /consentRequests/{ID}` request.

        Schema used in the authentication phase of the account linking flow,
        the user is expected to prove their identity to the DFSP by passing a OTP
        or secret to the PISP.
      properties:
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf.
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        authChannels:
          type: array
          items:
            $ref: '#/components/schemas/ConsentRequestChannelTypeOTP'
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel.
        authToken:
          type: string
          description: The Auth token from the OTP or redirect to pisp app.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authToken
      additionalProperties: false
    ConsentRequestsIDPutResponseWeb:
      title: ConsentRequestsIDPutResponseWeb
      type: object
      description: |
        The object sent in a `PUT /consentRequests/{ID}` request.

        Schema used in the request consent phase of the account linking web flow,
        the result is the PISP being instructed on a specific URL where this
        supposed user should be redirected. This URL should be a place where
        the user can prove their identity (e.g., by logging in).
      properties:
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf.
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        authChannels:
          type: array
          items:
            $ref: '#/components/schemas/ConsentRequestChannelTypeWeb'
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel.
        authUri:
          type: string
          description: The callback uri that the pisp app redirects to for user to complete their login.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authUri
      additionalProperties: false
    ConsentRequestsIDPutResponseWebAuth:
      title: ConsentRequestsIDPutResponseWebAuth
      type: object
      description: |
        The object sent in a `PUT /consentRequests/{ID}` request.

        Schema used in the authentication phase of the account linking flow,
        the user is expected to prove their identity to the DFSP by passing a OTP
        or secret to the PISP.
      properties:
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf.
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        authChannels:
          type: array
          items:
            $ref: '#/components/schemas/ConsentRequestChannelTypeWeb'
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel.
        authUri:
          type: string
          description: The callback uri that the pisp app redirects to for user to complete their login.
        authToken:
          type: string
          description: The Auth token from the OTP or redirect to pisp app.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authUri
        - authToken
      additionalProperties: false
    ConsentRequestsPostRequest:
      title: ConsentRequestsPostRequest
      type: object
      description: The object sent in a `POST /consentRequests` request.
      properties:
        id:
          title: CorrelationId
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          description: |
            Identifier that correlates all messages of the same sequence.
            The API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),
            that is restricted by a regular expression for interoperability reasons.
            A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (â€˜-â€˜).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf.
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        authChannels:
          type: array
          items:
            $ref: '#/components/schemas/ConsentRequestChannelType'
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel.
      required:
        - id
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
    ConsentScopeType:
      title: ConsentScopeType
      type: string
      enum:
        - accounts.getBalance
        - accounts.transfer
      description: |
        The scopes requested for a ConsentRequest.
        - "accounts.getBalance" - Get the balance of a given account.
        - "accounts.transfer" - Initiate a transfer from an account.
    ConsentsIDGenerateChallengePostRequest:
      title: ConsentsIDGenerateChallengePostRequest
      type: object
      description: |
        A credential used to allow a user to prove their identity
        and access to an account with a DFSP.
      properties:
        type:
          $ref: '#/components/schemas/CredentialType'
      required:
        - type
    ConsentsIDPatchResponse:
      title: ConsentsIDPatchResponse
      description: |
        PATCH /consents/{ID} request object.

        Sent to both the PISP and DFSP when a consent is revoked.
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ConsentStatusType'
        revokedAt:
          $ref: '#/components/schemas/ConsentsPostRequest/properties/revokedAt'
      required:
        - status
        - revokedAt
    ConsentsIDPutResponse:
      title: ConsentsIDPutResponse
      type: object
      description: |
        The HTTP request `PUT /consents/{ID}` is used to update a specified consent object.
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `auth-service` to add the credential details

        - Called by a `PISP` to add a signature of the challenge
      properties:
        requestId:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent.
        participantId:
          $ref: '#/components/schemas/ConsentsPostRequest/properties/participantId'
        initiatorId:
          allOf:
            - $ref: '#/components/schemas/ConsentsPostRequest/properties/participantId'
          description: PISP identifier who uses this Consent.
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        credential:
          $ref: '#/components/schemas/UpdatedCredential'
      required:
        - requestId
        - participantId
        - initiatorId
        - scopes
        - credential
    ConsentsPostRequest:
      title: ConsentPostRequest
      type: object
      description: The object sent in a `POST /consents` request.
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            Common ID between the PISP and FSP for the Consent object
            decided by the DFSP who creates the Consent
            This field is REQUIRED for POST /consent.
        requestId:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent.
        participantId:
          title: FspId
          type: string
          minLength: 1
          maxLength: 32
          description: FSP identifier.
          example: 1234
        initiatorId:
          allOf:
            - $ref: '#/components/schemas/ConsentsPostRequest/properties/participantId'
          description: PISP identifier who uses this Consent.
        revokedAt:
          title: DateTime
          type: string
          pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$'
          description: |
            The API data type DateTime is a JSON String in a lexical format that is
            restricted by a regular expression for interoperability reasons.
            The format is according to
            [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html),
            expressed in a combined date, time and time zone format.
            A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
            Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\"
            (where Z indicates Zulu time zone, same as UTC).
          example: '2016-05-24T08:38:08.699-04:00'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        credential:
          $ref: '#/components/schemas/Credential'
          nullable: true
      required:
        - id
        - scopes
        - participantId
        - initiatorId
        - credential
    ConsentStatusType:
      title: ConsentStatusType
      type: string
      enum:
        - REVOKED
      description: |
        The status of the Consent.
        - "REVOKED" - The Consent is no longer valid and has been revoked.
    Credential:
      title: Credential
      type: object
      description: |
        A credential used to allow a user to prove their identity and
        access to an account with a DFSP.
      properties:
        id:
          type: string
          description: The id of a Credential.
        type:
          $ref: '#/components/schemas/CredentialType'
        status:
          $ref: '#/components/schemas/CredentialStatusType'
        challenge:
          $ref: '#/components/schemas/CredentialChallenge'
        payload:
          type: string
          description: Base64 encoded bytes - The public key of the Public/Private keypair.
      required:
        - id
        - type
        - status
    CredentialChallenge:
      title: CredentialChallenge
      type: object
      description: |
        The challenge issued by a DFSP that must be answered by the PISP.
      properties:
        payload:
          type: string
          description: Base64 encoded binary of the challenge that must be answered by the PISP.
        signature:
          type: string
          description: Base64 encoded binary string or result of the payload signed by the PISP using the private key.
      required:
        - payload
    CredentialStatusType:
      title: CredentialStatusType
      type: string
      enum:
        - PENDING
        - ACTIVE
      description: |
        The status of the Credential's creation
        - "PENDING" - The PISP has requested a challenge, or the challenge has
                      initialized but not yet answered by the PISP.
        - "VERIFIED" - The Credential is valid, and ready to be used by the PISP.
    CredentialType:
      title: CredentialType
      type: string
      enum:
        - FIDO
      description: |
        The type of the Credential.
        - "FIDO" - A FIDO public/private keypair.
    PartiesTypeIDPutResponse:
      title: PartiesTypeIDPutResponse
      type: object
      description: |
        The object sent in the PUT /parties/{Type}/{ID} callback.

        This is a variant based on FSPIOP `PartiesTypeIDPutResponse` specification.
        Main difference being that it returns a `Party` with the newly added
        `accounts` property.
      properties:
        party:
          $ref: '#/components/schemas/Party'
      required:
        - party
    Party:
      title: Party
      type: object
      description: |
        Data model for the complex type Party.

        This is a variant based on FSPIOP `Party` specification.
        Main difference being the newly added `accounts` property.
      properties:
        partyIdInfo:
          title: PartyIdInfo
          type: object
          description: Data model for the complex type PartyIdInfo.
          properties:
            partyIdType:
              title: PartyIdType
              type: string
              enum:
                - MSISDN
                - EMAIL
                - PERSONAL_ID
                - BUSINESS
                - DEVICE
                - ACCOUNT_ID
                - IBAN
                - ALIAS
              description: |
                Below are the allowed values for the enumeration.
                - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
                Number, that is, the phone number) is used as reference to a participant.
                The MSISDN identifier should be in international format according to the
                [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
                Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
                international prefix.
                - EMAIL - An email is used as reference to a
                participant. The format of the email should be according to the informational
                [RFC 3696](https://tools.ietf.org/html/rfc3696).
                - PERSONAL_ID - A personal identifier is used as reference to a participant.
                Examples of personal identification are passport number, birth certificate
                number, and national registration number. The identifier number is added in
                the PartyIdentifier element. The personal identifier type is added in the
                PartySubIdOrType element.
                - BUSINESS - A specific Business (for example, an organization or a company)
                is used as reference to a participant. The BUSINESS identifier can be in any
                format. To make a transaction connected to a specific username or bill number
                in a Business, the PartySubIdOrType element should be used.
                - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
                specific business or organization is used as reference to a Party.
                For referencing a specific device under a specific business or organization,
                use the PartySubIdOrType element.
                - ACCOUNT_ID - A bank account number or FSP account ID should be used as
                reference to a participant. The ACCOUNT_ID identifier can be in any format,
                as formats can greatly differ depending on country and FSP.
                - IBAN - A bank account number or FSP account ID is used as reference to a
                participant. The IBAN identifier can consist of up to 34 alphanumeric
                characters and should be entered without whitespace.
                - ALIAS An alias is used as reference to a participant. The alias should be
                created in the FSP as an alternative reference to an account owner.
                Another example of an alias is a username in the FSP system.
                The ALIAS identifier can be in any format. It is also possible to use the
                PartySubIdOrType element for identifying an account under an Alias defined
                by the PartyIdentifier.
              example: PERSONAL_ID
            partyIdentifier:
              title: PartyIdentifier
              type: string
              minLength: 1
              maxLength: 128
              description: Identifier of the Party.
              example: 16135551212
            partySubIdOrType:
              title: PartySubIdOrType
              type: string
              minLength: 1
              maxLength: 128
              description: |
                Either a sub-identifier of a PartyIdentifier, or a sub-type of the
                PartyIdType, normally a PersonalIdentifierType.
              example: DRIVING_LICENSE
            fspId:
              $ref: '#/components/schemas/ConsentsPostRequest/properties/participantId'
          required:
            - partyIdType
            - partyIdentifier
        merchantClassificationCode:
          title: MerchantClassificationCode
          type: string
          pattern: '^[\d]{1,4}$'
          description: |
            A limited set of pre-defined numbers. This list would be a limited set of
            numbers identifying a set of popular merchant types like School Fees,
            Pubs and Restaurants, Groceries, etc.
          example: 4321
        name:
          title: PartyName
          type: string
          minLength: 1
          maxLength: 128
          description: Name of the Party. Could be a real name or a nickname.
          example: Henrik Karlsson
        personalInfo:
          title: PartyPersonalInfo
          type: object
          description: Data model for the complex type PartyPersonalInfo.
          properties:
            complexName:
              title: PartyComplexName
              type: object
              description: Data model for the complex type PartyComplexName.
              properties:
                firstName:
                  title: FirstName
                  type: string
                  minLength: 1
                  maxLength: 128
                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                  description: First name of the Party (Name Type).
                  example: Henrik
                middleName:
                  title: MiddleName
                  type: string
                  minLength: 1
                  maxLength: 128
                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                  description: Middle name of the Party (Name Type).
                  example: Johannes
                lastName:
                  title: LastName
                  type: string
                  minLength: 1
                  maxLength: 128
                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                  description: Last name of the Party (Name Type).
                  example: Karlsson
            dateOfBirth:
              title: DateofBirth (type Date)
              type: string
              pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'
              description: Date of Birth of the Party.
              example: '1966-06-16'
        accounts:
          $ref: '#/components/schemas/AccountList'
          description: 'List of accounts associated with the party containing and DFSP routable address, currency identifier and description.'
      required:
        - partyIdInfo
    Scope:
      title: Scope
      type: object
      description: Scope + Account Identifier mapping for a Consent.
      example: |
        {
          accountId: "dfsp.username.5678",
          actions: [ "accounts.transfer", "accounts.getBalance" ]
        }
      properties:
        accountId:
          $ref: '#/components/schemas/AccountAddress'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ConsentScopeType'
      required:
        - accountId
        - actions
    ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest:
      title: ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest
      type: object
      description: 'The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request.'
      properties:
        challenge:
          type: string
          description: Base64 encoded binary string - the original challenge.
        value:
          allOf:
            - type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              description: |
                The API data type BinaryString is a JSON String.
                The string is a base64url  encoding of a string of raw bytes,
                where padding (character â€˜=â€™) is added at the end of the data if
                needed to ensure that the string is a multiple of 4 characters.
                The length restriction indicates the allowed number of characters.
          description: Base64 encoded binary string - the signed challenge
        consentId:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
        sourceAccountId:
          allOf:
            - $ref: '#/components/schemas/AccountAddress'
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        status:
          type: string
          enum:
            - PENDING
          description: The status of the authorization. This MUST be PENDING for a POST request
      required:
        - challenge
        - value
        - consentId
        - sourceAccountId
        - status
    ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse:
      title: ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse
      type: object
      description: 'The object sent in the PUT /thirdpartyRequests/transactions/{id}/authorizations request.'
      properties:
        challenge:
          type: string
          description: Base64 encoded binary string - the original challenge.
        value:
          allOf:
            - $ref: '#/components/schemas/ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest/properties/value/allOf/0'
          description: Base64 encoded binary string - the signed challenge.
        consentId:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which consent allows the PISP to initiate transaction.
        sourceAccountId:
          allOf:
            - $ref: '#/components/schemas/AccountAddress'
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        status:
          type: string
          enum:
            - VERIFIED
          description: The status of the authorization. This value must be `VERIFIED` for a PUT request.
      required:
        - challenge
        - value
        - consentId
        - sourceAccountId
        - status
    ThirdpartyRequestsTransactionsIDPatchResponse:
      title: ThirdpartyRequestsTransactionsIDPatchResponse
      type: object
      description: 'The object sent in the PATCH /thirdpartyRequests/transactions/{ID} callback.'
      properties:
        fulfilment:
          title: IlpFulfilment
          type: string
          pattern: '^[A-Za-z0-9-_]{43}$'
          maxLength: 48
          description: Fulfilment that must be attached to the transfer by the Payee.
          example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
        completedTimestamp:
          $ref: '#/components/schemas/ConsentsPostRequest/properties/revokedAt'
        transferState:
          title: TransferState
          type: string
          enum:
            - RECEIVED
            - RESERVED
            - COMMITTED
            - ABORTED
          description: |
            Below are the allowed values for the enumeration.
            - RECEIVED - Next ledger has received the transfer.
            - RESERVED - Next ledger has reserved the transfer.
            - COMMITTED - Next ledger has successfully performed the transfer.
            - ABORTED - Next ledger has aborted the transfer due to a rejection or
            failure to perform the transfer.
          example: RESERVED
        extensionList:
          title: ExtensionList
          type: object
          description: |
            Data model for the complex type ExtensionList.
            An optional list of extensions, specific to deployment.
          properties:
            extension:
              type: array
              items:
                title: Extension
                type: object
                description: Data model for the complex type Extension.
                properties:
                  key:
                    title: ExtensionKey
                    type: string
                    minLength: 1
                    maxLength: 32
                    description: Extension key.
                  value:
                    title: ExtensionValue
                    type: string
                    minLength: 1
                    maxLength: 128
                    description: Extension value.
                required:
                  - key
                  - value
              minItems: 1
              maxItems: 16
              description: Number of Extension elements.
          required:
            - extension
      required:
        - transferState
    ThirdpartyRequestsTransactionsIDPutResponse:
      title: ThirdpartyRequestsTransactionsIDPutResponse
      type: object
      description: 'The object sent in the PUT /thirdPartyRequests/transactions/{ID} request.'
      properties:
        transactionId:
          $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            Identifies a related transaction (if a transaction has been created).
        transactionRequestState:
          description: State of the transaction request.
          title: TransactionRequestState
          type: string
          enum:
            - RECEIVED
            - PENDING
            - ACCEPTED
            - REJECTED
          example: RECEIVED
    ThirdpartyRequestsTransactionsPostRequest:
      title: ThirdpartyRequestsTransactionsPostRequest
      type: object
      description: The object sent in the POST /thirdpartyRequests/transactions request.
      properties:
        transactionRequestId:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
        sourceAccountId:
          allOf:
            - $ref: '#/components/schemas/AccountAddress'
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        consentId:
          allOf:
            - $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
          description: |
            Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
        payee:
          allOf:
            - title: Party
              type: object
              description: Data model for the complex type Party.
              properties:
                partyIdInfo:
                  $ref: '#/components/schemas/Party/properties/partyIdInfo'
                merchantClassificationCode:
                  $ref: '#/components/schemas/Party/properties/merchantClassificationCode'
                name:
                  $ref: '#/components/schemas/Party/properties/name'
                personalInfo:
                  $ref: '#/components/schemas/Party/properties/personalInfo'
              required:
                - partyIdInfo
          description: Information about the Payee in the proposed financial transaction.
        payer:
          allOf:
            - $ref: '#/components/schemas/ThirdpartyRequestsTransactionsPostRequest/properties/payee/allOf/0'
          description: Information about the Payer in the proposed financial transaction.
        amountType:
          allOf:
            - title: AmountType
              type: string
              enum:
                - SEND
                - RECEIVE
              description: |
                Below are the allowed values for the enumeration AmountType.
                - SEND - Amount the Payer would like to send, that is, the amount that should
                be withdrawn from the Payer account including any fees.
                - RECEIVE - Amount the Payer would like the Payee to receive, that is,
                the amount that should be sent to the receiver exclusive of any fees.
              example: RECEIVE
          description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
        amount:
          allOf:
            - $ref: '#/components/schemas/AuthorizationsPostRequest/properties/amount'
          description: Requested amount to be transferred from the Payer to Payee.
        transactionType:
          allOf:
            - title: TransactionType
              type: object
              description: Data model for the complex type TransactionType.
              properties:
                scenario:
                  title: TransactionScenario
                  type: string
                  enum:
                    - DEPOSIT
                    - WITHDRAWAL
                    - TRANSFER
                    - PAYMENT
                    - REFUND
                  description: |
                    Below are the allowed values for the enumeration.
                    - DEPOSIT - Used for performing a Cash-In (deposit) transaction.
                    In a normal scenario, electronic funds are transferred from a
                    Business account to a Consumer account, and physical cash is given
                    from the Consumer to the Business User.
                    - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
                    In a normal scenario, electronic funds are transferred from a Consumerâ€™s
                    account to a Business account, and physical cash is given from the Business
                    User to the Consumer.
                    - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer)
                    transaction.
                    - PAYMENT - Usually used for performing a transaction from a Consumer to a
                    Merchant or Organization, but could also be for a B2B (Business to Business)
                    payment. The transaction could be online for a purchase in an Internet store,
                    in a physical store where both the Consumer and Business User are present, a
                    bill payment, a donation, and so on.
                    - REFUND - Used for performing a refund of transaction.
                  example: DEPOSIT
                subScenario:
                  title: TransactionSubScenario
                  type: string
                  pattern: '^[A-Z_]{1,32}$'
                  description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'
                  example: LOCALLY_DEFINED_SUBSCENARIO
                initiator:
                  title: TransactionInitiator
                  type: string
                  enum:
                    - PAYER
                    - PAYEE
                  description: |
                    Below are the allowed values for the enumeration.
                    - PAYER - Sender of funds is initiating the transaction.
                    The account to send from is either owned by the Payer or is connected to the
                    Payer in some way.
                    - PAYEE - Recipient of the funds is initiating the transaction by sending a
                    transaction request. The Payer must approve the transaction, either
                    automatically by a pre-generated OTP or by pre-approval of the Payee,
                    or by manually approving in his or her own Device.
                  example: PAYEE
                initiatorType:
                  title: TransactionInitiatorType
                  type: string
                  enum:
                    - CONSUMER
                    - AGENT
                    - BUSINESS
                    - DEVICE
                  description: |
                    Below are the allowed values for the enumeration.
                    - CONSUMER - Consumer is the initiator of the transaction.
                    - AGENT - Agent is the initiator of the transaction.
                    - BUSINESS - Business is the initiator of the transaction.
                    - DEVICE - Device is the initiator of the transaction.
                  example: CONSUMER
                refundInfo:
                  title: Refund
                  type: object
                  description: Data model for the complex type Refund.
                  properties:
                    originalTransactionId:
                      $ref: '#/components/schemas/ConsentRequestsPostRequest/properties/id'
                    refundReason:
                      title: RefundReason
                      type: string
                      minLength: 1
                      maxLength: 128
                      description: Reason for the refund.
                      example: Free text indicating reason for the refund.
                  required:
                    - originalTransactionId
                balanceOfPayments:
                  title: BalanceOfPayments
                  type: string
                  pattern: '^[1-9]\d{2}$'
                  description: |
                    (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/)
                    is a JSON String of 3 characters, consisting of digits only.
                    Negative numbers are not allowed. A leading zero is not allowed.
                  example: 123
              required:
                - scenario
                - initiator
                - initiatorType
          description: Type of transaction.
        expiration:
          type: string
          description: |
            Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.
          example: '2016-05-24T08:38:08.699-04:00'
      required:
        - transactionRequestId
        - sourceAccountId
        - consentId
        - payee
        - payer
        - amountType
        - amount
        - transactionType
        - expiration
    UpdatedCredential:
      title: UpdatedCredential
      type: object
      description: |
        A credential used to allow a user to prove their identity and access
        to an account with a DFSP.

        UpdatedCredential is a special formatting of the credential to allow us to be
        more explicit about the `status` field - it should only ever be PENDING when updating
        a credential.
      properties:
        id:
          type: string
          description: The id of a Credential.
        type:
          $ref: '#/components/schemas/CredentialType'
        status:
          $ref: '#/components/schemas/CredentialStatusType'
        challenge:
          $ref: '#/components/schemas/CredentialChallenge'
        payload:
          type: string
          description: Base64 encoded bytes - The public key of the Public/Private keypair.
      required:
        - id
        - type
        - status
        - challenge
        - payload
paths:
  /health:
    get:
      summary: This path is for demonstration purposes.
      description: A valid OpenApi3 specification requires `paths` to be defined.
      responses:
        '200':
          description: OK
