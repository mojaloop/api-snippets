openapi: 3.0.2
info:
  version: '0.1'
  title: Thirdparty Snippets
  description: |
    Based on sequence diagrams
    (https://github.com/mojaloop/pisp/tree/master/docs/out).
    This is a work in progress.
  license:
    name: TBD
servers:
  - url: '{protocol}://hostname:<port>/switch/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
paths:
  /health:
    get:
      summary: This path is for demonstration purposes.
      description: A valid OpenApi3 specification requires `paths` to be defined.
      responses:
        '200':
          description: OK
components:
  schemas:
    AccountAddress:
      title: AccountAddress
      type: string
      description: >
        A long-lived unique account identifier provided by the DFSP. This MUST
        NOT

        be Bank Account Number or anything that may expose a User's private bank

        account information.
      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
      minLength: 1
      maxLength: 1023
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum: &ref_0
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SPL
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TVD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XDR
        - XOF
        - XPF
        - YER
        - ZAR
        - ZMW
        - ZWD
    Name:
      title: Name
      type: string
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: >-
        The API data type Name is a JSON String, restricted by a regular
        expression to avoid characters which are generally not used in a name.


        Regular Expression - The regular expression for restricting the Name
        type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a
        string consisting of whitespace only, all Unicode characters are
        allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
        and space characters ( ).


        **Note:** In some programming languages, Unicode support must be
        specifically enabled. For example, if Java is used, the flag
        UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
    Account:
      title: Account
      type: object
      description: Data model for the complex type Account.
      properties: &ref_1
        address:
          title: AccountAddress
          type: string
          description: >
            A long-lived unique account identifier provided by the DFSP. This
            MUST NOT

            be Bank Account Number or anything that may expose a User's private
            bank

            account information.
          pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
          minLength: 1
          maxLength: 1023
        currency:
          title: Currency
          description: >-
            The currency codes defined in [ISO
            4217](https://www.iso.org/iso-4217-currency-codes.html) as
            three-letter alphabetic codes are used as the standard naming
            representation for currencies.
          type: string
          minLength: 3
          maxLength: 3
          enum: *ref_0
        description:
          title: Name
          type: string
          pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
          description: >-
            The API data type Name is a JSON String, restricted by a regular
            expression to avoid characters which are generally not used in a
            name.


            Regular Expression - The regular expression for restricting the Name
            type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow
            a string consisting of whitespace only, all Unicode characters are
            allowed, as well as the period (.) (apostrophe (‘), dash (-), comma
            (,) and space characters ( ).


            **Note:** In some programming languages, Unicode support must be
            specifically enabled. For example, if Java is used, the flag
            UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
      required: &ref_2
        - currency
    AccountList:
      title: AccountList
      type: object
      description: Data model for the complex type AccountList.
      properties: &ref_38
        account:
          type: array
          items:
            title: Account
            type: object
            description: Data model for the complex type Account.
            properties: *ref_1
            required: *ref_2
          minItems: 1
          maxItems: 32
          description: Accounts associated with the Party.
      required: &ref_39
        - account
    AccountsIDPutResponse:
      title: AccountsIDPutResponse
      type: array
      items:
        type: object
        description: |
          The object sent in a `PUT /accounts/{ID}` request.
        properties:
          accountNickname:
            title: AccountAddress
            type: string
            description: >
              A long-lived unique account identifier provided by the DFSP. This
              MUST NOT

              be Bank Account Number or anything that may expose a User's
              private bank

              account information.
            pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
            minLength: 1
            maxLength: 1023
          id:
            title: AccountAddress
            type: string
            description: >
              A long-lived unique account identifier provided by the DFSP. This
              MUST NOT

              be Bank Account Number or anything that may expose a User's
              private bank

              account information.
            pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
            minLength: 1
            maxLength: 1023
          currency:
            title: Currency
            description: >-
              The currency codes defined in [ISO
              4217](https://www.iso.org/iso-4217-currency-codes.html) as
              three-letter alphabetic codes are used as the standard naming
              representation for currencies.
            type: string
            minLength: 3
            maxLength: 3
            enum: *ref_0
        required:
          - accountNickname
          - id
          - currency
    Amount:
      title: Amount
      type: string
      pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
      description: >-
        The API data type Amount is a JSON String in a canonical format that is
        restricted by a regular expression for interoperability reasons. This
        pattern does not allow any trailing zeroes at all, but allows an amount
        without a minor currency unit. It also only allows four digits in the
        minor currency unit; a negative value is not allowed. Using more than 18
        digits in the major currency unit is not allowed.
      example: '123.45'
    AmountType:
      title: AmountType
      type: string
      enum: &ref_50
        - SEND
        - RECEIVE
      description: >-
        Below are the allowed values for the enumeration AmountType.

        - SEND - Amount the Payer would like to send, that is, the amount that
        should be withdrawn from the Payer account including any fees.

        - RECEIVE - Amount the Payer would like the Payee to receive, that is,
        the amount that should be sent to the receiver exclusive of any fees.
      example: RECEIVE
    AuthenticationType:
      title: AuthenticationType
      type: string
      enum: &ref_5
        - OTP
        - QRCODE
        - U2F
      description: |-
        Below are the allowed values for the enumeration AuthenticationType.
        - OTP - One-time password generated by the Payer FSP.
        - QRCODE - QR code used as One Time Password.
        - U2F - U2F is a new addition isolated to Thirdparty stream.
    OtpValue:
      title: OtpValue
      type: string
      pattern: '^\d{3,10}$'
      description: >-
        The API data type OtpValue is a JSON String of 3 to 10 characters,
        consisting of digits only. Negative numbers are not allowed. One or more
        leading zeros are allowed.
    QRCODE:
      title: QRCODE
      type: string
      minLength: 1
      maxLength: 64
      description: QR code used as a One Time Password.
    U2FPIN:
      title: U2FPIN
      type: string
      pattern: '^\S{1,64}$'
      minLength: 1
      maxLength: 64
      description: >
        U2F challenge-response, where payer FSP verifies if the response
        provided by end-user device matches the previously registered key.
    Integer:
      title: Integer
      type: string
      pattern: '^[1-9]\d*$'
      description: >-
        The API data type Integer is a JSON String consisting of digits only.
        Negative numbers and leading zeroes are not allowed. The data type is
        always limited to a specific number of digits.
    U2FPinValue:
      title: U2FPinValue
      type: object
      description: >
        U2F challenge-response, where payer FSP verifies if the response
        provided by end-user device matches the previously registered key.
      properties: &ref_3
        pinValue:
          allOf:
            - title: U2FPIN
              type: string
              pattern: '^\S{1,64}$'
              minLength: 1
              maxLength: 64
              description: >
                U2F challenge-response, where payer FSP verifies if the response
                provided by end-user device matches the previously registered
                key.
          description: U2F challenge-response.
        counter:
          allOf:
            - title: Integer
              type: string
              pattern: '^[1-9]\d*$'
              description: >-
                The API data type Integer is a JSON String consisting of digits
                only. Negative numbers and leading zeroes are not allowed. The
                data type is always limited to a specific number of digits.
          description: >-
            Sequential counter used for cloning detection. Present only for U2F
            authentication.
      required: &ref_4
        - pinValue
        - counter
    AuthenticationValue:
      title: AuthenticationValue
      anyOf: &ref_6
        - title: OtpValue
          type: string
          pattern: '^\d{3,10}$'
          description: >-
            The API data type OtpValue is a JSON String of 3 to 10 characters,
            consisting of digits only. Negative numbers are not allowed. One or
            more leading zeros are allowed.
        - title: QRCODE
          type: string
          minLength: 1
          maxLength: 64
          description: QR code used as a One Time Password.
        - title: U2FPinValue
          type: object
          description: >
            U2F challenge-response, where payer FSP verifies if the response
            provided by end-user device matches the previously registered key.
          properties: *ref_3
          required: *ref_4
      pattern: '^\d{3,10}$|^\S{1,64}$'
      description: >-
        Contains the authentication value. The format depends on the
        authentication type used in the AuthenticationInfo complex type.
    AuthenticationInfo:
      title: AuthenticationInfo
      type: object
      description: Data model for the complex type AuthenticationInfo.
      properties:
        authentication:
          description: |-
            Below are the allowed values for the enumeration AuthenticationType.
            - OTP - One-time password generated by the Payer FSP.
            - QRCODE - QR code used as One Time Password.
            - U2F - U2F is a new addition isolated to Thirdparty stream.
          example: U2F
          title: AuthenticationType
          type: string
          enum: *ref_5
        authenticationValue:
          description: >-
            Contains the authentication value. The format depends on the
            authentication type used in the AuthenticationInfo complex type.
          example: 1234
          title: AuthenticationValue
          anyOf: *ref_6
          pattern: '^\d{3,10}$|^\S{1,64}$'
      required:
        - authentication
        - authenticationValue
    AuthorizationChannelType:
      title: AuthorizationChannelType
      type: string
      enum: &ref_15
        - OTP
        - QRCODE
        - U2F
      description: >
        Below are the allowed values for the enumeration
        AuthorizationChannelType.

        - OTP - One-time password generated by the Payer FSP.

        - QRCODE - QR code used as One Time Password.

        - U2F - U2F is a new addition isolated to Thirdparty stream.


        This is based on FSPIOP `AuthenticationType` with U2F added.
      example: U2F
    AuthorizationResponseType:
      title: AuthorizationResponseType
      description: |
        Enum containing response information; if the customer entered the
        authentication value, rejected the transaction, or requested a
        resend of the authentication value.
      type: string
      enum:
        - ENTERED
        - REJECTED
        - RESEND
    Money:
      title: Money
      type: object
      description: Data model for the complex type Money.
      properties: &ref_9
        currency:
          title: Currency
          description: >-
            The currency codes defined in [ISO
            4217](https://www.iso.org/iso-4217-currency-codes.html) as
            three-letter alphabetic codes are used as the standard naming
            representation for currencies.
          type: string
          minLength: 3
          maxLength: 3
          enum: *ref_0
        amount:
          title: Amount
          type: string
          pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
          description: >-
            The API data type Amount is a JSON String in a canonical format that
            is restricted by a regular expression for interoperability reasons.
            This pattern does not allow any trailing zeroes at all, but allows
            an amount without a minor currency unit. It also only allows four
            digits in the minor currency unit; a negative value is not allowed.
            Using more than 18 digits in the major currency unit is not allowed.
          example: '123.45'
      required: &ref_10
        - currency
        - amount
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
      example: b51ec534-ee48-4575-b6a9-ead2955b8069
    DateTime:
      title: DateTime
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
      description: >-
        The API data type DateTime is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons. The
        format is according to [ISO
        8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed
        in a combined date, time and time zone format. A more readable version
        of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
        "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z
        indicates Zulu time zone, same as UTC).
      example: '2016-05-24T08:38:08.699-04:00'
    Latitude:
      title: Latitude
      type: string
      pattern: >-
        ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Latitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+45.4215'
    Longitude:
      title: Longitude
      type: string
      pattern: >-
        ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
      description: >-
        The API data type Longitude is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons.
      example: '+75.6972'
    GeoCode:
      title: GeoCode
      type: object
      description: >-
        Data model for the complex type GeoCode. Indicates the geographic
        location from where the transaction was initiated.
      properties: &ref_11
        latitude:
          title: Latitude
          type: string
          pattern: >-
            ^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$
          description: >-
            The API data type Latitude is a JSON String in a lexical format that
            is restricted by a regular expression for interoperability reasons.
          example: '+45.4215'
        longitude:
          title: Longitude
          type: string
          pattern: >-
            ^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$
          description: >-
            The API data type Longitude is a JSON String in a lexical format
            that is restricted by a regular expression for interoperability
            reasons.
          example: '+75.6972'
      required: &ref_12
        - latitude
        - longitude
    IlpPacket:
      title: IlpPacket
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      minLength: 1
      maxLength: 32768
      description: Information for recipient (transport layer information).
      example: >-
        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
    IlpCondition:
      title: IlpCondition
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Condition that must be attached to the transfer by the Payer.
    ExtensionKey:
      title: ExtensionKey
      type: string
      minLength: 1
      maxLength: 32
      description: Extension key.
    ExtensionValue:
      title: ExtensionValue
      type: string
      minLength: 1
      maxLength: 128
      description: Extension value.
    Extension:
      title: Extension
      type: object
      description: Data model for the complex type Extension.
      properties: &ref_7
        key:
          title: ExtensionKey
          type: string
          minLength: 1
          maxLength: 32
          description: Extension key.
        value:
          title: ExtensionValue
          type: string
          minLength: 1
          maxLength: 128
          description: Extension value.
      required: &ref_8
        - key
        - value
    ExtensionList:
      title: ExtensionList
      type: object
      description: >-
        Data model for the complex type ExtensionList. An optional list of
        extensions, specific to deployment.
      properties: &ref_13
        extension:
          type: array
          items:
            title: Extension
            type: object
            description: Data model for the complex type Extension.
            properties: *ref_7
            required: *ref_8
          minItems: 1
          maxItems: 16
          description: Number of Extension elements.
      required: &ref_14
        - extension
    QuotesIDPutResponse:
      title: QuotesIDPutResponse
      type: object
      description: 'The object sent in the PUT /quotes/{ID} callback.'
      properties: &ref_16
        transferAmount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties: *ref_9
          required: *ref_10
        payeeReceiveAmount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties: *ref_9
          required: *ref_10
        payeeFspFee:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties: *ref_9
          required: *ref_10
        payeeFspCommission:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties: *ref_9
          required: *ref_10
        expiration:
          title: DateTime
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
          description: >-
            The API data type DateTime is a JSON String in a lexical format that
            is restricted by a regular expression for interoperability reasons.
            The format is according to [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html),
            expressed in a combined date, time and time zone format. A more
            readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
            Examples are "2016-05-24T08:38:08.699-04:00",
            "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same
            as UTC).
          example: '2016-05-24T08:38:08.699-04:00'
        geoCode:
          title: GeoCode
          type: object
          description: >-
            Data model for the complex type GeoCode. Indicates the geographic
            location from where the transaction was initiated.
          properties: *ref_11
          required: *ref_12
        ilpPacket:
          title: IlpPacket
          type: string
          pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
          minLength: 1
          maxLength: 32768
          description: Information for recipient (transport layer information).
          example: >-
            AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
        condition:
          title: IlpCondition
          type: string
          pattern: '^[A-Za-z0-9-_]{43}$'
          maxLength: 48
          description: Condition that must be attached to the transfer by the Payer.
        extensionList:
          title: ExtensionList
          type: object
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          properties: *ref_13
          required: *ref_14
      required: &ref_17
        - transferAmount
        - expiration
        - ilpPacket
        - condition
    AuthorizationsPostRequest:
      title: AuthorizationsPostRequest
      description: POST /authorizations request object.
      type: object
      properties:
        authenticationType:
          title: AuthorizationChannelType
          type: string
          enum: *ref_15
          description: >
            Below are the allowed values for the enumeration
            AuthorizationChannelType.

            - OTP - One-time password generated by the Payer FSP.

            - QRCODE - QR code used as One Time Password.

            - U2F - U2F is a new addition isolated to Thirdparty stream.


            This is based on FSPIOP `AuthenticationType` with U2F added.
          example: U2F
        retriesLeft:
          title: Integer
          type: string
          pattern: '^[1-9]\d*$'
          description: >-
            The API data type Integer is a JSON String consisting of digits
            only. Negative numbers and leading zeroes are not allowed. The data
            type is always limited to a specific number of digits.
        amount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties: *ref_9
          required: *ref_10
        transactionId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        transactionRequestId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        quote:
          title: QuotesIDPutResponse
          type: object
          description: 'The object sent in the PUT /quotes/{ID} callback.'
          properties: *ref_16
          required: *ref_17
      required:
        - authenticationType
        - retriesLeft
        - amount
        - transactionId
        - transactionRequestId
        - quote
      additionalProperties: false
    BinaryString:
      type: string
      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
      description: >-
        The API data type BinaryString is a JSON String. The string is a
        base64url  encoding of a string of raw bytes, where padding (character
        ‘=’) is added at the end of the data if needed to ensure that the string
        is a multiple of 4 characters. The length restriction indicates the
        allowed number of characters.
    ConsentRequestChannelType:
      title: ConsentRequestChannelType
      type: string
      enum: &ref_23
        - WEB
        - OTP
      description: |
        The auth channel being used for the consentRequest.
        - "WEB" - The Web auth channel.
        - "OTP" - The OTP auth channel.
    ConsentRequestChannelTypeOTP:
      title: ConsentRequestChannelTypeOTP
      type: string
      enum: &ref_21
        - OTP
      description: |
        The OTP auth channel being used for PUT consentRequest/{ID} request.
    ConsentRequestChannelTypeWeb:
      title: ConsentRequestChannelTypeWeb
      type: string
      enum: &ref_22
        - WEB
      description: |
        The web auth channel being used for PUT consentRequest/{ID} request.
    ConsentRequestsIDPatchRequest:
      title: ConsentRequestsIDPatchRequest
      type: object
      description: 'The object sent in a `PATCH /consentRequests/{ID}` request.'
      properties:
        authToken:
          title: OtpValue
          type: string
          pattern: '^\d{3,10}$'
          description: >-
            The API data type OtpValue is a JSON String of 3 to 10 characters,
            consisting of digits only. Negative numbers are not allowed. One or
            more leading zeros are allowed.
      required:
        - authToken
    ConsentScopeType:
      title: ConsentScopeType
      type: string
      enum: &ref_18
        - accounts.getBalance
        - accounts.transfer
      description: |
        The scopes requested for a ConsentRequest.
        - "accounts.getBalance" - Get the balance of a given account.
        - "accounts.transfer" - Initiate a transfer from an account.
    Scope:
      title: Scope
      type: object
      description: Scope + Account Identifier mapping for a Consent.
      example: |
        {
          accountId: "dfsp.username.5678",
          actions: [ "accounts.transfer", "accounts.getBalance" ]
        }
      properties: &ref_19
        accountId:
          title: AccountAddress
          type: string
          description: >
            A long-lived unique account identifier provided by the DFSP. This
            MUST NOT

            be Bank Account Number or anything that may expose a User's private
            bank

            account information.
          pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
          minLength: 1
          maxLength: 1023
        actions:
          type: array
          items:
            title: ConsentScopeType
            type: string
            enum: *ref_18
            description: |
              The scopes requested for a ConsentRequest.
              - "accounts.getBalance" - Get the balance of a given account.
              - "accounts.transfer" - Initiate a transfer from an account.
      required: &ref_20
        - accountId
        - actions
    ConsentRequestsIDPutResponseOTP:
      title: ConsentRequestsIDPutResponseOTP
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the request consent phase of the account linking OTP/SMS
        flow.
      properties:
        initiatorId:
          type: string
          description: >-
            The id of the PISP who will initiate transactions on a user's
            behalf.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        authChannels:
          type: array
          items:
            title: ConsentRequestChannelTypeOTP
            type: string
            enum: *ref_21
            description: >
              The OTP auth channel being used for PUT consentRequest/{ID}
              request.
        callbackUri:
          type: string
          description: >-
            The callback uri that the user will be redirected to after
            completing the WEB auth channel.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
      additionalProperties: false
    ConsentRequestsIDPutResponseOTPAuth:
      title: ConsentRequestsIDPutResponseOTPAuth
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the authentication phase of the account linking flow,

        the user is expected to prove their identity to the DFSP by passing a
        OTP

        or secret to the PISP.
      properties:
        initiatorId:
          type: string
          description: >-
            The id of the PISP who will initiate transactions on a user's
            behalf.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        authChannels:
          type: array
          items:
            title: ConsentRequestChannelTypeOTP
            type: string
            enum: *ref_21
            description: >
              The OTP auth channel being used for PUT consentRequest/{ID}
              request.
        callbackUri:
          type: string
          description: >-
            The callback uri that the user will be redirected to after
            completing the WEB auth channel.
        authToken:
          type: string
          description: The Auth token from the OTP or redirect to pisp app.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authToken
      additionalProperties: false
    ConsentRequestsIDPutResponseWeb:
      title: ConsentRequestsIDPutResponseWeb
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the request consent phase of the account linking web
        flow,

        the result is the PISP being instructed on a specific URL where this

        supposed user should be redirected. This URL should be a place where

        the user can prove their identity (e.g., by logging in).
      properties:
        initiatorId:
          type: string
          description: >-
            The id of the PISP who will initiate transactions on a user's
            behalf.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        authChannels:
          type: array
          items:
            title: ConsentRequestChannelTypeWeb
            type: string
            enum: *ref_22
            description: >
              The web auth channel being used for PUT consentRequest/{ID}
              request.
        callbackUri:
          type: string
          description: >-
            The callback uri that the user will be redirected to after
            completing the WEB auth channel.
        authUri:
          type: string
          description: >-
            The callback uri that the pisp app redirects to for user to complete
            their login.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authUri
      additionalProperties: false
    ConsentRequestsIDPutResponseWebAuth:
      title: ConsentRequestsIDPutResponseWebAuth
      type: object
      description: >
        The object sent in a `PUT /consentRequests/{ID}` request.


        Schema used in the authentication phase of the account linking flow,

        the user is expected to prove their identity to the DFSP by passing a
        OTP

        or secret to the PISP.
      properties:
        initiatorId:
          type: string
          description: >-
            The id of the PISP who will initiate transactions on a user's
            behalf.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        authChannels:
          type: array
          items:
            title: ConsentRequestChannelTypeWeb
            type: string
            enum: *ref_22
            description: >
              The web auth channel being used for PUT consentRequest/{ID}
              request.
        callbackUri:
          type: string
          description: >-
            The callback uri that the user will be redirected to after
            completing the WEB auth channel.
        authUri:
          type: string
          description: >-
            The callback uri that the pisp app redirects to for user to complete
            their login.
        authToken:
          type: string
          description: The Auth token from the OTP or redirect to pisp app.
      required:
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authUri
        - authToken
      additionalProperties: false
    ConsentRequestsPostRequest:
      title: ConsentRequestsPostRequest
      type: object
      description: The object sent in a `POST /consentRequests` request.
      properties:
        id:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        initiatorId:
          type: string
          description: >-
            The id of the PISP who will initiate transactions on a user's
            behalf.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        authChannels:
          type: array
          items:
            title: ConsentRequestChannelType
            type: string
            enum: *ref_23
            description: |
              The auth channel being used for the consentRequest.
              - "WEB" - The Web auth channel.
              - "OTP" - The OTP auth channel.
        callbackUri:
          type: string
          description: >-
            The callback uri that the user will be redirected to after
            completing the WEB auth channel.
      required:
        - id
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
    CredentialType:
      title: CredentialType
      type: string
      enum: &ref_24
        - FIDO
      description: |
        The type of the Credential.
        - "FIDO" - A FIDO public/private keypair.
    ConsentsIDGenerateChallengePostRequest:
      title: ConsentsIDGenerateChallengePostRequest
      type: object
      description: |
        A credential used to allow a user to prove their identity
        and access to an account with a DFSP.
      properties:
        type:
          title: CredentialType
          type: string
          enum: *ref_24
          description: |
            The type of the Credential.
            - "FIDO" - A FIDO public/private keypair.
      required:
        - type
    ConsentStatusType:
      title: ConsentStatusType
      type: string
      enum: &ref_25
        - REVOKED
      description: |
        The status of the Consent.
        - "REVOKED" - The Consent is no longer valid and has been revoked.
    ConsentsIDPatchResponse:
      title: ConsentsIDPatchResponse
      description: |
        PATCH /consents/{ID} request object.

        Sent to both the PISP and DFSP when a consent is revoked.
      type: object
      properties:
        status:
          title: ConsentStatusType
          type: string
          enum: *ref_25
          description: |
            The status of the Consent.
            - "REVOKED" - The Consent is no longer valid and has been revoked.
        revokedAt:
          title: DateTime
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
          description: >-
            The API data type DateTime is a JSON String in a lexical format that
            is restricted by a regular expression for interoperability reasons.
            The format is according to [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html),
            expressed in a combined date, time and time zone format. A more
            readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
            Examples are "2016-05-24T08:38:08.699-04:00",
            "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same
            as UTC).
          example: '2016-05-24T08:38:08.699-04:00'
      required:
        - status
        - revokedAt
    FspId:
      title: FspId
      type: string
      minLength: 1
      maxLength: 32
      description: FSP identifier.
    CredentialChallengeSigned:
      title: CredentialChallengeSigned
      type: object
      description: |
        The challenge that has been signed by a PISP.
      properties: &ref_26
        payload:
          type: string
          description: >-
            Base64 encoded binary of the challenge that must be answered by the
            PISP.
        signature:
          type: string
          description: >-
            Base64 encoded binary string or result of the payload signed by the
            PISP using the private key.
      required: &ref_27
        - payload
        - signature
      additionalProperties: false
    SignedCredential:
      title: SignedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        SignedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be PENDING
        when updating

        a credential.
      properties: &ref_28
        id:
          type: string
          description: The id of a Credential.
        type:
          title: CredentialType
          type: string
          enum: *ref_24
          description: |
            The type of the Credential.
            - "FIDO" - A FIDO public/private keypair.
        status:
          type: string
          enum:
            - PENDING
          description: The challenge has signed but not yet verified.
        challenge:
          title: CredentialChallengeSigned
          type: object
          description: |
            The challenge that has been signed by a PISP.
          properties: *ref_26
          required: *ref_27
          additionalProperties: false
        payload:
          type: string
          description: Base64 encoded bytes - The public key of the Public/Private keypair.
      required: &ref_29
        - id
        - type
        - status
        - challenge
        - payload
      additionalProperties: false
    ConsentsIDPutResponseSigned:
      title: ConsentsIDPutResponseSigned
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the PISP to update a
        Consent

        with a signed challenge and register a credential.


        Called by a `PISP` to after signing a challenge. Sent to an
        `auth-service` for verification.
      properties:
        requestId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: |
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent.
        participantId:
          title: FspId
          type: string
          minLength: 1
          maxLength: 32
          description: FSP identifier.
        initiatorId:
          allOf:
            - title: FspId
              type: string
              minLength: 1
              maxLength: 32
              description: FSP identifier.
          description: PISP identifier who uses this Consent.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        credential:
          title: SignedCredential
          type: object
          description: >
            A credential used to allow a user to prove their identity and access

            to an account with a DFSP.


            SignedCredential is a special formatting of the credential to allow
            us to be

            more explicit about the `status` field - it should only ever be
            PENDING when updating

            a credential.
          properties: *ref_28
          required: *ref_29
          additionalProperties: false
      required:
        - requestId
        - participantId
        - initiatorId
        - scopes
        - credential
    CredentialChallengeUnsigned:
      title: CredentialChallengeSigned
      type: object
      description: |
        The challenge issued by a DFSP that must be answered by the PISP.
      properties: &ref_30
        payload:
          type: string
          description: >-
            Base64 encoded binary of the challenge that must be answered by the
            PISP.
      required: &ref_31
        - payload
      additionalProperties: false
    UnsignedCredential:
      title: UnsignedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        UnsignedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be PENDING
        when updating

        a credential.
      properties: &ref_32
        type:
          title: CredentialType
          type: string
          enum: *ref_24
          description: |
            The type of the Credential.
            - "FIDO" - A FIDO public/private keypair.
        status:
          type: string
          enum:
            - PENDING
          description: The challenge has initialized but not yet answered by the PISP.
        challenge:
          title: CredentialChallengeSigned
          type: object
          description: |
            The challenge issued by a DFSP that must be answered by the PISP.
          properties: *ref_30
          required: *ref_31
          additionalProperties: false
      required: &ref_33
        - type
        - status
        - challenge
      additionalProperties: false
    ConsentsIDPutResponseUnsigned:
      title: ConsentsIDPutResponseUnsigned
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used to request a PISP to sign
        a challenge.

        The `{ID}` in the URI should contain the `{ID}` that was used in the
        `POST /consents`.


        Called by a `auth-service` to request PISP to add the credential
        details.
      properties:
        requestId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: |
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent.
        participantId:
          title: FspId
          type: string
          minLength: 1
          maxLength: 32
          description: FSP identifier.
        initiatorId:
          allOf:
            - title: FspId
              type: string
              minLength: 1
              maxLength: 32
              description: FSP identifier.
          description: PISP identifier who uses this Consent.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        credential:
          title: UnsignedCredential
          type: object
          description: >
            A credential used to allow a user to prove their identity and access

            to an account with a DFSP.


            UnsignedCredential is a special formatting of the credential to
            allow us to be

            more explicit about the `status` field - it should only ever be
            PENDING when updating

            a credential.
          properties: *ref_32
          required: *ref_33
          additionalProperties: false
      required:
        - requestId
        - participantId
        - initiatorId
        - scopes
        - credential
    VerifiedCredential:
      title: VerifiedCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access

        to an account with a DFSP.


        VerifiedCredential is a special formatting of the credential to allow us
        to be

        more explicit about the `status` field - it should only ever be VERIFIED
        when updating

        a credential.
      properties: &ref_34
        id:
          type: string
          description: The id of a Credential.
        type:
          title: CredentialType
          type: string
          enum: *ref_24
          description: |
            The type of the Credential.
            - "FIDO" - A FIDO public/private keypair.
        status:
          type: string
          enum:
            - VERIFIED
          description: 'The Credential is valid, and ready to be used by the PISP.'
        challenge:
          title: CredentialChallengeSigned
          type: object
          description: |
            The challenge that has been signed by a PISP.
          properties: *ref_26
          required: *ref_27
          additionalProperties: false
        payload:
          type: string
          description: Base64 encoded bytes - The public key of the Public/Private keypair.
      required: &ref_35
        - type
        - status
        - challenge
      additionalProperties: false
    ConsentsIDPutResponseVerified:
      title: ConsentsIDPutResponseVerified
      type: object
      description: >
        The HTTP request `PUT /consents/{ID}` is used by the DFSP or
        Auth-Service to

        update a Consent object once it has been Verified.


        Called by a `auth-service` to notify a DFSP and PISP that a credential
        has been verified and registered.
      properties:
        requestId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: |
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent.
        participantId:
          title: FspId
          type: string
          minLength: 1
          maxLength: 32
          description: FSP identifier.
        initiatorId:
          allOf:
            - title: FspId
              type: string
              minLength: 1
              maxLength: 32
              description: FSP identifier.
          description: PISP identifier who uses this Consent.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
        credential:
          title: VerifiedCredential
          type: object
          description: >
            A credential used to allow a user to prove their identity and access

            to an account with a DFSP.


            VerifiedCredential is a special formatting of the credential to
            allow us to be

            more explicit about the `status` field - it should only ever be
            VERIFIED when updating

            a credential.
          properties: *ref_34
          required: *ref_35
          additionalProperties: false
      required:
        - requestId
        - participantId
        - initiatorId
        - scopes
        - credential
    ConsentsPostRequest:
      title: ConsentPostRequest
      type: object
      description: The object sent in a `POST /consents` request.
      properties:
        consentId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: |
            Common ID between the PISP and FSP for the Consent object
            decided by the DFSP who creates the Consent
            This field is REQUIRED for POST /consent.
        consentRequestId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: |
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent.
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties: *ref_19
            required: *ref_20
      required:
        - consentId
        - consentRequestId
        - scopes
    ErrorCode:
      title: ErrorCode
      type: string
      pattern: '^[1-9]\d{3}$'
      description: >-
        The API data type ErrorCode is a JSON String of four characters,
        consisting of digits only. Negative numbers are not allowed. A leading
        zero is not allowed. Each error code in the API is a four-digit number,
        for example, 1234, where the first number (1 in the example) represents
        the high-level error category, the second number (2 in the example)
        represents the low-level error category, and the last two numbers (34 in
        the example) represent the specific error.
      example: '5100'
    ErrorDescription:
      title: ErrorDescription
      type: string
      minLength: 1
      maxLength: 128
      description: Error description string.
    ErrorInformation:
      title: ErrorInformation
      type: object
      description: Data model for the complex type ErrorInformation.
      properties: &ref_53
        errorCode:
          title: ErrorCode
          type: string
          pattern: '^[1-9]\d{3}$'
          description: >-
            The API data type ErrorCode is a JSON String of four characters,
            consisting of digits only. Negative numbers are not allowed. A
            leading zero is not allowed. Each error code in the API is a
            four-digit number, for example, 1234, where the first number (1 in
            the example) represents the high-level error category, the second
            number (2 in the example) represents the low-level error category,
            and the last two numbers (34 in the example) represent the specific
            error.
          example: '5100'
        errorDescription:
          title: ErrorDescription
          type: string
          minLength: 1
          maxLength: 128
          description: Error description string.
        extensionList:
          title: ExtensionList
          type: object
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          properties: *ref_13
          required: *ref_14
      required: &ref_54
        - errorCode
        - errorDescription
    DateOfBirth:
      title: DateofBirth (type Date)
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
      description: Date of Birth of the Party.
      example: '1966-06-16'
    FirstName:
      title: FirstName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: First name of the Party (Name Type).
      example: Henrik
    LastName:
      title: LastName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Last name of the Party (Name Type).
      example: Karlsson
    IlpFulfilment:
      title: IlpFulfilment
      type: string
      pattern: '^[A-Za-z0-9-_]{43}$'
      maxLength: 48
      description: Fulfilment that must be attached to the transfer by the Payee.
      example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
    PartyIdType:
      title: PartyIdType
      type: string
      enum: &ref_36
        - MSISDN
        - EMAIL
        - PERSONAL_ID
        - BUSINESS
        - DEVICE
        - ACCOUNT_ID
        - IBAN
        - ALIAS
        - CONSENT
        - THIRD_PARTY_LINK
      description: >
        This is a variant based on FSPIOP `PartyIdType` specification.

        Main difference being the CONSENT and THIRD_PARTY_LINK enums.


        Below are the allowed values for the enumeration.

        - MSISDN - An MSISDN (Mobile Station International Subscriber Directory

        Number, that is, the phone number) is used as reference to a
        participant.

        The MSISDN identifier should be in international format according to the

        [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).

        Optionally, the MSISDN may be prefixed by a single plus sign, indicating
        the

        international prefix.

        - EMAIL - An email is used as reference to a

        participant. The format of the email should be according to the
        informational

        [RFC 3696](https://tools.ietf.org/html/rfc3696).

        - PERSONAL_ID - A personal identifier is used as reference to a
        participant.

        Examples of personal identification are passport number, birth
        certificate

        number, and national registration number. The identifier number is added
        in

        the PartyIdentifier element. The personal identifier type is added in
        the

        PartySubIdOrType element.

        - BUSINESS - A specific Business (for example, an organization or a
        company)

        is used as reference to a participant. The BUSINESS identifier can be in
        any

        format. To make a transaction connected to a specific username or bill
        number

        in a Business, the PartySubIdOrType element should be used.

        - DEVICE - A specific device (for example, a POS or ATM) ID connected to
        a

        specific business or organization is used as reference to a Party.

        For referencing a specific device under a specific business or
        organization,

        use the PartySubIdOrType element.

        - ACCOUNT_ID - A bank account number or FSP account ID should be used as

        reference to a participant. The ACCOUNT_ID identifier can be in any
        format,

        as formats can greatly differ depending on country and FSP.

        - IBAN - A bank account number or FSP account ID is used as reference to
        a

        participant. The IBAN identifier can consist of up to 34 alphanumeric

        characters and should be entered without whitespace.

        - ALIAS An alias is used as reference to a participant. The alias should
        be

        created in the FSP as an alternative reference to an account owner.

        Another example of an alias is a username in the FSP system.

        The ALIAS identifier can be in any format. It is also possible to use
        the

        PartySubIdOrType element for identifying an account under an Alias
        defined

        by the PartyIdentifier.

        - CONSENT - TBD

        - THIRD_PARTY_LINK - TBD
      example: PERSONAL_ID
    PartyIdentifier:
      title: PartyIdentifier
      type: string
      minLength: 1
      maxLength: 128
      description: Identifier of the Party.
      example: '16135551212'
    PartySubIdOrType:
      title: PartySubIdOrType
      type: string
      minLength: 1
      maxLength: 128
      description: >-
        Either a sub-identifier of a PartyIdentifier, or a sub-type of the
        PartyIdType, normally a PersonalIdentifierType.
    PartyIdInfo:
      title: PartyIdInfo
      type: object
      description: Data model for the complex type PartyIdInfo.
      properties: &ref_40
        partyIdType:
          title: PartyIdType
          type: string
          enum: *ref_36
          description: >
            This is a variant based on FSPIOP `PartyIdType` specification.

            Main difference being the CONSENT and THIRD_PARTY_LINK enums.


            Below are the allowed values for the enumeration.

            - MSISDN - An MSISDN (Mobile Station International Subscriber
            Directory

            Number, that is, the phone number) is used as reference to a
            participant.

            The MSISDN identifier should be in international format according to
            the

            [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).

            Optionally, the MSISDN may be prefixed by a single plus sign,
            indicating the

            international prefix.

            - EMAIL - An email is used as reference to a

            participant. The format of the email should be according to the
            informational

            [RFC 3696](https://tools.ietf.org/html/rfc3696).

            - PERSONAL_ID - A personal identifier is used as reference to a
            participant.

            Examples of personal identification are passport number, birth
            certificate

            number, and national registration number. The identifier number is
            added in

            the PartyIdentifier element. The personal identifier type is added
            in the

            PartySubIdOrType element.

            - BUSINESS - A specific Business (for example, an organization or a
            company)

            is used as reference to a participant. The BUSINESS identifier can
            be in any

            format. To make a transaction connected to a specific username or
            bill number

            in a Business, the PartySubIdOrType element should be used.

            - DEVICE - A specific device (for example, a POS or ATM) ID
            connected to a

            specific business or organization is used as reference to a Party.

            For referencing a specific device under a specific business or
            organization,

            use the PartySubIdOrType element.

            - ACCOUNT_ID - A bank account number or FSP account ID should be
            used as

            reference to a participant. The ACCOUNT_ID identifier can be in any
            format,

            as formats can greatly differ depending on country and FSP.

            - IBAN - A bank account number or FSP account ID is used as
            reference to a

            participant. The IBAN identifier can consist of up to 34
            alphanumeric

            characters and should be entered without whitespace.

            - ALIAS An alias is used as reference to a participant. The alias
            should be

            created in the FSP as an alternative reference to an account owner.

            Another example of an alias is a username in the FSP system.

            The ALIAS identifier can be in any format. It is also possible to
            use the

            PartySubIdOrType element for identifying an account under an Alias
            defined

            by the PartyIdentifier.

            - CONSENT - TBD

            - THIRD_PARTY_LINK - TBD
          example: PERSONAL_ID
        partyIdentifier:
          title: PartyIdentifier
          type: string
          minLength: 1
          maxLength: 128
          description: Identifier of the Party.
          example: '16135551212'
        partySubIdOrType:
          title: PartySubIdOrType
          type: string
          minLength: 1
          maxLength: 128
          description: >-
            Either a sub-identifier of a PartyIdentifier, or a sub-type of the
            PartyIdType, normally a PersonalIdentifierType.
        fspId:
          title: FspId
          type: string
          minLength: 1
          maxLength: 32
          description: FSP identifier.
        extensionList:
          title: ExtensionList
          type: object
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          properties: *ref_13
          required: *ref_14
      required: &ref_41
        - partyIdType
        - partyIdentifier
    MerchantClassificationCode:
      title: MerchantClassificationCode
      type: string
      pattern: '^[\d]{1,4}$'
      description: >-
        A limited set of pre-defined numbers. This list would be a limited set
        of numbers identifying a set of popular merchant types like School Fees,
        Pubs and Restaurants, Groceries, etc.
    PartyName:
      title: PartyName
      type: string
      minLength: 1
      maxLength: 128
      description: Name of the Party. Could be a real name or a nickname.
    MiddleName:
      title: MiddleName
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
      description: Middle name of the Party (Name Type).
      example: Johannes
    PartyComplexName:
      title: PartyComplexName
      type: object
      description: Data model for the complex type PartyComplexName.
      properties: &ref_37
        firstName:
          title: FirstName
          type: string
          minLength: 1
          maxLength: 128
          pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
          description: First name of the Party (Name Type).
          example: Henrik
        middleName:
          title: MiddleName
          type: string
          minLength: 1
          maxLength: 128
          pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
          description: Middle name of the Party (Name Type).
          example: Johannes
        lastName:
          title: LastName
          type: string
          minLength: 1
          maxLength: 128
          pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
          description: Last name of the Party (Name Type).
          example: Karlsson
    PartyPersonalInfo:
      title: PartyPersonalInfo
      type: object
      description: Data model for the complex type PartyPersonalInfo.
      properties: &ref_42
        complexName:
          title: PartyComplexName
          type: object
          description: Data model for the complex type PartyComplexName.
          properties: *ref_37
        dateOfBirth:
          title: DateofBirth (type Date)
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
          description: Date of Birth of the Party.
          example: '1966-06-16'
    Party:
      title: Party
      type: object
      description: Data model for the complex type Party.
      properties: &ref_48
        accounts:
          title: AccountList
          type: object
          description: Data model for the complex type AccountList.
          properties: *ref_38
          required: *ref_39
        partyIdInfo:
          title: PartyIdInfo
          type: object
          description: Data model for the complex type PartyIdInfo.
          properties: *ref_40
          required: *ref_41
        merchantClassificationCode:
          title: MerchantClassificationCode
          type: string
          pattern: '^[\d]{1,4}$'
          description: >-
            A limited set of pre-defined numbers. This list would be a limited
            set of numbers identifying a set of popular merchant types like
            School Fees, Pubs and Restaurants, Groceries, etc.
        name:
          title: PartyName
          type: string
          minLength: 1
          maxLength: 128
          description: Name of the Party. Could be a real name or a nickname.
        personalInfo:
          title: PartyPersonalInfo
          type: object
          description: Data model for the complex type PartyPersonalInfo.
          properties: *ref_42
      required: &ref_49
        - partyIdInfo
    TransactionScenario:
      title: TransactionScenario
      type: string
      enum: &ref_43
        - DEPOSIT
        - WITHDRAWAL
        - TRANSFER
        - PAYMENT
        - REFUND
      description: >-
        Below are the allowed values for the enumeration.

        - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a
        normal scenario, electronic funds are transferred from a Business
        account to a Consumer account, and physical cash is given from the
        Consumer to the Business User.

        - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
        In a normal scenario, electronic funds are transferred from a Consumer’s
        account to a Business account, and physical cash is given from the
        Business User to the Consumer.

        - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to
        Consumer) transaction.

        - PAYMENT - Usually used for performing a transaction from a Consumer to
        a Merchant or Organization, but could also be for a B2B (Business to
        Business) payment. The transaction could be online for a purchase in an
        Internet store, in a physical store where both the Consumer and Business
        User are present, a bill payment, a donation, and so on.

        - REFUND - Used for performing a refund of transaction.
      example: DEPOSIT
    TransactionSubScenario:
      title: TransactionSubScenario
      type: string
      pattern: '^[A-Z_]{1,32}$'
      description: >-
        Possible sub-scenario, defined locally within the scheme (UndefinedEnum
        Type).
      example: LOCALLY_DEFINED_SUBSCENARIO
    TransactionInitiator:
      title: TransactionInitiator
      type: string
      enum: &ref_44
        - PAYER
        - PAYEE
      description: >-
        Below are the allowed values for the enumeration.

        - PAYER - Sender of funds is initiating the transaction. The account to
        send from is either owned by the Payer or is connected to the Payer in
        some way.

        - PAYEE - Recipient of the funds is initiating the transaction by
        sending a transaction request. The Payer must approve the transaction,
        either automatically by a pre-generated OTP or by pre-approval of the
        Payee, or by manually approving in his or her own Device.
      example: PAYEE
    TransactionInitiatorType:
      title: TransactionInitiatorType
      type: string
      enum: &ref_45
        - CONSUMER
        - AGENT
        - BUSINESS
        - DEVICE
      description: |-
        Below are the allowed values for the enumeration.
        - CONSUMER - Consumer is the initiator of the transaction.
        - AGENT - Agent is the initiator of the transaction.
        - BUSINESS - Business is the initiator of the transaction.
        - DEVICE - Device is the initiator of the transaction.
      example: CONSUMER
    RefundReason:
      title: RefundReason
      type: string
      minLength: 1
      maxLength: 128
      description: Reason for the refund.
      example: Free text indicating reason for the refund.
    Refund:
      title: Refund
      type: object
      description: Data model for the complex type Refund.
      properties: &ref_46
        originalTransactionId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        refundReason:
          title: RefundReason
          type: string
          minLength: 1
          maxLength: 128
          description: Reason for the refund.
          example: Free text indicating reason for the refund.
      required: &ref_47
        - originalTransactionId
    BalanceOfPayments:
      title: BalanceOfPayments
      type: string
      pattern: '^[1-9]\d{2}$'
      description: >-
        (BopCode) The API data type
        [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String
        of 3 characters, consisting of digits only. Negative numbers are not
        allowed. A leading zero is not allowed.
      example: '123'
    TransactionType:
      title: TransactionType
      type: object
      description: Data model for the complex type TransactionType.
      properties: &ref_51
        scenario:
          title: TransactionScenario
          type: string
          enum: *ref_43
          description: >-
            Below are the allowed values for the enumeration.

            - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In
            a normal scenario, electronic funds are transferred from a Business
            account to a Consumer account, and physical cash is given from the
            Consumer to the Business User.

            - WITHDRAWAL - Used for performing a Cash-Out (withdrawal)
            transaction. In a normal scenario, electronic funds are transferred
            from a Consumer’s account to a Business account, and physical cash
            is given from the Business User to the Consumer.

            - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to
            Consumer) transaction.

            - PAYMENT - Usually used for performing a transaction from a
            Consumer to a Merchant or Organization, but could also be for a B2B
            (Business to Business) payment. The transaction could be online for
            a purchase in an Internet store, in a physical store where both the
            Consumer and Business User are present, a bill payment, a donation,
            and so on.

            - REFUND - Used for performing a refund of transaction.
          example: DEPOSIT
        subScenario:
          title: TransactionSubScenario
          type: string
          pattern: '^[A-Z_]{1,32}$'
          description: >-
            Possible sub-scenario, defined locally within the scheme
            (UndefinedEnum Type).
          example: LOCALLY_DEFINED_SUBSCENARIO
        initiator:
          title: TransactionInitiator
          type: string
          enum: *ref_44
          description: >-
            Below are the allowed values for the enumeration.

            - PAYER - Sender of funds is initiating the transaction. The account
            to send from is either owned by the Payer or is connected to the
            Payer in some way.

            - PAYEE - Recipient of the funds is initiating the transaction by
            sending a transaction request. The Payer must approve the
            transaction, either automatically by a pre-generated OTP or by
            pre-approval of the Payee, or by manually approving in his or her
            own Device.
          example: PAYEE
        initiatorType:
          title: TransactionInitiatorType
          type: string
          enum: *ref_45
          description: |-
            Below are the allowed values for the enumeration.
            - CONSUMER - Consumer is the initiator of the transaction.
            - AGENT - Agent is the initiator of the transaction.
            - BUSINESS - Business is the initiator of the transaction.
            - DEVICE - Device is the initiator of the transaction.
          example: CONSUMER
        refundInfo:
          title: Refund
          type: object
          description: Data model for the complex type Refund.
          properties: *ref_46
          required: *ref_47
        balanceOfPayments:
          title: BalanceOfPayments
          type: string
          pattern: '^[1-9]\d{2}$'
          description: >-
            (BopCode) The API data type
            [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON
            String of 3 characters, consisting of digits only. Negative numbers
            are not allowed. A leading zero is not allowed.
          example: '123'
      required: &ref_52
        - scenario
        - initiator
        - initiatorType
    Note:
      title: Note
      type: string
      minLength: 1
      maxLength: 128
      description: Memo assigned to transaction.
      example: Note sent to Payee.
    IndividualQuote:
      title: IndividualQuote
      type: object
      description: Data model for the complex type IndividualQuote.
      properties:
        quoteId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        transactionId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        payee:
          description: Data model for the complex type Party.
          title: Party
          type: object
          properties: *ref_48
          required: *ref_49
        amountType:
          description: >-
            Below are the allowed values for the enumeration AmountType.

            - SEND - Amount the Payer would like to send, that is, the amount
            that should be withdrawn from the Payer account including any fees.

            - RECEIVE - Amount the Payer would like the Payee to receive, that
            is, the amount that should be sent to the receiver exclusive of any
            fees.
          example: RECEIVE
          title: AmountType
          type: string
          enum: *ref_50
        amount:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        fees:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        transactionType:
          description: Data model for the complex type TransactionType.
          title: TransactionType
          type: object
          properties: *ref_51
          required: *ref_52
        note:
          description: Memo assigned to transaction.
          example: Note sent to Payee.
          title: Note
          type: string
          minLength: 1
          maxLength: 128
        extensionList:
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          title: ExtensionList
          type: object
          properties: *ref_13
          required: *ref_14
      required:
        - quoteId
        - transactionId
        - payee
        - amountType
        - amount
        - transactionType
    IndividualQuoteResult:
      title: IndividualQuoteResult
      type: object
      description: Data model for the complex type IndividualQuoteResult.
      properties:
        quoteId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        payee:
          description: Data model for the complex type Party.
          title: Party
          type: object
          properties: *ref_48
          required: *ref_49
        transferAmount:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        payeeReceiveAmount:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        payeeFspFee:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        payeeFspCommission:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        ilpPacket:
          description: Information for recipient (transport layer information).
          example: >-
            AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
          title: IlpPacket
          type: string
          pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
          minLength: 1
          maxLength: 32768
        condition:
          description: Condition that must be attached to the transfer by the Payer.
          example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
          title: IlpCondition
          type: string
          pattern: '^[A-Za-z0-9-_]{43}$'
          maxLength: 48
        errorInformation:
          description: Data model for the complex type ErrorInformation.
          title: ErrorInformation
          type: object
          properties: *ref_53
          required: *ref_54
        extensionList:
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          title: ExtensionList
          type: object
          properties: *ref_13
          required: *ref_14
      required:
        - quoteId
    ParticipantsPostRequest:
      title: ParticipantsPostRequest
      type: object
      description: The object sent in the POST /participants request.
      properties:
        requestId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        partyList:
          type: array
          items:
            title: PartyIdInfo
            type: object
            description: Data model for the complex type PartyIdInfo.
            properties: *ref_40
            required: *ref_41
          minItems: 1
          maxItems: 10000
          description: |
            List of PartyIdInfo elements that the client would like to update
            or create FSP information about.
        currency:
          title: Currency
          description: >-
            The currency codes defined in [ISO
            4217](https://www.iso.org/iso-4217-currency-codes.html) as
            three-letter alphabetic codes are used as the standard naming
            representation for currencies.
          type: string
          minLength: 3
          maxLength: 3
          enum: *ref_0
      required:
        - requestId
        - partyList
    PartiesTypeIDPutResponse:
      title: PartiesTypeIDPutResponse
      type: object
      description: >
        The object sent in the PUT /parties/{Type}/{ID} callback.


        This is a variant based on FSPIOP `PartiesTypeIDPutResponse`
        specification.

        Main difference being that it returns a `Party` with the newly added

        `accounts` property.
      properties:
        party:
          title: Party
          type: object
          description: Data model for the complex type Party.
          properties: *ref_48
          required: *ref_49
      required:
        - party
    PartyResult:
      title: PartyResult
      type: object
      description: Data model for the complex type PartyResult.
      properties:
        partyId:
          description: Data model for the complex type PartyIdInfo.
          title: PartyIdInfo
          type: object
          properties: *ref_40
          required: *ref_41
        errorInformation:
          description: Data model for the complex type ErrorInformation.
          title: ErrorInformation
          type: object
          properties: *ref_53
          required: *ref_54
      required:
        - partyId
    QuotesPostRequest:
      title: QuotesPostRequest
      type: object
      description: The object sent in the POST /quotes request.
      properties:
        quoteId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        transactionId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        transactionRequestId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        payee:
          description: Data model for the complex type Party.
          title: Party
          type: object
          properties: *ref_48
          required: *ref_49
        payer:
          description: Data model for the complex type Party.
          title: Party
          type: object
          properties: *ref_48
          required: *ref_49
        amountType:
          description: >-
            Below are the allowed values for the enumeration AmountType.

            - SEND - Amount the Payer would like to send, that is, the amount
            that should be withdrawn from the Payer account including any fees.

            - RECEIVE - Amount the Payer would like the Payee to receive, that
            is, the amount that should be sent to the receiver exclusive of any
            fees.
          example: RECEIVE
          title: AmountType
          type: string
          enum: *ref_50
        amount:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        fees:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        transactionType:
          description: Data model for the complex type TransactionType.
          title: TransactionType
          type: object
          properties: *ref_51
          required: *ref_52
        geoCode:
          description: >-
            Data model for the complex type GeoCode. Indicates the geographic
            location from where the transaction was initiated.
          title: GeoCode
          type: object
          properties: *ref_11
          required: *ref_12
        note:
          description: Memo assigned to transaction.
          example: Note sent to Payee.
          title: Note
          type: string
          minLength: 1
          maxLength: 128
        expiration:
          description: >-
            The API data type DateTime is a JSON String in a lexical format that
            is restricted by a regular expression for interoperability reasons.
            The format is according to [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html),
            expressed in a combined date, time and time zone format. A more
            readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
            Examples are "2016-05-24T08:38:08.699-04:00",
            "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same
            as UTC).
          example: '2016-05-24T08:38:08.699-04:00'
          title: DateTime
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
        extensionList:
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          title: ExtensionList
          type: object
          properties: *ref_13
          required: *ref_14
      required:
        - quoteId
        - transactionId
        - payee
        - payer
        - amountType
        - amount
        - transactionType
    ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest:
      title: ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest
      type: object
      description: >-
        The object sent in the POST
        /thirdpartyRequests/transactions/{id}/authorizations request.
      properties:
        challenge:
          type: string
          description: Base64 encoded binary string - the original challenge.
        value:
          allOf:
            - type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              description: >-
                The API data type BinaryString is a JSON String. The string is a
                base64url  encoding of a string of raw bytes, where padding
                (character ‘=’) is added at the end of the data if needed to
                ensure that the string is a multiple of 4 characters. The length
                restriction indicates the allowed number of characters.
          description: Base64 encoded binary string - the signed challenge
        consentId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >
            Common ID between the PISP and FSP for the Consent object This tells
            DFSP and auth-service which constent allows the PISP to initiate
            transaction.
        sourceAccountId:
          allOf:
            - title: AccountAddress
              type: string
              description: >
                A long-lived unique account identifier provided by the DFSP.
                This MUST NOT

                be Bank Account Number or anything that may expose a User's
                private bank

                account information.
              pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
              minLength: 1
              maxLength: 1023
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        status:
          type: string
          enum:
            - PENDING
          description: >-
            The status of the authorization. This MUST be PENDING for a POST
            request
      required:
        - challenge
        - value
        - consentId
        - sourceAccountId
        - status
    ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse:
      title: ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse
      type: object
      description: >-
        The object sent in the PUT
        /thirdpartyRequests/transactions/{id}/authorizations request.
      properties:
        challenge:
          type: string
          description: Base64 encoded binary string - the original challenge.
        value:
          allOf:
            - type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              description: >-
                The API data type BinaryString is a JSON String. The string is a
                base64url  encoding of a string of raw bytes, where padding
                (character ‘=’) is added at the end of the data if needed to
                ensure that the string is a multiple of 4 characters. The length
                restriction indicates the allowed number of characters.
          description: Base64 encoded binary string - the signed challenge.
        consentId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >
            Common ID between the PISP and FSP for the Consent object This tells
            DFSP and auth-service which consent allows the PISP to initiate
            transaction.
        sourceAccountId:
          allOf:
            - title: AccountAddress
              type: string
              description: >
                A long-lived unique account identifier provided by the DFSP.
                This MUST NOT

                be Bank Account Number or anything that may expose a User's
                private bank

                account information.
              pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
              minLength: 1
              maxLength: 1023
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        status:
          type: string
          enum:
            - VERIFIED
          description: >-
            The status of the authorization. This value must be `VERIFIED` for a
            PUT request.
      required:
        - challenge
        - value
        - consentId
        - sourceAccountId
        - status
    TransactionRequestState:
      title: TransactionRequestState
      type: string
      enum: &ref_55
        - RECEIVED
        - PENDING
        - ACCEPTED
        - REJECTED
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
        - PENDING - Payer FSP has sent the transaction request to the Payer.
        - ACCEPTED - Payer has approved the transaction.
        - REJECTED - Payer has rejected the transaction.
      example: RECEIVED
    TransactionState:
      title: TransactionState
      type: string
      enum: &ref_56
        - RECEIVED
        - PENDING
        - COMPLETED
        - REJECTED
      description: |-
        Below are the allowed values for the enumeration.
        - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
        - PENDING - Payee FSP has validated the transaction.
        - COMPLETED - Payee FSP has successfully performed the transaction.
        - REJECTED - Payee FSP has failed to perform the transaction.
      example: RECEIVED
    ThirdpartyRequestsTransactionsIDPatchResponse:
      title: ThirdpartyRequestsTransactionsIDPatchResponse
      type: object
      description: >-
        The object sent in the PATCH /thirdpartyRequests/transactions/{ID}
        callback.
      properties:
        transactionId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        transactionRequestState:
          title: TransactionRequestState
          type: string
          enum: *ref_55
          description: >-
            Below are the allowed values for the enumeration.

            - RECEIVED - Payer FSP has received the transaction from the Payee
            FSP.

            - PENDING - Payer FSP has sent the transaction request to the Payer.

            - ACCEPTED - Payer has approved the transaction.

            - REJECTED - Payer has rejected the transaction.
          example: RECEIVED
        transactionState:
          title: TransactionState
          type: string
          enum: *ref_56
          description: >-
            Below are the allowed values for the enumeration.

            - RECEIVED - Payee FSP has received the transaction from the Payer
            FSP.

            - PENDING - Payee FSP has validated the transaction.

            - COMPLETED - Payee FSP has successfully performed the transaction.

            - REJECTED - Payee FSP has failed to perform the transaction.
          example: RECEIVED
      required:
        - transactionId
        - transactionRequestState
        - transactionState
    ThirdpartyRequestsTransactionsIDPutResponse:
      title: ThirdpartyRequestsTransactionsIDPutResponse
      type: object
      description: >-
        The object sent in the PUT /thirdPartyRequests/transactions/{ID}
        request.
      properties:
        transactionId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        transactionRequestState:
          title: TransactionRequestState
          type: string
          enum: *ref_55
          description: >-
            Below are the allowed values for the enumeration.

            - RECEIVED - Payer FSP has received the transaction from the Payee
            FSP.

            - PENDING - Payer FSP has sent the transaction request to the Payer.

            - ACCEPTED - Payer has approved the transaction.

            - REJECTED - Payer has rejected the transaction.
          example: RECEIVED
      required:
        - transactionId
        - transactionRequestState
    ThirdpartyRequestsTransactionsPostRequest:
      title: ThirdpartyRequestsTransactionsPostRequest
      type: object
      description: The object sent in the POST /thirdpartyRequests/transactions request.
      properties:
        transactionRequestId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >
            Common ID between the FSPs for the transaction request object. The
            ID should be reused for resends of the same transaction request. A
            new ID should be generated for each new transaction request.
        sourceAccountId:
          allOf:
            - title: AccountAddress
              type: string
              description: >
                A long-lived unique account identifier provided by the DFSP.
                This MUST NOT

                be Bank Account Number or anything that may expose a User's
                private bank

                account information.
              pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
              minLength: 1
              maxLength: 1023
          description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
        consentId:
          allOf:
            - title: CorrelationId
              type: string
              pattern: >-
                ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
              description: >-
                Identifier that correlates all messages of the same sequence.
                The API data type UUID (Universally Unique Identifier) is a JSON
                String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted
                by a regular expression for interoperability reasons. A UUID is
                always 36 characters long, 32 hexadecimal symbols and 4 dashes
                (‘-‘).
              example: b51ec534-ee48-4575-b6a9-ead2955b8069
          description: >
            Common ID between the PISP and FSP for the Consent object This tells
            DFSP and auth-service which constent allows the PISP to initiate
            transaction.
        payee:
          allOf:
            - title: Party
              type: object
              description: Data model for the complex type Party.
              properties: *ref_48
              required: *ref_49
          description: Information about the Payee in the proposed financial transaction.
        payer:
          allOf:
            - title: Party
              type: object
              description: Data model for the complex type Party.
              properties: *ref_48
              required: *ref_49
          description: Information about the Payer in the proposed financial transaction.
        amountType:
          allOf:
            - title: AmountType
              type: string
              enum: *ref_50
              description: >-
                Below are the allowed values for the enumeration AmountType.

                - SEND - Amount the Payer would like to send, that is, the
                amount that should be withdrawn from the Payer account including
                any fees.

                - RECEIVE - Amount the Payer would like the Payee to receive,
                that is, the amount that should be sent to the receiver
                exclusive of any fees.
              example: RECEIVE
          description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
        amount:
          allOf:
            - title: Money
              type: object
              description: Data model for the complex type Money.
              properties: *ref_9
              required: *ref_10
          description: Requested amount to be transferred from the Payer to Payee.
        transactionType:
          allOf:
            - title: TransactionType
              type: object
              description: Data model for the complex type TransactionType.
              properties: *ref_51
              required: *ref_52
          description: Type of transaction.
        expiration:
          type: string
          description: >
            Date and time until when the transaction request is valid. It can be
            set to get a quick failure in case the peer FSP takes too long to
            respond.
          example: '2016-05-24T08:38:08.699-04:00'
      required:
        - transactionRequestId
        - sourceAccountId
        - consentId
        - payee
        - payer
        - amountType
        - amount
        - transactionType
        - expiration
    TransactionRequestsPostRequest:
      title: TransactionRequestsPostRequest
      type: object
      description: The object sent in the POST /transactionRequests request.
      properties:
        transactionRequestId:
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        payee:
          title: Party
          type: object
          description: Data model for the complex type Party.
          properties: *ref_48
          required: *ref_49
        payer:
          title: PartyIdInfo
          type: object
          description: Data model for the complex type PartyIdInfo.
          properties: *ref_40
          required: *ref_41
        amount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties: *ref_9
          required: *ref_10
        transactionType:
          title: TransactionType
          type: object
          description: Data model for the complex type TransactionType.
          properties: *ref_51
          required: *ref_52
        note:
          title: Note
          type: string
          minLength: 1
          maxLength: 128
          description: Memo assigned to transaction.
          example: Note sent to Payee.
        geoCode:
          title: GeoCode
          type: object
          description: >-
            Data model for the complex type GeoCode. Indicates the geographic
            location from where the transaction was initiated.
          properties: *ref_11
          required: *ref_12
        authenticationType:
          title: AuthenticationType
          type: string
          enum: *ref_5
          description: |-
            Below are the allowed values for the enumeration AuthenticationType.
            - OTP - One-time password generated by the Payer FSP.
            - QRCODE - QR code used as One Time Password.
            - U2F - U2F is a new addition isolated to Thirdparty stream.
        expiration:
          title: DateTime
          type: string
          pattern: >-
            ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
          description: >-
            The API data type DateTime is a JSON String in a lexical format that
            is restricted by a regular expression for interoperability reasons.
            The format is according to [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html),
            expressed in a combined date, time and time zone format. A more
            readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
            Examples are "2016-05-24T08:38:08.699-04:00",
            "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same
            as UTC).
          example: '2016-05-24T08:38:08.699-04:00'
        extensionList:
          title: ExtensionList
          type: object
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          properties: *ref_13
          required: *ref_14
      required:
        - transactionRequestId
        - payee
        - payer
        - amount
        - transactionType
    Transaction:
      title: Transaction
      type: object
      description: >-
        Data model for the complex type Transaction. The Transaction type is
        used to carry end-to-end data between the Payer FSP and the Payee FSP in
        the ILP Packet. Both the transactionId and the quoteId in the data model
        are decided by the Payer FSP in the POST /quotes request.
      properties: &ref_57
        transactionId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        quoteId:
          description: >-
            Identifier that correlates all messages of the same sequence. The
            API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC
            4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
            regular expression for interoperability reasons. A UUID is always 36
            characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          title: CorrelationId
          type: string
          pattern: >-
            ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        payee:
          description: Data model for the complex type Party.
          title: Party
          type: object
          properties: *ref_48
          required: *ref_49
        payer:
          description: Data model for the complex type Party.
          title: Party
          type: object
          properties: *ref_48
          required: *ref_49
        amount:
          description: Data model for the complex type Money.
          title: Money
          type: object
          properties: *ref_9
          required: *ref_10
        transactionType:
          description: Data model for the complex type TransactionType.
          title: TransactionType
          type: object
          properties: *ref_51
          required: *ref_52
        note:
          description: Memo assigned to transaction.
          title: Note
          type: string
          minLength: 1
          maxLength: 128
          example: Note sent to Payee.
        extensionList:
          description: >-
            Data model for the complex type ExtensionList. An optional list of
            extensions, specific to deployment.
          title: ExtensionList
          type: object
          properties: *ref_13
          required: *ref_14
      required: &ref_58
        - transactionId
        - quoteId
        - payee
        - payer
        - amount
        - transactionType
    Transactione:
      title: Transaction
      type: object
      description: >-
        Data model for the complex type Transaction. The Transaction type is
        used to carry end-to-end data between the Payer FSP and the Payee FSP in
        the ILP Packet. Both the transactionId and the quoteId in the data model
        are decided by the Payer FSP in the POST /quotes request.
      properties: *ref_57
      required: *ref_58
