# CircleCI v2.1 Config
version: 2.1

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk --no-cache add bash
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true
    npm install -g node-gyp

defaults_Typescript: &defaults_Typescript |
    npm run build

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_npm_auth: &defaults_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

defaults_npm_publish_release: &defaults_npm_publish_release
  name: Publish NPM $RELEASE_TAG artifact
  command: |
    source $BASH_ENV
    echo "Publishing tag $RELEASE_TAG"
    npm publish --tag $RELEASE_TAG --access public
defaults_npm_publish_version: &defaults_npm_publish
  name: Update version to prerelease
  command: |
    source $BASH_ENV
    echo "Publishing tag $CIRCLE_TAG"
    npm publish --tag $CIRCLE_TAG --access public
defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up
defaults_slack_announcement: &defaults_slack_announcement
  name: Slack announcement for tag releases
  command: |
    curl -X POST \
      $SLACK_WEBHOOK_ANNOUNCEMENT \
      -H 'Content-type: application/json' \
      -H 'cache-control: no-cache' \
      -d "{\"text\": \"*${CIRCLE_PROJECT_REPONAME}* - Release \`${CIRCLE_TAG}\`: https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/${CIRCLE_TAG}\"}"
##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.0-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Update NPM install
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

#  test-unit:
#    executor: default-docker
#    steps:
#      - checkout
#      - run:
#          name: Install general dependencies
#          command: *defaults_Dependencies
#      - restore_cache:
#          key: dependency-cache-{{ checksum "package.json" }}
#      - run:
#          name: Build typescript
#          command: *defaults_Typescript
#      - run:
#          name: Create dir for test results
#          command: mkdir -p ./test/results
#      - run:
#          name: Execute unit tests
#          command: JEST_JUNIT_OUTPUT_DIR='./test/results' JEST_JUNIT_OUTPUT_NAME='junit.xml' npm run test:junit
#      - store_artifacts:
#          path: ./test/results
#          prefix: test
#      - store_test_results:
#          path: ./test/results

#  test-coverage:
#    executor: default-docker
#    steps:
#      - checkout
#      - run:
#          name: Install general dependencies
#          command: *defaults_Dependencies
#      - run:
#          name: Install AWS CLI dependencies
#          command: *defaults_awsCliDependencies
#      - restore_cache:
#          key: dependency-cache-{{ checksum "package.json" }}
#      - run:
#          name: Install tape, tapes and tap-xunit
#          command: npm install tape tapes tap-xunit tap-spec nyc
#      - run:
#          name: Execute code coverage check
#          command: npm -s run test:coverage-check
#      - store_artifacts:
#          path: coverage
#          prefix: test
#      - store_test_results:
#          path: coverage/lcov.info
#      - run:
#          name: Copy code coverage to SonarQube
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "master" ];
#            then
#                echo "Sending lcov.info to SonarQube..."
#                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/central-services-metrics/lcov.info
#            else
#                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
#            fi
  vulnerability-check:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Prune non-production packages before running license-scanner
          command: npm prune --production
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  build-snapshot:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Build typescript
          command: *defaults_Typescript
      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release
      - run:
          <<: *defaults_slack_announcement

  build:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Build typescript
          command: *defaults_Typescript
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release
      - run:
          <<: *defaults_slack_announcement

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      #- test-unit:
      #    context: org-global
      #    requires:
      #      - setup
      #    filters:
      #      tags:
      #        only: /.*/
      #      branches:
      #        ignore:
      #          - /feature*/
      #          - /bugfix*/
      #- test-coverage:
      #    context: org-global
      #    requires:
      #      - setup
      #    filters:
      #      tags:
      #        only: /.*/
      #      branches:
      #        ignore:
      #          - /feature*/
      #          - /bugfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build-snapshot:
          context: org-global
          requires:
            - setup
            #- test-unit
            #- test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/
      - build:
          context: org-global
          requires:
            - setup
            #- test-unit
            #- test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
