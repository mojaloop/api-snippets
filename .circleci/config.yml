# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  slack: circleci/slack@3.4.2
  github-release: h-matsuo/github-release@0.1.3
  pr-tools: mojaloop/pr-tools@0.1.8

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk --no-cache add bash
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake jq
    npm config set unsafe-perm true
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk upgrade --no-cache
    apk --no-cache add \
            python3 \
            py3-pip \
            groff \
            less \
            mailcap
    pip3 install --upgrade pip awscli==1.14.5 s3cmd==2.0.1 python-magic

defaults_npm_auth: &defaults_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

defaults_npm_publish_release: &defaults_npm_publish_release
  name: Publish NPM $RELEASE_TAG artifact
  command: |
    source $BASH_ENV
    echo "Publishing tag $RELEASE_TAG"
    npm publish --tag $RELEASE_TAG --access public

defaults_npm_publish_version: &defaults_npm_publish
  name: Update version to prerelease
  command: |
    source $BASH_ENV
    echo "Publishing tag $CIRCLE_TAG"
    npm publish --tag $CIRCLE_TAG --access public

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.1-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm ci
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  build_and_test:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: build
          command: npm run build
      - run:
          name: test
          command: npm run test
      - run:
          name: prepare test/results
          command: |
            mkdir -p test/results
            mv junit.xml test/results
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  vulnerability-check:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Prune non-production packages before running license-scanner
          command: npm prune --production
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses
  
  release:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Configure git
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git checkout ${CIRCLE_BRANCH}
      - run:
          name: Configure ssh
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Generate changelog and bump package version
          command: npm run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - run:
          name: Fetch updated release branch
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          # Note: this is rather imperfect, but will do for now
          name: Format the changelog into the github release body and get release tag
          command: |
            git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
            echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
            echo 'export RELEASE_TAG=`cat package.json | jq -r .version`' >> $BASH_ENV
      - run:
          name: check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - github-release/create:
          github-token-variable: ${GITHUB_TOKEN}
          tag: v${RELEASE_TAG}
          title: v${RELEASE_TAG} Release
          description: ${RELEASE_CHANGES}
          file-path: CHANGELOG.md
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"v${RELEASE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"v${RELEASE_TAG}"'

  publish:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global

      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/

      - build_and_test:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/

      - vulnerability-check:
          context: org-global
          requires:
            - build_and_test
          filters:
            tags:
              only: /.*/

      - audit-licenses:
          context: org-global
          requires:
            - build_and_test
          filters:
            tags:
              only: /.*/

      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - audit-licenses
            - vulnerability-check
          filters:
            branches:
              only:
                - master

      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master

      - publish:
          context: org-global
          requires:
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*/
